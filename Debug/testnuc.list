
testnuc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a898  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013968  0800aa68  0800aa68  0000ba68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e3d0  0801e3d0  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0801e3d0  0801e3d0  0001f3d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e3d8  0801e3d8  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e3d8  0801e3d8  0001f3d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801e3dc  0801e3dc  0001f3dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0801e3e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002108  200001d4  0801e5b4  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200022dc  0801e5b4  000202dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d37  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cc5  00000000  00000000  00032f3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001100  00000000  00000000  00035c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c70  00000000  00000000  00036d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024973  00000000  00000000  00037970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000146d4  00000000  00000000  0005c2e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e28d6  00000000  00000000  000709b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b3  00000000  00000000  0015328d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005904  00000000  00000000  00153340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  00158c44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00003463  00000000  00000000  00158c8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000140  00000000  00000000  0015c0f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800aa50 	.word	0x0800aa50

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	0800aa50 	.word	0x0800aa50

08000210 <arm_bitreversal_32>:
 8000210:	1c4b      	adds	r3, r1, #1
 8000212:	2b01      	cmp	r3, #1
 8000214:	bf98      	it	ls
 8000216:	4770      	bxls	lr
 8000218:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800021c:	1c91      	adds	r1, r2, #2
 800021e:	089b      	lsrs	r3, r3, #2

08000220 <arm_bitreversal_32_0>:
 8000220:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000224:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000228:	880a      	ldrh	r2, [r1, #0]
 800022a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800022e:	4480      	add	r8, r0
 8000230:	4481      	add	r9, r0
 8000232:	4402      	add	r2, r0
 8000234:	4484      	add	ip, r0
 8000236:	f8d9 7000 	ldr.w	r7, [r9]
 800023a:	f8d8 6000 	ldr.w	r6, [r8]
 800023e:	6815      	ldr	r5, [r2, #0]
 8000240:	f8dc 4000 	ldr.w	r4, [ip]
 8000244:	f8c9 6000 	str.w	r6, [r9]
 8000248:	f8c8 7000 	str.w	r7, [r8]
 800024c:	f8cc 5000 	str.w	r5, [ip]
 8000250:	6014      	str	r4, [r2, #0]
 8000252:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000256:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800025a:	6855      	ldr	r5, [r2, #4]
 800025c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000260:	f8c9 6004 	str.w	r6, [r9, #4]
 8000264:	f8c8 7004 	str.w	r7, [r8, #4]
 8000268:	f8cc 5004 	str.w	r5, [ip, #4]
 800026c:	6054      	str	r4, [r2, #4]
 800026e:	3108      	adds	r1, #8
 8000270:	3b01      	subs	r3, #1
 8000272:	d1d5      	bne.n	8000220 <arm_bitreversal_32_0>
 8000274:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000278:	4770      	bx	lr

0800027a <arm_bitreversal_16>:
 800027a:	1c4b      	adds	r3, r1, #1
 800027c:	2b01      	cmp	r3, #1
 800027e:	bf98      	it	ls
 8000280:	4770      	bxls	lr
 8000282:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000286:	1c91      	adds	r1, r2, #2
 8000288:	089b      	lsrs	r3, r3, #2

0800028a <arm_bitreversal_16_0>:
 800028a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800028e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000292:	880a      	ldrh	r2, [r1, #0]
 8000294:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000298:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800029c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002a0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002a4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002a8:	f8d9 7000 	ldr.w	r7, [r9]
 80002ac:	f8d8 6000 	ldr.w	r6, [r8]
 80002b0:	6815      	ldr	r5, [r2, #0]
 80002b2:	f8dc 4000 	ldr.w	r4, [ip]
 80002b6:	f8c9 6000 	str.w	r6, [r9]
 80002ba:	f8c8 7000 	str.w	r7, [r8]
 80002be:	f8cc 5000 	str.w	r5, [ip]
 80002c2:	6014      	str	r4, [r2, #0]
 80002c4:	3108      	adds	r1, #8
 80002c6:	3b01      	subs	r3, #1
 80002c8:	d1df      	bne.n	800028a <arm_bitreversal_16_0>
 80002ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ce:	4770      	bx	lr

080002d0 <memchr>:
 80002d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002d4:	2a10      	cmp	r2, #16
 80002d6:	db2b      	blt.n	8000330 <memchr+0x60>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	d008      	beq.n	80002f0 <memchr+0x20>
 80002de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e2:	3a01      	subs	r2, #1
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d02d      	beq.n	8000344 <memchr+0x74>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	b342      	cbz	r2, 8000340 <memchr+0x70>
 80002ee:	d1f6      	bne.n	80002de <memchr+0xe>
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
 80002f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002fa:	f022 0407 	bic.w	r4, r2, #7
 80002fe:	f07f 0700 	mvns.w	r7, #0
 8000302:	2300      	movs	r3, #0
 8000304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000308:	3c08      	subs	r4, #8
 800030a:	ea85 0501 	eor.w	r5, r5, r1
 800030e:	ea86 0601 	eor.w	r6, r6, r1
 8000312:	fa85 f547 	uadd8	r5, r5, r7
 8000316:	faa3 f587 	sel	r5, r3, r7
 800031a:	fa86 f647 	uadd8	r6, r6, r7
 800031e:	faa5 f687 	sel	r6, r5, r7
 8000322:	b98e      	cbnz	r6, 8000348 <memchr+0x78>
 8000324:	d1ee      	bne.n	8000304 <memchr+0x34>
 8000326:	bcf0      	pop	{r4, r5, r6, r7}
 8000328:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800032c:	f002 0207 	and.w	r2, r2, #7
 8000330:	b132      	cbz	r2, 8000340 <memchr+0x70>
 8000332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000336:	3a01      	subs	r2, #1
 8000338:	ea83 0301 	eor.w	r3, r3, r1
 800033c:	b113      	cbz	r3, 8000344 <memchr+0x74>
 800033e:	d1f8      	bne.n	8000332 <memchr+0x62>
 8000340:	2000      	movs	r0, #0
 8000342:	4770      	bx	lr
 8000344:	3801      	subs	r0, #1
 8000346:	4770      	bx	lr
 8000348:	2d00      	cmp	r5, #0
 800034a:	bf06      	itte	eq
 800034c:	4635      	moveq	r5, r6
 800034e:	3803      	subeq	r0, #3
 8000350:	3807      	subne	r0, #7
 8000352:	f015 0f01 	tst.w	r5, #1
 8000356:	d107      	bne.n	8000368 <memchr+0x98>
 8000358:	3001      	adds	r0, #1
 800035a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800035e:	bf02      	ittt	eq
 8000360:	3001      	addeq	r0, #1
 8000362:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000366:	3001      	addeq	r0, #1
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	3801      	subs	r0, #1
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <strlen>:
 8000370:	4603      	mov	r3, r0
 8000372:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000376:	2a00      	cmp	r2, #0
 8000378:	d1fb      	bne.n	8000372 <strlen+0x2>
 800037a:	1a18      	subs	r0, r3, r0
 800037c:	3801      	subs	r0, #1
 800037e:	4770      	bx	lr

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	@ 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <__aeabi_dmul>:
 80006f8:	b570      	push	{r4, r5, r6, lr}
 80006fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000702:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000706:	bf1d      	ittte	ne
 8000708:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800070c:	ea94 0f0c 	teqne	r4, ip
 8000710:	ea95 0f0c 	teqne	r5, ip
 8000714:	f000 f8de 	bleq	80008d4 <__aeabi_dmul+0x1dc>
 8000718:	442c      	add	r4, r5
 800071a:	ea81 0603 	eor.w	r6, r1, r3
 800071e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000722:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000726:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800072a:	bf18      	it	ne
 800072c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000730:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000734:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000738:	d038      	beq.n	80007ac <__aeabi_dmul+0xb4>
 800073a:	fba0 ce02 	umull	ip, lr, r0, r2
 800073e:	f04f 0500 	mov.w	r5, #0
 8000742:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000746:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800074a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800074e:	f04f 0600 	mov.w	r6, #0
 8000752:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000756:	f09c 0f00 	teq	ip, #0
 800075a:	bf18      	it	ne
 800075c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000760:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000764:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000768:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800076c:	d204      	bcs.n	8000778 <__aeabi_dmul+0x80>
 800076e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000772:	416d      	adcs	r5, r5
 8000774:	eb46 0606 	adc.w	r6, r6, r6
 8000778:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800077c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000780:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000784:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000788:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800078c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000790:	bf88      	it	hi
 8000792:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000796:	d81e      	bhi.n	80007d6 <__aeabi_dmul+0xde>
 8000798:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800079c:	bf08      	it	eq
 800079e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007a2:	f150 0000 	adcs.w	r0, r0, #0
 80007a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80007b0:	ea46 0101 	orr.w	r1, r6, r1
 80007b4:	ea40 0002 	orr.w	r0, r0, r2
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007c0:	bfc2      	ittt	gt
 80007c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	popgt	{r4, r5, r6, pc}
 80007cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007d0:	f04f 0e00 	mov.w	lr, #0
 80007d4:	3c01      	subs	r4, #1
 80007d6:	f300 80ab 	bgt.w	8000930 <__aeabi_dmul+0x238>
 80007da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80007de:	bfde      	ittt	le
 80007e0:	2000      	movle	r0, #0
 80007e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80007e6:	bd70      	pople	{r4, r5, r6, pc}
 80007e8:	f1c4 0400 	rsb	r4, r4, #0
 80007ec:	3c20      	subs	r4, #32
 80007ee:	da35      	bge.n	800085c <__aeabi_dmul+0x164>
 80007f0:	340c      	adds	r4, #12
 80007f2:	dc1b      	bgt.n	800082c <__aeabi_dmul+0x134>
 80007f4:	f104 0414 	add.w	r4, r4, #20
 80007f8:	f1c4 0520 	rsb	r5, r4, #32
 80007fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000800:	fa20 f004 	lsr.w	r0, r0, r4
 8000804:	fa01 f205 	lsl.w	r2, r1, r5
 8000808:	ea40 0002 	orr.w	r0, r0, r2
 800080c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000810:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000814:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000818:	fa21 f604 	lsr.w	r6, r1, r4
 800081c:	eb42 0106 	adc.w	r1, r2, r6
 8000820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000824:	bf08      	it	eq
 8000826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800082a:	bd70      	pop	{r4, r5, r6, pc}
 800082c:	f1c4 040c 	rsb	r4, r4, #12
 8000830:	f1c4 0520 	rsb	r5, r4, #32
 8000834:	fa00 f304 	lsl.w	r3, r0, r4
 8000838:	fa20 f005 	lsr.w	r0, r0, r5
 800083c:	fa01 f204 	lsl.w	r2, r1, r4
 8000840:	ea40 0002 	orr.w	r0, r0, r2
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800084c:	f141 0100 	adc.w	r1, r1, #0
 8000850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000854:	bf08      	it	eq
 8000856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f1c4 0520 	rsb	r5, r4, #32
 8000860:	fa00 f205 	lsl.w	r2, r0, r5
 8000864:	ea4e 0e02 	orr.w	lr, lr, r2
 8000868:	fa20 f304 	lsr.w	r3, r0, r4
 800086c:	fa01 f205 	lsl.w	r2, r1, r5
 8000870:	ea43 0302 	orr.w	r3, r3, r2
 8000874:	fa21 f004 	lsr.w	r0, r1, r4
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	fa21 f204 	lsr.w	r2, r1, r4
 8000880:	ea20 0002 	bic.w	r0, r0, r2
 8000884:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000888:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800088c:	bf08      	it	eq
 800088e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000892:	bd70      	pop	{r4, r5, r6, pc}
 8000894:	f094 0f00 	teq	r4, #0
 8000898:	d10f      	bne.n	80008ba <__aeabi_dmul+0x1c2>
 800089a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800089e:	0040      	lsls	r0, r0, #1
 80008a0:	eb41 0101 	adc.w	r1, r1, r1
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	bf08      	it	eq
 80008aa:	3c01      	subeq	r4, #1
 80008ac:	d0f7      	beq.n	800089e <__aeabi_dmul+0x1a6>
 80008ae:	ea41 0106 	orr.w	r1, r1, r6
 80008b2:	f095 0f00 	teq	r5, #0
 80008b6:	bf18      	it	ne
 80008b8:	4770      	bxne	lr
 80008ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80008be:	0052      	lsls	r2, r2, #1
 80008c0:	eb43 0303 	adc.w	r3, r3, r3
 80008c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3d01      	subeq	r5, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1c6>
 80008ce:	ea43 0306 	orr.w	r3, r3, r6
 80008d2:	4770      	bx	lr
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008dc:	bf18      	it	ne
 80008de:	ea95 0f0c 	teqne	r5, ip
 80008e2:	d00c      	beq.n	80008fe <__aeabi_dmul+0x206>
 80008e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e8:	bf18      	it	ne
 80008ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ee:	d1d1      	bne.n	8000894 <__aeabi_dmul+0x19c>
 80008f0:	ea81 0103 	eor.w	r1, r1, r3
 80008f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008f8:	f04f 0000 	mov.w	r0, #0
 80008fc:	bd70      	pop	{r4, r5, r6, pc}
 80008fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000902:	bf06      	itte	eq
 8000904:	4610      	moveq	r0, r2
 8000906:	4619      	moveq	r1, r3
 8000908:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090c:	d019      	beq.n	8000942 <__aeabi_dmul+0x24a>
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	d102      	bne.n	800091a <__aeabi_dmul+0x222>
 8000914:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000918:	d113      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	d105      	bne.n	800092c <__aeabi_dmul+0x234>
 8000920:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000924:	bf1c      	itt	ne
 8000926:	4610      	movne	r0, r2
 8000928:	4619      	movne	r1, r3
 800092a:	d10a      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800092c:	ea81 0103 	eor.w	r1, r1, r3
 8000930:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000934:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000938:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	bd70      	pop	{r4, r5, r6, pc}
 8000942:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000946:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800094a:	bd70      	pop	{r4, r5, r6, pc}

0800094c <__aeabi_ddiv>:
 800094c:	b570      	push	{r4, r5, r6, lr}
 800094e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000952:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000956:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800095a:	bf1d      	ittte	ne
 800095c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000960:	ea94 0f0c 	teqne	r4, ip
 8000964:	ea95 0f0c 	teqne	r5, ip
 8000968:	f000 f8a7 	bleq	8000aba <__aeabi_ddiv+0x16e>
 800096c:	eba4 0405 	sub.w	r4, r4, r5
 8000970:	ea81 0e03 	eor.w	lr, r1, r3
 8000974:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000978:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800097c:	f000 8088 	beq.w	8000a90 <__aeabi_ddiv+0x144>
 8000980:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000984:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000988:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800098c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000990:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000994:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000998:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800099c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80009a4:	429d      	cmp	r5, r3
 80009a6:	bf08      	it	eq
 80009a8:	4296      	cmpeq	r6, r2
 80009aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80009ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80009b2:	d202      	bcs.n	80009ba <__aeabi_ddiv+0x6e>
 80009b4:	085b      	lsrs	r3, r3, #1
 80009b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ba:	1ab6      	subs	r6, r6, r2
 80009bc:	eb65 0503 	sbc.w	r5, r5, r3
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80009ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d6:	bf22      	ittt	cs
 80009d8:	1ab6      	subcs	r6, r6, r2
 80009da:	4675      	movcs	r5, lr
 80009dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ee:	bf22      	ittt	cs
 80009f0:	1ab6      	subcs	r6, r6, r2
 80009f2:	4675      	movcs	r5, lr
 80009f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a06:	bf22      	ittt	cs
 8000a08:	1ab6      	subcs	r6, r6, r2
 8000a0a:	4675      	movcs	r5, lr
 8000a0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a10:	085b      	lsrs	r3, r3, #1
 8000a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a1e:	bf22      	ittt	cs
 8000a20:	1ab6      	subcs	r6, r6, r2
 8000a22:	4675      	movcs	r5, lr
 8000a24:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a28:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a2c:	d018      	beq.n	8000a60 <__aeabi_ddiv+0x114>
 8000a2e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a32:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a36:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a3a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a3e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a42:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a46:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a4a:	d1c0      	bne.n	80009ce <__aeabi_ddiv+0x82>
 8000a4c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a50:	d10b      	bne.n	8000a6a <__aeabi_ddiv+0x11e>
 8000a52:	ea41 0100 	orr.w	r1, r1, r0
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a5e:	e7b6      	b.n	80009ce <__aeabi_ddiv+0x82>
 8000a60:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a64:	bf04      	itt	eq
 8000a66:	4301      	orreq	r1, r0
 8000a68:	2000      	moveq	r0, #0
 8000a6a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a6e:	bf88      	it	hi
 8000a70:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a74:	f63f aeaf 	bhi.w	80007d6 <__aeabi_dmul+0xde>
 8000a78:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a7c:	bf04      	itt	eq
 8000a7e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a86:	f150 0000 	adcs.w	r0, r0, #0
 8000a8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a8e:	bd70      	pop	{r4, r5, r6, pc}
 8000a90:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a94:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a98:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a9c:	bfc2      	ittt	gt
 8000a9e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000aa2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000aa6:	bd70      	popgt	{r4, r5, r6, pc}
 8000aa8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aac:	f04f 0e00 	mov.w	lr, #0
 8000ab0:	3c01      	subs	r4, #1
 8000ab2:	e690      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000ab4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ab8:	e68d      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000aba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000abe:	ea94 0f0c 	teq	r4, ip
 8000ac2:	bf08      	it	eq
 8000ac4:	ea95 0f0c 	teqeq	r5, ip
 8000ac8:	f43f af3b 	beq.w	8000942 <__aeabi_dmul+0x24a>
 8000acc:	ea94 0f0c 	teq	r4, ip
 8000ad0:	d10a      	bne.n	8000ae8 <__aeabi_ddiv+0x19c>
 8000ad2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ad6:	f47f af34 	bne.w	8000942 <__aeabi_dmul+0x24a>
 8000ada:	ea95 0f0c 	teq	r5, ip
 8000ade:	f47f af25 	bne.w	800092c <__aeabi_dmul+0x234>
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	e72c      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000ae8:	ea95 0f0c 	teq	r5, ip
 8000aec:	d106      	bne.n	8000afc <__aeabi_ddiv+0x1b0>
 8000aee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000af2:	f43f aefd 	beq.w	80008f0 <__aeabi_dmul+0x1f8>
 8000af6:	4610      	mov	r0, r2
 8000af8:	4619      	mov	r1, r3
 8000afa:	e722      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000afc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b06:	f47f aec5 	bne.w	8000894 <__aeabi_dmul+0x19c>
 8000b0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b0e:	f47f af0d 	bne.w	800092c <__aeabi_dmul+0x234>
 8000b12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b16:	f47f aeeb 	bne.w	80008f0 <__aeabi_dmul+0x1f8>
 8000b1a:	e712      	b.n	8000942 <__aeabi_dmul+0x24a>

08000b1c <__gedf2>:
 8000b1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b20:	e006      	b.n	8000b30 <__cmpdf2+0x4>
 8000b22:	bf00      	nop

08000b24 <__ledf2>:
 8000b24:	f04f 0c01 	mov.w	ip, #1
 8000b28:	e002      	b.n	8000b30 <__cmpdf2+0x4>
 8000b2a:	bf00      	nop

08000b2c <__cmpdf2>:
 8000b2c:	f04f 0c01 	mov.w	ip, #1
 8000b30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	bf18      	it	ne
 8000b42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b46:	d01b      	beq.n	8000b80 <__cmpdf2+0x54>
 8000b48:	b001      	add	sp, #4
 8000b4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b4e:	bf0c      	ite	eq
 8000b50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b54:	ea91 0f03 	teqne	r1, r3
 8000b58:	bf02      	ittt	eq
 8000b5a:	ea90 0f02 	teqeq	r0, r2
 8000b5e:	2000      	moveq	r0, #0
 8000b60:	4770      	bxeq	lr
 8000b62:	f110 0f00 	cmn.w	r0, #0
 8000b66:	ea91 0f03 	teq	r1, r3
 8000b6a:	bf58      	it	pl
 8000b6c:	4299      	cmppl	r1, r3
 8000b6e:	bf08      	it	eq
 8000b70:	4290      	cmpeq	r0, r2
 8000b72:	bf2c      	ite	cs
 8000b74:	17d8      	asrcs	r0, r3, #31
 8000b76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b7a:	f040 0001 	orr.w	r0, r0, #1
 8000b7e:	4770      	bx	lr
 8000b80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d102      	bne.n	8000b90 <__cmpdf2+0x64>
 8000b8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8e:	d107      	bne.n	8000ba0 <__cmpdf2+0x74>
 8000b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d1d6      	bne.n	8000b48 <__cmpdf2+0x1c>
 8000b9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9e:	d0d3      	beq.n	8000b48 <__cmpdf2+0x1c>
 8000ba0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_cdrcmple>:
 8000ba8:	4684      	mov	ip, r0
 8000baa:	4610      	mov	r0, r2
 8000bac:	4662      	mov	r2, ip
 8000bae:	468c      	mov	ip, r1
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4663      	mov	r3, ip
 8000bb4:	e000      	b.n	8000bb8 <__aeabi_cdcmpeq>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_cdcmpeq>:
 8000bb8:	b501      	push	{r0, lr}
 8000bba:	f7ff ffb7 	bl	8000b2c <__cmpdf2>
 8000bbe:	2800      	cmp	r0, #0
 8000bc0:	bf48      	it	mi
 8000bc2:	f110 0f00 	cmnmi.w	r0, #0
 8000bc6:	bd01      	pop	{r0, pc}

08000bc8 <__aeabi_dcmpeq>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff fff4 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bd0:	bf0c      	ite	eq
 8000bd2:	2001      	moveq	r0, #1
 8000bd4:	2000      	movne	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmplt>:
 8000bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be0:	f7ff ffea 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000be4:	bf34      	ite	cc
 8000be6:	2001      	movcc	r0, #1
 8000be8:	2000      	movcs	r0, #0
 8000bea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bee:	bf00      	nop

08000bf0 <__aeabi_dcmple>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff ffe0 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bf8:	bf94      	ite	ls
 8000bfa:	2001      	movls	r0, #1
 8000bfc:	2000      	movhi	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_dcmpge>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffce 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c0c:	bf94      	ite	ls
 8000c0e:	2001      	movls	r0, #1
 8000c10:	2000      	movhi	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_dcmpgt>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffc4 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c20:	bf34      	ite	cc
 8000c22:	2001      	movcc	r0, #1
 8000c24:	2000      	movcs	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_dcmpun>:
 8000c2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c34:	d102      	bne.n	8000c3c <__aeabi_dcmpun+0x10>
 8000c36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c3a:	d10a      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c44:	d102      	bne.n	8000c4c <__aeabi_dcmpun+0x20>
 8000c46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c4c:	f04f 0000 	mov.w	r0, #0
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0001 	mov.w	r0, #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2iz>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c60:	d215      	bcs.n	8000c8e <__aeabi_d2iz+0x36>
 8000c62:	d511      	bpl.n	8000c88 <__aeabi_d2iz+0x30>
 8000c64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c6c:	d912      	bls.n	8000c94 <__aeabi_d2iz+0x3c>
 8000c6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	4770      	bx	lr
 8000c88:	f04f 0000 	mov.w	r0, #0
 8000c8c:	4770      	bx	lr
 8000c8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c92:	d105      	bne.n	8000ca0 <__aeabi_d2iz+0x48>
 8000c94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c98:	bf08      	it	eq
 8000c9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c9e:	4770      	bx	lr
 8000ca0:	f04f 0000 	mov.w	r0, #0
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2f>:
 8000ca8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000cac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000cb0:	bf24      	itt	cs
 8000cb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000cb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000cba:	d90d      	bls.n	8000cd8 <__aeabi_d2f+0x30>
 8000cbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000cc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000cc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000cc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ccc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cd0:	bf08      	it	eq
 8000cd2:	f020 0001 	biceq.w	r0, r0, #1
 8000cd6:	4770      	bx	lr
 8000cd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000cdc:	d121      	bne.n	8000d22 <__aeabi_d2f+0x7a>
 8000cde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ce2:	bfbc      	itt	lt
 8000ce4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ce8:	4770      	bxlt	lr
 8000cea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000cee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cf2:	f1c2 0218 	rsb	r2, r2, #24
 8000cf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000cfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000d02:	bf18      	it	ne
 8000d04:	f040 0001 	orrne.w	r0, r0, #1
 8000d08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d14:	ea40 000c 	orr.w	r0, r0, ip
 8000d18:	fa23 f302 	lsr.w	r3, r3, r2
 8000d1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d20:	e7cc      	b.n	8000cbc <__aeabi_d2f+0x14>
 8000d22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d26:	d107      	bne.n	8000d38 <__aeabi_d2f+0x90>
 8000d28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d2c:	bf1e      	ittt	ne
 8000d2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000d32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000d36:	4770      	bxne	lr
 8000d38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000d3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <__aeabi_ldivmod>:
 8000d48:	b97b      	cbnz	r3, 8000d6a <__aeabi_ldivmod+0x22>
 8000d4a:	b972      	cbnz	r2, 8000d6a <__aeabi_ldivmod+0x22>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bfbe      	ittt	lt
 8000d50:	2000      	movlt	r0, #0
 8000d52:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000d56:	e006      	blt.n	8000d66 <__aeabi_ldivmod+0x1e>
 8000d58:	bf08      	it	eq
 8000d5a:	2800      	cmpeq	r0, #0
 8000d5c:	bf1c      	itt	ne
 8000d5e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000d62:	f04f 30ff 	movne.w	r0, #4294967295
 8000d66:	f000 b9b5 	b.w	80010d4 <__aeabi_idiv0>
 8000d6a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d6e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d72:	2900      	cmp	r1, #0
 8000d74:	db09      	blt.n	8000d8a <__aeabi_ldivmod+0x42>
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	db1a      	blt.n	8000db0 <__aeabi_ldivmod+0x68>
 8000d7a:	f000 f84d 	bl	8000e18 <__udivmoddi4>
 8000d7e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d86:	b004      	add	sp, #16
 8000d88:	4770      	bx	lr
 8000d8a:	4240      	negs	r0, r0
 8000d8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	db1b      	blt.n	8000dcc <__aeabi_ldivmod+0x84>
 8000d94:	f000 f840 	bl	8000e18 <__udivmoddi4>
 8000d98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000da0:	b004      	add	sp, #16
 8000da2:	4240      	negs	r0, r0
 8000da4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da8:	4252      	negs	r2, r2
 8000daa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000dae:	4770      	bx	lr
 8000db0:	4252      	negs	r2, r2
 8000db2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000db6:	f000 f82f 	bl	8000e18 <__udivmoddi4>
 8000dba:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dc2:	b004      	add	sp, #16
 8000dc4:	4240      	negs	r0, r0
 8000dc6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dca:	4770      	bx	lr
 8000dcc:	4252      	negs	r2, r2
 8000dce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000dd2:	f000 f821 	bl	8000e18 <__udivmoddi4>
 8000dd6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dde:	b004      	add	sp, #16
 8000de0:	4252      	negs	r2, r2
 8000de2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000de6:	4770      	bx	lr

08000de8 <__aeabi_uldivmod>:
 8000de8:	b953      	cbnz	r3, 8000e00 <__aeabi_uldivmod+0x18>
 8000dea:	b94a      	cbnz	r2, 8000e00 <__aeabi_uldivmod+0x18>
 8000dec:	2900      	cmp	r1, #0
 8000dee:	bf08      	it	eq
 8000df0:	2800      	cmpeq	r0, #0
 8000df2:	bf1c      	itt	ne
 8000df4:	f04f 31ff 	movne.w	r1, #4294967295
 8000df8:	f04f 30ff 	movne.w	r0, #4294967295
 8000dfc:	f000 b96a 	b.w	80010d4 <__aeabi_idiv0>
 8000e00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e08:	f000 f806 	bl	8000e18 <__udivmoddi4>
 8000e0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e14:	b004      	add	sp, #16
 8000e16:	4770      	bx	lr

08000e18 <__udivmoddi4>:
 8000e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e1c:	9d08      	ldr	r5, [sp, #32]
 8000e1e:	460c      	mov	r4, r1
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d14e      	bne.n	8000ec2 <__udivmoddi4+0xaa>
 8000e24:	4694      	mov	ip, r2
 8000e26:	458c      	cmp	ip, r1
 8000e28:	4686      	mov	lr, r0
 8000e2a:	fab2 f282 	clz	r2, r2
 8000e2e:	d962      	bls.n	8000ef6 <__udivmoddi4+0xde>
 8000e30:	b14a      	cbz	r2, 8000e46 <__udivmoddi4+0x2e>
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	4091      	lsls	r1, r2
 8000e38:	fa20 f303 	lsr.w	r3, r0, r3
 8000e3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e40:	4319      	orrs	r1, r3
 8000e42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4a:	fa1f f68c 	uxth.w	r6, ip
 8000e4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e56:	fb07 1114 	mls	r1, r7, r4, r1
 8000e5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5e:	fb04 f106 	mul.w	r1, r4, r6
 8000e62:	4299      	cmp	r1, r3
 8000e64:	d90a      	bls.n	8000e7c <__udivmoddi4+0x64>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e6e:	f080 8112 	bcs.w	8001096 <__udivmoddi4+0x27e>
 8000e72:	4299      	cmp	r1, r3
 8000e74:	f240 810f 	bls.w	8001096 <__udivmoddi4+0x27e>
 8000e78:	3c02      	subs	r4, #2
 8000e7a:	4463      	add	r3, ip
 8000e7c:	1a59      	subs	r1, r3, r1
 8000e7e:	fa1f f38e 	uxth.w	r3, lr
 8000e82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e86:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e8e:	fb00 f606 	mul.w	r6, r0, r6
 8000e92:	429e      	cmp	r6, r3
 8000e94:	d90a      	bls.n	8000eac <__udivmoddi4+0x94>
 8000e96:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e9e:	f080 80fc 	bcs.w	800109a <__udivmoddi4+0x282>
 8000ea2:	429e      	cmp	r6, r3
 8000ea4:	f240 80f9 	bls.w	800109a <__udivmoddi4+0x282>
 8000ea8:	4463      	add	r3, ip
 8000eaa:	3802      	subs	r0, #2
 8000eac:	1b9b      	subs	r3, r3, r6
 8000eae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	b11d      	cbz	r5, 8000ebe <__udivmoddi4+0xa6>
 8000eb6:	40d3      	lsrs	r3, r2
 8000eb8:	2200      	movs	r2, #0
 8000eba:	e9c5 3200 	strd	r3, r2, [r5]
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	d905      	bls.n	8000ed2 <__udivmoddi4+0xba>
 8000ec6:	b10d      	cbz	r5, 8000ecc <__udivmoddi4+0xb4>
 8000ec8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4608      	mov	r0, r1
 8000ed0:	e7f5      	b.n	8000ebe <__udivmoddi4+0xa6>
 8000ed2:	fab3 f183 	clz	r1, r3
 8000ed6:	2900      	cmp	r1, #0
 8000ed8:	d146      	bne.n	8000f68 <__udivmoddi4+0x150>
 8000eda:	42a3      	cmp	r3, r4
 8000edc:	d302      	bcc.n	8000ee4 <__udivmoddi4+0xcc>
 8000ede:	4290      	cmp	r0, r2
 8000ee0:	f0c0 80f0 	bcc.w	80010c4 <__udivmoddi4+0x2ac>
 8000ee4:	1a86      	subs	r6, r0, r2
 8000ee6:	eb64 0303 	sbc.w	r3, r4, r3
 8000eea:	2001      	movs	r0, #1
 8000eec:	2d00      	cmp	r5, #0
 8000eee:	d0e6      	beq.n	8000ebe <__udivmoddi4+0xa6>
 8000ef0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ef4:	e7e3      	b.n	8000ebe <__udivmoddi4+0xa6>
 8000ef6:	2a00      	cmp	r2, #0
 8000ef8:	f040 8090 	bne.w	800101c <__udivmoddi4+0x204>
 8000efc:	eba1 040c 	sub.w	r4, r1, ip
 8000f00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f04:	fa1f f78c 	uxth.w	r7, ip
 8000f08:	2101      	movs	r1, #1
 8000f0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f12:	fb08 4416 	mls	r4, r8, r6, r4
 8000f16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f1a:	fb07 f006 	mul.w	r0, r7, r6
 8000f1e:	4298      	cmp	r0, r3
 8000f20:	d908      	bls.n	8000f34 <__udivmoddi4+0x11c>
 8000f22:	eb1c 0303 	adds.w	r3, ip, r3
 8000f26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f2a:	d202      	bcs.n	8000f32 <__udivmoddi4+0x11a>
 8000f2c:	4298      	cmp	r0, r3
 8000f2e:	f200 80cd 	bhi.w	80010cc <__udivmoddi4+0x2b4>
 8000f32:	4626      	mov	r6, r4
 8000f34:	1a1c      	subs	r4, r3, r0
 8000f36:	fa1f f38e 	uxth.w	r3, lr
 8000f3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000f42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f46:	fb00 f707 	mul.w	r7, r0, r7
 8000f4a:	429f      	cmp	r7, r3
 8000f4c:	d908      	bls.n	8000f60 <__udivmoddi4+0x148>
 8000f4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f56:	d202      	bcs.n	8000f5e <__udivmoddi4+0x146>
 8000f58:	429f      	cmp	r7, r3
 8000f5a:	f200 80b0 	bhi.w	80010be <__udivmoddi4+0x2a6>
 8000f5e:	4620      	mov	r0, r4
 8000f60:	1bdb      	subs	r3, r3, r7
 8000f62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f66:	e7a5      	b.n	8000eb4 <__udivmoddi4+0x9c>
 8000f68:	f1c1 0620 	rsb	r6, r1, #32
 8000f6c:	408b      	lsls	r3, r1
 8000f6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000f72:	431f      	orrs	r7, r3
 8000f74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f78:	fa04 f301 	lsl.w	r3, r4, r1
 8000f7c:	ea43 030c 	orr.w	r3, r3, ip
 8000f80:	40f4      	lsrs	r4, r6
 8000f82:	fa00 f801 	lsl.w	r8, r0, r1
 8000f86:	0c38      	lsrs	r0, r7, #16
 8000f88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000f90:	fa1f fc87 	uxth.w	ip, r7
 8000f94:	fb00 441e 	mls	r4, r0, lr, r4
 8000f98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000fa0:	45a1      	cmp	r9, r4
 8000fa2:	fa02 f201 	lsl.w	r2, r2, r1
 8000fa6:	d90a      	bls.n	8000fbe <__udivmoddi4+0x1a6>
 8000fa8:	193c      	adds	r4, r7, r4
 8000faa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000fae:	f080 8084 	bcs.w	80010ba <__udivmoddi4+0x2a2>
 8000fb2:	45a1      	cmp	r9, r4
 8000fb4:	f240 8081 	bls.w	80010ba <__udivmoddi4+0x2a2>
 8000fb8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fbc:	443c      	add	r4, r7
 8000fbe:	eba4 0409 	sub.w	r4, r4, r9
 8000fc2:	fa1f f983 	uxth.w	r9, r3
 8000fc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fca:	fb00 4413 	mls	r4, r0, r3, r4
 8000fce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fd6:	45a4      	cmp	ip, r4
 8000fd8:	d907      	bls.n	8000fea <__udivmoddi4+0x1d2>
 8000fda:	193c      	adds	r4, r7, r4
 8000fdc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000fe0:	d267      	bcs.n	80010b2 <__udivmoddi4+0x29a>
 8000fe2:	45a4      	cmp	ip, r4
 8000fe4:	d965      	bls.n	80010b2 <__udivmoddi4+0x29a>
 8000fe6:	3b02      	subs	r3, #2
 8000fe8:	443c      	add	r4, r7
 8000fea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000fee:	fba0 9302 	umull	r9, r3, r0, r2
 8000ff2:	eba4 040c 	sub.w	r4, r4, ip
 8000ff6:	429c      	cmp	r4, r3
 8000ff8:	46ce      	mov	lr, r9
 8000ffa:	469c      	mov	ip, r3
 8000ffc:	d351      	bcc.n	80010a2 <__udivmoddi4+0x28a>
 8000ffe:	d04e      	beq.n	800109e <__udivmoddi4+0x286>
 8001000:	b155      	cbz	r5, 8001018 <__udivmoddi4+0x200>
 8001002:	ebb8 030e 	subs.w	r3, r8, lr
 8001006:	eb64 040c 	sbc.w	r4, r4, ip
 800100a:	fa04 f606 	lsl.w	r6, r4, r6
 800100e:	40cb      	lsrs	r3, r1
 8001010:	431e      	orrs	r6, r3
 8001012:	40cc      	lsrs	r4, r1
 8001014:	e9c5 6400 	strd	r6, r4, [r5]
 8001018:	2100      	movs	r1, #0
 800101a:	e750      	b.n	8000ebe <__udivmoddi4+0xa6>
 800101c:	f1c2 0320 	rsb	r3, r2, #32
 8001020:	fa20 f103 	lsr.w	r1, r0, r3
 8001024:	fa0c fc02 	lsl.w	ip, ip, r2
 8001028:	fa24 f303 	lsr.w	r3, r4, r3
 800102c:	4094      	lsls	r4, r2
 800102e:	430c      	orrs	r4, r1
 8001030:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001034:	fa00 fe02 	lsl.w	lr, r0, r2
 8001038:	fa1f f78c 	uxth.w	r7, ip
 800103c:	fbb3 f0f8 	udiv	r0, r3, r8
 8001040:	fb08 3110 	mls	r1, r8, r0, r3
 8001044:	0c23      	lsrs	r3, r4, #16
 8001046:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800104a:	fb00 f107 	mul.w	r1, r0, r7
 800104e:	4299      	cmp	r1, r3
 8001050:	d908      	bls.n	8001064 <__udivmoddi4+0x24c>
 8001052:	eb1c 0303 	adds.w	r3, ip, r3
 8001056:	f100 36ff 	add.w	r6, r0, #4294967295
 800105a:	d22c      	bcs.n	80010b6 <__udivmoddi4+0x29e>
 800105c:	4299      	cmp	r1, r3
 800105e:	d92a      	bls.n	80010b6 <__udivmoddi4+0x29e>
 8001060:	3802      	subs	r0, #2
 8001062:	4463      	add	r3, ip
 8001064:	1a5b      	subs	r3, r3, r1
 8001066:	b2a4      	uxth	r4, r4
 8001068:	fbb3 f1f8 	udiv	r1, r3, r8
 800106c:	fb08 3311 	mls	r3, r8, r1, r3
 8001070:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001074:	fb01 f307 	mul.w	r3, r1, r7
 8001078:	42a3      	cmp	r3, r4
 800107a:	d908      	bls.n	800108e <__udivmoddi4+0x276>
 800107c:	eb1c 0404 	adds.w	r4, ip, r4
 8001080:	f101 36ff 	add.w	r6, r1, #4294967295
 8001084:	d213      	bcs.n	80010ae <__udivmoddi4+0x296>
 8001086:	42a3      	cmp	r3, r4
 8001088:	d911      	bls.n	80010ae <__udivmoddi4+0x296>
 800108a:	3902      	subs	r1, #2
 800108c:	4464      	add	r4, ip
 800108e:	1ae4      	subs	r4, r4, r3
 8001090:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001094:	e739      	b.n	8000f0a <__udivmoddi4+0xf2>
 8001096:	4604      	mov	r4, r0
 8001098:	e6f0      	b.n	8000e7c <__udivmoddi4+0x64>
 800109a:	4608      	mov	r0, r1
 800109c:	e706      	b.n	8000eac <__udivmoddi4+0x94>
 800109e:	45c8      	cmp	r8, r9
 80010a0:	d2ae      	bcs.n	8001000 <__udivmoddi4+0x1e8>
 80010a2:	ebb9 0e02 	subs.w	lr, r9, r2
 80010a6:	eb63 0c07 	sbc.w	ip, r3, r7
 80010aa:	3801      	subs	r0, #1
 80010ac:	e7a8      	b.n	8001000 <__udivmoddi4+0x1e8>
 80010ae:	4631      	mov	r1, r6
 80010b0:	e7ed      	b.n	800108e <__udivmoddi4+0x276>
 80010b2:	4603      	mov	r3, r0
 80010b4:	e799      	b.n	8000fea <__udivmoddi4+0x1d2>
 80010b6:	4630      	mov	r0, r6
 80010b8:	e7d4      	b.n	8001064 <__udivmoddi4+0x24c>
 80010ba:	46d6      	mov	lr, sl
 80010bc:	e77f      	b.n	8000fbe <__udivmoddi4+0x1a6>
 80010be:	4463      	add	r3, ip
 80010c0:	3802      	subs	r0, #2
 80010c2:	e74d      	b.n	8000f60 <__udivmoddi4+0x148>
 80010c4:	4606      	mov	r6, r0
 80010c6:	4623      	mov	r3, r4
 80010c8:	4608      	mov	r0, r1
 80010ca:	e70f      	b.n	8000eec <__udivmoddi4+0xd4>
 80010cc:	3e02      	subs	r6, #2
 80010ce:	4463      	add	r3, ip
 80010d0:	e730      	b.n	8000f34 <__udivmoddi4+0x11c>
 80010d2:	bf00      	nop

080010d4 <__aeabi_idiv0>:
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop

080010d8 <toggle_pins>:

#ifndef INC_TOGGLE_PINS_H_
#define INC_TOGGLE_PINS_H_

//przełączanie pomiędzy pinami
void toggle_pins(void) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
    static uint8_t state = 0;

    switch (state) {
 80010dc:	4b3d      	ldr	r3, [pc, #244]	@ (80011d4 <toggle_pins+0xfc>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b03      	cmp	r3, #3
 80010e2:	d863      	bhi.n	80011ac <toggle_pins+0xd4>
 80010e4:	a201      	add	r2, pc, #4	@ (adr r2, 80010ec <toggle_pins+0x14>)
 80010e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ea:	bf00      	nop
 80010ec:	080010fd 	.word	0x080010fd
 80010f0:	08001129 	.word	0x08001129
 80010f4:	08001155 	.word	0x08001155
 80010f8:	08001181 	.word	0x08001181
        case 0:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);  // PB0 HIGH
 80010fc:	2201      	movs	r2, #1
 80010fe:	2101      	movs	r1, #1
 8001100:	4835      	ldr	r0, [pc, #212]	@ (80011d8 <toggle_pins+0x100>)
 8001102:	f003 fb2b 	bl	800475c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);  // PB1 HIGH
 8001106:	2201      	movs	r2, #1
 8001108:	2102      	movs	r1, #2
 800110a:	4833      	ldr	r0, [pc, #204]	@ (80011d8 <toggle_pins+0x100>)
 800110c:	f003 fb26 	bl	800475c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);  // PB2 LOW
 8001110:	2200      	movs	r2, #0
 8001112:	2104      	movs	r1, #4
 8001114:	4830      	ldr	r0, [pc, #192]	@ (80011d8 <toggle_pins+0x100>)
 8001116:	f003 fb21 	bl	800475c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET); // PB10 LOW
 800111a:	2200      	movs	r2, #0
 800111c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001120:	482d      	ldr	r0, [pc, #180]	@ (80011d8 <toggle_pins+0x100>)
 8001122:	f003 fb1b 	bl	800475c <HAL_GPIO_WritePin>

            break;
 8001126:	e041      	b.n	80011ac <toggle_pins+0xd4>
        case 1:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);  // PB0 LOW
 8001128:	2200      	movs	r2, #0
 800112a:	2101      	movs	r1, #1
 800112c:	482a      	ldr	r0, [pc, #168]	@ (80011d8 <toggle_pins+0x100>)
 800112e:	f003 fb15 	bl	800475c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);    // PB1 HIGH
 8001132:	2201      	movs	r2, #1
 8001134:	2102      	movs	r1, #2
 8001136:	4828      	ldr	r0, [pc, #160]	@ (80011d8 <toggle_pins+0x100>)
 8001138:	f003 fb10 	bl	800475c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);  // PB2 HIGH
 800113c:	2201      	movs	r2, #1
 800113e:	2104      	movs	r1, #4
 8001140:	4825      	ldr	r0, [pc, #148]	@ (80011d8 <toggle_pins+0x100>)
 8001142:	f003 fb0b 	bl	800475c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET); // PB10 LOW
 8001146:	2200      	movs	r2, #0
 8001148:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800114c:	4822      	ldr	r0, [pc, #136]	@ (80011d8 <toggle_pins+0x100>)
 800114e:	f003 fb05 	bl	800475c <HAL_GPIO_WritePin>
            break;
 8001152:	e02b      	b.n	80011ac <toggle_pins+0xd4>
        case 2:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);  // PB0 LOW
 8001154:	2200      	movs	r2, #0
 8001156:	2101      	movs	r1, #1
 8001158:	481f      	ldr	r0, [pc, #124]	@ (80011d8 <toggle_pins+0x100>)
 800115a:	f003 faff 	bl	800475c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);  // PB1 LOW
 800115e:	2200      	movs	r2, #0
 8001160:	2102      	movs	r1, #2
 8001162:	481d      	ldr	r0, [pc, #116]	@ (80011d8 <toggle_pins+0x100>)
 8001164:	f003 fafa 	bl	800475c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);    // PB2 HIGH
 8001168:	2201      	movs	r2, #1
 800116a:	2104      	movs	r1, #4
 800116c:	481a      	ldr	r0, [pc, #104]	@ (80011d8 <toggle_pins+0x100>)
 800116e:	f003 faf5 	bl	800475c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET); // PB10 HIGH
 8001172:	2201      	movs	r2, #1
 8001174:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001178:	4817      	ldr	r0, [pc, #92]	@ (80011d8 <toggle_pins+0x100>)
 800117a:	f003 faef 	bl	800475c <HAL_GPIO_WritePin>
            break;
 800117e:	e015      	b.n	80011ac <toggle_pins+0xd4>
        case 3:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);  // PB0 HIGH
 8001180:	2201      	movs	r2, #1
 8001182:	2101      	movs	r1, #1
 8001184:	4814      	ldr	r0, [pc, #80]	@ (80011d8 <toggle_pins+0x100>)
 8001186:	f003 fae9 	bl	800475c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);  // PB1 LOW
 800118a:	2200      	movs	r2, #0
 800118c:	2102      	movs	r1, #2
 800118e:	4812      	ldr	r0, [pc, #72]	@ (80011d8 <toggle_pins+0x100>)
 8001190:	f003 fae4 	bl	800475c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);  // PB2 LOW
 8001194:	2200      	movs	r2, #0
 8001196:	2104      	movs	r1, #4
 8001198:	480f      	ldr	r0, [pc, #60]	@ (80011d8 <toggle_pins+0x100>)
 800119a:	f003 fadf 	bl	800475c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);   // PB10 HIGH
 800119e:	2201      	movs	r2, #1
 80011a0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011a4:	480c      	ldr	r0, [pc, #48]	@ (80011d8 <toggle_pins+0x100>)
 80011a6:	f003 fad9 	bl	800475c <HAL_GPIO_WritePin>
            break;
 80011aa:	bf00      	nop
    }

    state = (state + 1) % 4;
 80011ac:	4b09      	ldr	r3, [pc, #36]	@ (80011d4 <toggle_pins+0xfc>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	3301      	adds	r3, #1
 80011b2:	425a      	negs	r2, r3
 80011b4:	f003 0303 	and.w	r3, r3, #3
 80011b8:	f002 0203 	and.w	r2, r2, #3
 80011bc:	bf58      	it	pl
 80011be:	4253      	negpl	r3, r2
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	4b04      	ldr	r3, [pc, #16]	@ (80011d4 <toggle_pins+0xfc>)
 80011c4:	701a      	strb	r2, [r3, #0]

    HAL_Delay(1000);
 80011c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011ca:	f001 fdb7 	bl	8002d3c <HAL_Delay>
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20002184 	.word	0x20002184
 80011d8:	40020400 	.word	0x40020400
 80011dc:	00000000 	.word	0x00000000

080011e0 <calculate_angles>:
    float azimuth;
    float elevation;
} AngleResults;

AngleResults calculate_angles(const float cosAlpha[4])
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b092      	sub	sp, #72	@ 0x48
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
    AngleResults results;

    // Tutaj ustalasz, JAK łączysz dane z 4 pomiarów
    // np. najprostszy pomysł: uśrednienie
    float sumAlpha = 0.0f;
 80011e8:	f04f 0300 	mov.w	r3, #0
 80011ec:	647b      	str	r3, [r7, #68]	@ 0x44
    float sumBeta  = 0.0f;
 80011ee:	f04f 0300 	mov.w	r3, #0
 80011f2:	643b      	str	r3, [r7, #64]	@ 0x40
    sumAlpha = cosAlpha[0]+ cosAlpha[2];
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	ed93 7a00 	vldr	s14, [r3]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	3308      	adds	r3, #8
 80011fe:	edd3 7a00 	vldr	s15, [r3]
 8001202:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001206:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    sumAlpha = cosAlpha[1]+ cosAlpha[3];
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	3304      	adds	r3, #4
 800120e:	ed93 7a00 	vldr	s14, [r3]
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	330c      	adds	r3, #12
 8001216:	edd3 7a00 	vldr	s15, [r3]
 800121a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800121e:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44

    float meanAlpha = sumAlpha / 2.0f;
 8001222:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8001226:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800122a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800122e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    float meanBeta  = sumBeta  / 2.0f;
 8001232:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001236:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800123a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800123e:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

    // Od tego miejsca - identyczna logika, jak w starej calculate_angles(...)
    float cos_alpha_squared = meanAlpha * meanAlpha;
 8001242:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001246:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800124a:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    float cos_beta_squared  = meanBeta  * meanBeta;
 800124e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001252:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001256:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Warunek sprawdzający, czy nie przekraczamy 1 (czy istnieje rozwiązanie):
    if (cos_alpha_squared + cos_beta_squared > 1.0f) {
 800125a:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800125e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001262:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001266:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800126a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800126e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001272:	dd0e      	ble.n	8001292 <calculate_angles+0xb2>
        // Brak geometrycznego przecięcia stożków => błąd pomiaru
        results.azimuth = 0.0f;
 8001274:	f04f 0300 	mov.w	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
        results.elevation = 0.0f;
 800127a:	f04f 0300 	mov.w	r3, #0
 800127e:	61bb      	str	r3, [r7, #24]
        return results;
 8001280:	f107 031c 	add.w	r3, r7, #28
 8001284:	f107 0214 	add.w	r2, r7, #20
 8001288:	e892 0003 	ldmia.w	r2, {r0, r1}
 800128c:	e883 0003 	stmia.w	r3, {r0, r1}
 8001290:	e05b      	b.n	800134a <calculate_angles+0x16a>
    }

    // Wyliczenie "x, y, z" wg Twoich wzorów
    float x = meanAlpha;
 8001292:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001294:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float y = meanBeta;
 8001296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001298:	62bb      	str	r3, [r7, #40]	@ 0x28
    float z = sqrtf(1.0f - cos_alpha_squared - cos_beta_squared);
 800129a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800129e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80012a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012a6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80012aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012ae:	eeb0 0a67 	vmov.f32	s0, s15
 80012b2:	f008 ff81 	bl	800a1b8 <sqrtf>
 80012b6:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24

    // azimuth = atan2(x, y) => jak w Twoim kodzie
    results.azimuth = atan2f(x, y) * (180.0f / M_PI);
 80012ba:	edd7 0a0a 	vldr	s1, [r7, #40]	@ 0x28
 80012be:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 80012c2:	f008 ff77 	bl	800a1b4 <atan2f>
 80012c6:	ee10 3a10 	vmov	r3, s0
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff f9bc 	bl	8000648 <__aeabi_f2d>
 80012d0:	a325      	add	r3, pc, #148	@ (adr r3, 8001368 <calculate_angles+0x188>)
 80012d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d6:	f7ff fa0f 	bl	80006f8 <__aeabi_dmul>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	4610      	mov	r0, r2
 80012e0:	4619      	mov	r1, r3
 80012e2:	f7ff fce1 	bl	8000ca8 <__aeabi_d2f>
 80012e6:	4603      	mov	r3, r0
 80012e8:	617b      	str	r3, [r7, #20]

    // elevation = atan2(z, sqrt(x^2 + y^2)) lub arcsin(z) => jak w Twoim kodzie
    results.elevation = atan2f(z, sqrtf(x*x + y*y)) * (180.0f / M_PI);
 80012ea:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80012ee:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80012f2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80012f6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80012fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001302:	f008 ff59 	bl	800a1b8 <sqrtf>
 8001306:	eef0 7a40 	vmov.f32	s15, s0
 800130a:	eef0 0a67 	vmov.f32	s1, s15
 800130e:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001312:	f008 ff4f 	bl	800a1b4 <atan2f>
 8001316:	ee10 3a10 	vmov	r3, s0
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff f994 	bl	8000648 <__aeabi_f2d>
 8001320:	a311      	add	r3, pc, #68	@ (adr r3, 8001368 <calculate_angles+0x188>)
 8001322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001326:	f7ff f9e7 	bl	80006f8 <__aeabi_dmul>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4610      	mov	r0, r2
 8001330:	4619      	mov	r1, r3
 8001332:	f7ff fcb9 	bl	8000ca8 <__aeabi_d2f>
 8001336:	4603      	mov	r3, r0
 8001338:	61bb      	str	r3, [r7, #24]

    return results;
 800133a:	f107 031c 	add.w	r3, r7, #28
 800133e:	f107 0214 	add.w	r2, r7, #20
 8001342:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001346:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800134a:	69fa      	ldr	r2, [r7, #28]
 800134c:	6a3b      	ldr	r3, [r7, #32]
 800134e:	ee07 2a10 	vmov	s14, r2
 8001352:	ee07 3a90 	vmov	s15, r3
 8001356:	eeb0 0a47 	vmov.f32	s0, s14
 800135a:	eef0 0a67 	vmov.f32	s1, s15
 800135e:	3748      	adds	r7, #72	@ 0x48
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	f3af 8000 	nop.w
 8001368:	1a63c1f8 	.word	0x1a63c1f8
 800136c:	404ca5dc 	.word	0x404ca5dc

08001370 <_write>:

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
int _write(int file, char *ptr, int len)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
    if (HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY) != HAL_OK)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	b29a      	uxth	r2, r3
 8001380:	f04f 33ff 	mov.w	r3, #4294967295
 8001384:	68b9      	ldr	r1, [r7, #8]
 8001386:	4807      	ldr	r0, [pc, #28]	@ (80013a4 <_write+0x34>)
 8001388:	f004 fd60 	bl	8005e4c <HAL_UART_Transmit>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d002      	beq.n	8001398 <_write+0x28>
    {
        // Optionally handle error, but do *not* call printf here!
        return -1;  // Indicate error
 8001392:	f04f 33ff 	mov.w	r3, #4294967295
 8001396:	e000      	b.n	800139a <_write+0x2a>
    }
    return len;
 8001398:	687b      	ldr	r3, [r7, #4]
}
 800139a:	4618      	mov	r0, r3
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	2000213c 	.word	0x2000213c

080013a8 <read_voltage>:
float read_voltage(ADC_HandleTypeDef *hadc, uint32_t channel);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float read_voltage(ADC_HandleTypeDef *hadc, uint32_t channel) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b088      	sub	sp, #32
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
    ADC_ChannelConfTypeDef sConfig = {0};
 80013b2:	f107 0308 	add.w	r3, r7, #8
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]
    sConfig.Channel = channel;
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	60bb      	str	r3, [r7, #8]

    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013c4:	2300      	movs	r3, #0
 80013c6:	613b      	str	r3, [r7, #16]

    if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK) {
 80013c8:	f107 0308 	add.w	r3, r7, #8
 80013cc:	4619      	mov	r1, r3
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f001 ffe8 	bl	80033a4 <HAL_ADC_ConfigChannel>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <read_voltage+0x36>
        Error_Handler();
 80013da:	f001 f889 	bl	80024f0 <Error_Handler>
    }


    HAL_ADC_Start(hadc);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f001 fd14 	bl	8002e0c <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY) == HAL_OK) {
 80013e4:	f04f 31ff 	mov.w	r1, #4294967295
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f001 fe14 	bl	8003016 <HAL_ADC_PollForConversion>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d11e      	bne.n	8001432 <read_voltage+0x8a>
        uint32_t adcValue = HAL_ADC_GetValue(hadc);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f001 ffa9 	bl	800334c <HAL_ADC_GetValue>
 80013fa:	61f8      	str	r0, [r7, #28]
        float voltage = (adcValue * 3.3) / 4096;
 80013fc:	69f8      	ldr	r0, [r7, #28]
 80013fe:	f7ff f901 	bl	8000604 <__aeabi_ui2d>
 8001402:	a314      	add	r3, pc, #80	@ (adr r3, 8001454 <read_voltage+0xac>)
 8001404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001408:	f7ff f976 	bl	80006f8 <__aeabi_dmul>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	4610      	mov	r0, r2
 8001412:	4619      	mov	r1, r3
 8001414:	f04f 0200 	mov.w	r2, #0
 8001418:	4b0d      	ldr	r3, [pc, #52]	@ (8001450 <read_voltage+0xa8>)
 800141a:	f7ff fa97 	bl	800094c <__aeabi_ddiv>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	4610      	mov	r0, r2
 8001424:	4619      	mov	r1, r3
 8001426:	f7ff fc3f 	bl	8000ca8 <__aeabi_d2f>
 800142a:	4603      	mov	r3, r0
 800142c:	61bb      	str	r3, [r7, #24]
        return voltage;
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	e004      	b.n	800143c <read_voltage+0x94>
    }
    HAL_ADC_Stop(hadc);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f001 fdbc 	bl	8002fb0 <HAL_ADC_Stop>

    return 0;
 8001438:	f04f 0300 	mov.w	r3, #0
}
 800143c:	ee07 3a90 	vmov	s15, r3
 8001440:	eeb0 0a67 	vmov.f32	s0, s15
 8001444:	3720      	adds	r7, #32
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	f3af 8000 	nop.w
 8001450:	40b00000 	.word	0x40b00000
 8001454:	66666666 	.word	0x66666666
 8001458:	400a6666 	.word	0x400a6666

0800145c <perform_fft>:
    HAL_ADC_Stop(hadc);

    return results;
}

void perform_fft(void) {
 800145c:	b580      	push	{r7, lr}
 800145e:	b08c      	sub	sp, #48	@ 0x30
 8001460:	af00      	add	r7, sp, #0
    // Initialize RFFT instance
    arm_rfft_fast_instance_f32 S;
    if (arm_rfft_fast_init_f32(&S, FFT_SIZE) != ARM_MATH_SUCCESS) {
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001468:	4618      	mov	r0, r3
 800146a:	f005 f8e9 	bl	8006640 <arm_rfft_fast_init_f32>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d003      	beq.n	800147c <perform_fft+0x20>
        printf("FFT Initialization Error!\n\r");
 8001474:	4841      	ldr	r0, [pc, #260]	@ (800157c <perform_fft+0x120>)
 8001476:	f006 feb9 	bl	80081ec <iprintf>
 800147a:	e07b      	b.n	8001574 <perform_fft+0x118>
        return;
    }

    for (int i = 3;i<FFT_SIZE -3;i++){
 800147c:	2303      	movs	r3, #3
 800147e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001480:	e036      	b.n	80014f0 <perform_fft+0x94>
    	tab_ADC[i]=(tab_ADC[i-2]+tab_ADC[i-1]+tab_ADC[i]+tab_ADC[i+1]+tab_ADC[i+2])/5;
 8001482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001484:	3b02      	subs	r3, #2
 8001486:	4a3e      	ldr	r2, [pc, #248]	@ (8001580 <perform_fft+0x124>)
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4413      	add	r3, r2
 800148c:	ed93 7a00 	vldr	s14, [r3]
 8001490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001492:	3b01      	subs	r3, #1
 8001494:	4a3a      	ldr	r2, [pc, #232]	@ (8001580 <perform_fft+0x124>)
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	4413      	add	r3, r2
 800149a:	edd3 7a00 	vldr	s15, [r3]
 800149e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014a2:	4a37      	ldr	r2, [pc, #220]	@ (8001580 <perform_fft+0x124>)
 80014a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	4413      	add	r3, r2
 80014aa:	edd3 7a00 	vldr	s15, [r3]
 80014ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014b4:	3301      	adds	r3, #1
 80014b6:	4a32      	ldr	r2, [pc, #200]	@ (8001580 <perform_fft+0x124>)
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4413      	add	r3, r2
 80014bc:	edd3 7a00 	vldr	s15, [r3]
 80014c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014c6:	3302      	adds	r3, #2
 80014c8:	4a2d      	ldr	r2, [pc, #180]	@ (8001580 <perform_fft+0x124>)
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	edd3 7a00 	vldr	s15, [r3]
 80014d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014d6:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 80014da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014de:	4a28      	ldr	r2, [pc, #160]	@ (8001580 <perform_fft+0x124>)
 80014e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 3;i<FFT_SIZE -3;i++){
 80014ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014ec:	3301      	adds	r3, #1
 80014ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014f2:	f5b3 7ffe 	cmp.w	r3, #508	@ 0x1fc
 80014f6:	ddc4      	ble.n	8001482 <perform_fft+0x26>
    }

    arm_rfft_fast_f32(&S, tab_ADC, fft_output, 0);
 80014f8:	1d38      	adds	r0, r7, #4
 80014fa:	2300      	movs	r3, #0
 80014fc:	4a21      	ldr	r2, [pc, #132]	@ (8001584 <perform_fft+0x128>)
 80014fe:	4920      	ldr	r1, [pc, #128]	@ (8001580 <perform_fft+0x124>)
 8001500:	f005 f922 	bl	8006748 <arm_rfft_fast_f32>


    arm_cmplx_mag_f32(fft_output, fft_amplitude, FFT_SIZE / 2);
 8001504:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001508:	491f      	ldr	r1, [pc, #124]	@ (8001588 <perform_fft+0x12c>)
 800150a:	481e      	ldr	r0, [pc, #120]	@ (8001584 <perform_fft+0x128>)
 800150c:	f005 fd8a 	bl	8007024 <arm_cmplx_mag_f32>

    // Find the dominant frequency
    float max_amplitude = 0.0f;
 8001510:	f04f 0300 	mov.w	r3, #0
 8001514:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t max_index = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int i = 2; i < FFT_SIZE / 2; i++) {
 800151a:	2302      	movs	r3, #2
 800151c:	623b      	str	r3, [r7, #32]
 800151e:	e017      	b.n	8001550 <perform_fft+0xf4>
        if (fft_amplitude[i] > max_amplitude) {
 8001520:	4a19      	ldr	r2, [pc, #100]	@ (8001588 <perform_fft+0x12c>)
 8001522:	6a3b      	ldr	r3, [r7, #32]
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4413      	add	r3, r2
 8001528:	edd3 7a00 	vldr	s15, [r3]
 800152c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001530:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001538:	d507      	bpl.n	800154a <perform_fft+0xee>
            max_amplitude = fft_amplitude[i];
 800153a:	4a13      	ldr	r2, [pc, #76]	@ (8001588 <perform_fft+0x12c>)
 800153c:	6a3b      	ldr	r3, [r7, #32]
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	4413      	add	r3, r2
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	62bb      	str	r3, [r7, #40]	@ 0x28
            max_index = i;
 8001546:	6a3b      	ldr	r3, [r7, #32]
 8001548:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int i = 2; i < FFT_SIZE / 2; i++) {
 800154a:	6a3b      	ldr	r3, [r7, #32]
 800154c:	3301      	adds	r3, #1
 800154e:	623b      	str	r3, [r7, #32]
 8001550:	6a3b      	ldr	r3, [r7, #32]
 8001552:	2bff      	cmp	r3, #255	@ 0xff
 8001554:	dde4      	ble.n	8001520 <perform_fft+0xc4>
        }
    }

    // Compute the dominant frequency
    float dominant_frequency = (float)max_index * SAMPLE_RATE / FFT_SIZE;
 8001556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001558:	ee07 3a90 	vmov	s15, r3
 800155c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001560:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800158c <perform_fft+0x130>
 8001564:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001568:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8001590 <perform_fft+0x134>
 800156c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001570:	edc7 7a07 	vstr	s15, [r7, #28]

    // Print results
    //printf("Dominant Frequency: %.2f Hz, Amplitude: %.3f\n\r", dominant_frequency, max_amplitude);
}
 8001574:	3730      	adds	r7, #48	@ 0x30
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	0800aa68 	.word	0x0800aa68
 8001580:	20000af8 	.word	0x20000af8
 8001584:	200012f8 	.word	0x200012f8
 8001588:	20001af8 	.word	0x20001af8
 800158c:	47fa0000 	.word	0x47fa0000
 8001590:	44000000 	.word	0x44000000

08001594 <analyze_fft_results>:


void analyze_fft_results(void) {
 8001594:	b590      	push	{r4, r7, lr}
 8001596:	b08b      	sub	sp, #44	@ 0x2c
 8001598:	af00      	add	r7, sp, #0
    int idx_1khz = (1000 * FFT_SIZE) / SAMPLE_RATE;  // Indeks składowej 1 kHz
 800159a:	2304      	movs	r3, #4
 800159c:	60fb      	str	r3, [r7, #12]

    // Oblicz średnią amplitudę składowych
    float mean_amp = 0.0f;
 800159e:	f04f 0300 	mov.w	r3, #0
 80015a2:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int i = 1; i < FFT_SIZE / 2; i++) {  // Pomijamy DC (i=0)
 80015a4:	2301      	movs	r3, #1
 80015a6:	623b      	str	r3, [r7, #32]
 80015a8:	e00e      	b.n	80015c8 <analyze_fft_results+0x34>
        mean_amp += fft_amplitude[i];
 80015aa:	4a92      	ldr	r2, [pc, #584]	@ (80017f4 <analyze_fft_results+0x260>)
 80015ac:	6a3b      	ldr	r3, [r7, #32]
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	edd3 7a00 	vldr	s15, [r3]
 80015b6:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80015ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015be:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    for (int i = 1; i < FFT_SIZE / 2; i++) {  // Pomijamy DC (i=0)
 80015c2:	6a3b      	ldr	r3, [r7, #32]
 80015c4:	3301      	adds	r3, #1
 80015c6:	623b      	str	r3, [r7, #32]
 80015c8:	6a3b      	ldr	r3, [r7, #32]
 80015ca:	2bff      	cmp	r3, #255	@ 0xff
 80015cc:	dded      	ble.n	80015aa <analyze_fft_results+0x16>
    }
    mean_amp /= (FFT_SIZE / 2 - 1);  // Średnia amplitud składowych
 80015ce:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80015d2:	eddf 6a89 	vldr	s13, [pc, #548]	@ 80017f8 <analyze_fft_results+0x264>
 80015d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015da:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    float amp_1khz = fft_amplitude[idx_1khz];  // Pobierz amplitudę 1 kHz
 80015de:	4a85      	ldr	r2, [pc, #532]	@ (80017f4 <analyze_fft_results+0x260>)
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	4413      	add	r3, r2
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	60bb      	str	r3, [r7, #8]
    float ratio = amp_1khz / mean_amp;  // Oblicz stosunek amplitudy 1 kHz do średniej
 80015ea:	edd7 6a02 	vldr	s13, [r7, #8]
 80015ee:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80015f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015f6:	edc7 7a01 	vstr	s15, [r7, #4]

    // Sprawdź, czy mamy mniej niż 10 kandydatów
    if (candidate_count < MAX_CANDIDATES) {
 80015fa:	4b80      	ldr	r3, [pc, #512]	@ (80017fc <analyze_fft_results+0x268>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2b09      	cmp	r3, #9
 8001600:	dc5f      	bgt.n	80016c2 <analyze_fft_results+0x12e>
        // Dodaj nowego kandydata
        candidate_list[candidate_count].freq_est = (float) idx_1khz * SAMPLE_RATE / FFT_SIZE;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	ee07 3a90 	vmov	s15, r3
 8001608:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800160c:	ed9f 7a7c 	vldr	s14, [pc, #496]	@ 8001800 <analyze_fft_results+0x26c>
 8001610:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001614:	4b79      	ldr	r3, [pc, #484]	@ (80017fc <analyze_fft_results+0x268>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 8001804 <analyze_fft_results+0x270>
 800161c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001620:	4979      	ldr	r1, [pc, #484]	@ (8001808 <analyze_fft_results+0x274>)
 8001622:	4613      	mov	r3, r2
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	4413      	add	r3, r2
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	440b      	add	r3, r1
 800162c:	edc3 7a00 	vstr	s15, [r3]
        candidate_list[candidate_count].dac_setting = HAL_DAC_GetValue(&hdac, DAC_CHANNEL_1);
 8001630:	2100      	movs	r1, #0
 8001632:	4876      	ldr	r0, [pc, #472]	@ (800180c <analyze_fft_results+0x278>)
 8001634:	f002 fb1a 	bl	8003c6c <HAL_DAC_GetValue>
 8001638:	4601      	mov	r1, r0
 800163a:	4b70      	ldr	r3, [pc, #448]	@ (80017fc <analyze_fft_results+0x268>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	b288      	uxth	r0, r1
 8001640:	4971      	ldr	r1, [pc, #452]	@ (8001808 <analyze_fft_results+0x274>)
 8001642:	4613      	mov	r3, r2
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	4413      	add	r3, r2
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	440b      	add	r3, r1
 800164c:	3304      	adds	r3, #4
 800164e:	4602      	mov	r2, r0
 8001650:	801a      	strh	r2, [r3, #0]
        candidate_list[candidate_count].vco_temp = read_voltage(&hadc3, ADC_CHANNEL_1);
 8001652:	4b6a      	ldr	r3, [pc, #424]	@ (80017fc <analyze_fft_results+0x268>)
 8001654:	681c      	ldr	r4, [r3, #0]
 8001656:	2101      	movs	r1, #1
 8001658:	486d      	ldr	r0, [pc, #436]	@ (8001810 <analyze_fft_results+0x27c>)
 800165a:	f7ff fea5 	bl	80013a8 <read_voltage>
 800165e:	eef0 7a40 	vmov.f32	s15, s0
 8001662:	4a69      	ldr	r2, [pc, #420]	@ (8001808 <analyze_fft_results+0x274>)
 8001664:	4623      	mov	r3, r4
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	4423      	add	r3, r4
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	4413      	add	r3, r2
 800166e:	3308      	adds	r3, #8
 8001670:	edc3 7a00 	vstr	s15, [r3]
        candidate_list[candidate_count].amp_1khz = amp_1khz;
 8001674:	4b61      	ldr	r3, [pc, #388]	@ (80017fc <analyze_fft_results+0x268>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	4963      	ldr	r1, [pc, #396]	@ (8001808 <analyze_fft_results+0x274>)
 800167a:	4613      	mov	r3, r2
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	4413      	add	r3, r2
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	440b      	add	r3, r1
 8001684:	330c      	adds	r3, #12
 8001686:	68ba      	ldr	r2, [r7, #8]
 8001688:	601a      	str	r2, [r3, #0]
        candidate_list[candidate_count].mean_amp = mean_amp;
 800168a:	4b5c      	ldr	r3, [pc, #368]	@ (80017fc <analyze_fft_results+0x268>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	495e      	ldr	r1, [pc, #376]	@ (8001808 <analyze_fft_results+0x274>)
 8001690:	4613      	mov	r3, r2
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	4413      	add	r3, r2
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	440b      	add	r3, r1
 800169a:	3310      	adds	r3, #16
 800169c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800169e:	601a      	str	r2, [r3, #0]
        candidate_list[candidate_count].ratio = ratio;
 80016a0:	4b56      	ldr	r3, [pc, #344]	@ (80017fc <analyze_fft_results+0x268>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4958      	ldr	r1, [pc, #352]	@ (8001808 <analyze_fft_results+0x274>)
 80016a6:	4613      	mov	r3, r2
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	4413      	add	r3, r2
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	440b      	add	r3, r1
 80016b0:	3314      	adds	r3, #20
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	601a      	str	r2, [r3, #0]
        candidate_count++;
 80016b6:	4b51      	ldr	r3, [pc, #324]	@ (80017fc <analyze_fft_results+0x268>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	3301      	adds	r3, #1
 80016bc:	4a4f      	ldr	r2, [pc, #316]	@ (80017fc <analyze_fft_results+0x268>)
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	e087      	b.n	80017d2 <analyze_fft_results+0x23e>
    } else {
        // Szukamy najsłabszego kandydata (najmniejszy stosunek R)
        int worst_index = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61fb      	str	r3, [r7, #28]
        float min_ratio = candidate_list[0].ratio;
 80016c6:	4b50      	ldr	r3, [pc, #320]	@ (8001808 <analyze_fft_results+0x274>)
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	61bb      	str	r3, [r7, #24]
        for (int i = 1; i < MAX_CANDIDATES; i++) {
 80016cc:	2301      	movs	r3, #1
 80016ce:	617b      	str	r3, [r7, #20]
 80016d0:	e01f      	b.n	8001712 <analyze_fft_results+0x17e>
            if (candidate_list[i].ratio < min_ratio) {
 80016d2:	494d      	ldr	r1, [pc, #308]	@ (8001808 <analyze_fft_results+0x274>)
 80016d4:	697a      	ldr	r2, [r7, #20]
 80016d6:	4613      	mov	r3, r2
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	4413      	add	r3, r2
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	440b      	add	r3, r1
 80016e0:	3314      	adds	r3, #20
 80016e2:	edd3 7a00 	vldr	s15, [r3]
 80016e6:	ed97 7a06 	vldr	s14, [r7, #24]
 80016ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f2:	dd0b      	ble.n	800170c <analyze_fft_results+0x178>
                min_ratio = candidate_list[i].ratio;
 80016f4:	4944      	ldr	r1, [pc, #272]	@ (8001808 <analyze_fft_results+0x274>)
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	4613      	mov	r3, r2
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	4413      	add	r3, r2
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	440b      	add	r3, r1
 8001702:	3314      	adds	r3, #20
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	61bb      	str	r3, [r7, #24]
                worst_index = i;
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	61fb      	str	r3, [r7, #28]
        for (int i = 1; i < MAX_CANDIDATES; i++) {
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	3301      	adds	r3, #1
 8001710:	617b      	str	r3, [r7, #20]
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	2b09      	cmp	r3, #9
 8001716:	dddc      	ble.n	80016d2 <analyze_fft_results+0x13e>
            }
        }

        // Jeśli nowy kandydat ma lepszy stosunek R, zastępujemy najgorszy
        if (ratio > min_ratio) {
 8001718:	ed97 7a01 	vldr	s14, [r7, #4]
 800171c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001720:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001728:	dd53      	ble.n	80017d2 <analyze_fft_results+0x23e>
            candidate_list[worst_index].freq_est = (float) idx_1khz * SAMPLE_RATE / FFT_SIZE;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	ee07 3a90 	vmov	s15, r3
 8001730:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001734:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8001800 <analyze_fft_results+0x26c>
 8001738:	ee27 7a87 	vmul.f32	s14, s15, s14
 800173c:	eddf 6a31 	vldr	s13, [pc, #196]	@ 8001804 <analyze_fft_results+0x270>
 8001740:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001744:	4930      	ldr	r1, [pc, #192]	@ (8001808 <analyze_fft_results+0x274>)
 8001746:	69fa      	ldr	r2, [r7, #28]
 8001748:	4613      	mov	r3, r2
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	4413      	add	r3, r2
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	440b      	add	r3, r1
 8001752:	edc3 7a00 	vstr	s15, [r3]
            candidate_list[worst_index].dac_setting = HAL_DAC_GetValue(&hdac, DAC_CHANNEL_1);
 8001756:	2100      	movs	r1, #0
 8001758:	482c      	ldr	r0, [pc, #176]	@ (800180c <analyze_fft_results+0x278>)
 800175a:	f002 fa87 	bl	8003c6c <HAL_DAC_GetValue>
 800175e:	4603      	mov	r3, r0
 8001760:	b298      	uxth	r0, r3
 8001762:	4929      	ldr	r1, [pc, #164]	@ (8001808 <analyze_fft_results+0x274>)
 8001764:	69fa      	ldr	r2, [r7, #28]
 8001766:	4613      	mov	r3, r2
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	4413      	add	r3, r2
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	440b      	add	r3, r1
 8001770:	3304      	adds	r3, #4
 8001772:	4602      	mov	r2, r0
 8001774:	801a      	strh	r2, [r3, #0]
            candidate_list[worst_index].vco_temp = read_voltage(&hadc3, ADC_CHANNEL_1);
 8001776:	2101      	movs	r1, #1
 8001778:	4825      	ldr	r0, [pc, #148]	@ (8001810 <analyze_fft_results+0x27c>)
 800177a:	f7ff fe15 	bl	80013a8 <read_voltage>
 800177e:	eef0 7a40 	vmov.f32	s15, s0
 8001782:	4921      	ldr	r1, [pc, #132]	@ (8001808 <analyze_fft_results+0x274>)
 8001784:	69fa      	ldr	r2, [r7, #28]
 8001786:	4613      	mov	r3, r2
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	4413      	add	r3, r2
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	440b      	add	r3, r1
 8001790:	3308      	adds	r3, #8
 8001792:	edc3 7a00 	vstr	s15, [r3]
            candidate_list[worst_index].amp_1khz = amp_1khz;
 8001796:	491c      	ldr	r1, [pc, #112]	@ (8001808 <analyze_fft_results+0x274>)
 8001798:	69fa      	ldr	r2, [r7, #28]
 800179a:	4613      	mov	r3, r2
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	4413      	add	r3, r2
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	440b      	add	r3, r1
 80017a4:	330c      	adds	r3, #12
 80017a6:	68ba      	ldr	r2, [r7, #8]
 80017a8:	601a      	str	r2, [r3, #0]
            candidate_list[worst_index].mean_amp = mean_amp;
 80017aa:	4917      	ldr	r1, [pc, #92]	@ (8001808 <analyze_fft_results+0x274>)
 80017ac:	69fa      	ldr	r2, [r7, #28]
 80017ae:	4613      	mov	r3, r2
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	4413      	add	r3, r2
 80017b4:	00db      	lsls	r3, r3, #3
 80017b6:	440b      	add	r3, r1
 80017b8:	3310      	adds	r3, #16
 80017ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017bc:	601a      	str	r2, [r3, #0]
            candidate_list[worst_index].ratio = ratio;
 80017be:	4912      	ldr	r1, [pc, #72]	@ (8001808 <analyze_fft_results+0x274>)
 80017c0:	69fa      	ldr	r2, [r7, #28]
 80017c2:	4613      	mov	r3, r2
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	4413      	add	r3, r2
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	440b      	add	r3, r1
 80017cc:	3314      	adds	r3, #20
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	601a      	str	r2, [r3, #0]
        }
    }

    // Debug: wypisz listę kandydatów
    //printf("Lista najlepszych kandydatów:\n\r");
    for (int i = 0; i < candidate_count; i++) {
 80017d2:	2300      	movs	r3, #0
 80017d4:	613b      	str	r3, [r7, #16]
 80017d6:	e002      	b.n	80017de <analyze_fft_results+0x24a>
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	3301      	adds	r3, #1
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	4b07      	ldr	r3, [pc, #28]	@ (80017fc <analyze_fft_results+0x268>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	dbf7      	blt.n	80017d8 <analyze_fft_results+0x244>
               candidate_list[i].vco_temp,
               candidate_list[i].amp_1khz,
               candidate_list[i].mean_amp,
               candidate_list[i].ratio);*/
    }
}
 80017e8:	bf00      	nop
 80017ea:	bf00      	nop
 80017ec:	372c      	adds	r7, #44	@ 0x2c
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd90      	pop	{r4, r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20001af8 	.word	0x20001af8
 80017f8:	437f0000 	.word	0x437f0000
 80017fc:	200002e0 	.word	0x200002e0
 8001800:	47fa0000 	.word	0x47fa0000
 8001804:	44000000 	.word	0x44000000
 8001808:	200001f0 	.word	0x200001f0
 800180c:	20002098 	.word	0x20002098
 8001810:	20001f90 	.word	0x20001f90

08001814 <Read_CPU_Temperature_DMA>:
void Read_CPU_Temperature_DMA(void) {
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
    uint32_t rawValue = AD_RES_BUFFER[3];
 800181a:	4b1f      	ldr	r3, [pc, #124]	@ (8001898 <Read_CPU_Temperature_DMA+0x84>)
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	60fb      	str	r3, [r7, #12]
    printf("%lu\n\r",AD_RES_BUFFER[3]);
 8001820:	4b1d      	ldr	r3, [pc, #116]	@ (8001898 <Read_CPU_Temperature_DMA+0x84>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	4619      	mov	r1, r3
 8001826:	481d      	ldr	r0, [pc, #116]	@ (800189c <Read_CPU_Temperature_DMA+0x88>)
 8001828:	f006 fce0 	bl	80081ec <iprintf>
    float v_sense = ((float)rawValue * 3.3f) / 4095.0f;  // Przeliczenie ADC na napięcie
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	ee07 3a90 	vmov	s15, r3
 8001832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001836:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80018a0 <Read_CPU_Temperature_DMA+0x8c>
 800183a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800183e:	eddf 6a19 	vldr	s13, [pc, #100]	@ 80018a4 <Read_CPU_Temperature_DMA+0x90>
 8001842:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001846:	edc7 7a02 	vstr	s15, [r7, #8]
    printf("v_sense %f.......",v_sense);
 800184a:	68b8      	ldr	r0, [r7, #8]
 800184c:	f7fe fefc 	bl	8000648 <__aeabi_f2d>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	4814      	ldr	r0, [pc, #80]	@ (80018a8 <Read_CPU_Temperature_DMA+0x94>)
 8001856:	f006 fcc9 	bl	80081ec <iprintf>
    float temperature = ((v_sense - V25) / AVG_SLOPE) + 25.0f;
 800185a:	edd7 7a02 	vldr	s15, [r7, #8]
 800185e:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80018ac <Read_CPU_Temperature_DMA+0x98>
 8001862:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001866:	eddf 6a12 	vldr	s13, [pc, #72]	@ 80018b0 <Read_CPU_Temperature_DMA+0x9c>
 800186a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800186e:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001872:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001876:	edc7 7a01 	vstr	s15, [r7, #4]

    printf("CPU Temp: %.2f°C\n\r", temperature);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7fe fee4 	bl	8000648 <__aeabi_f2d>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	480b      	ldr	r0, [pc, #44]	@ (80018b4 <Read_CPU_Temperature_DMA+0xa0>)
 8001886:	f006 fcb1 	bl	80081ec <iprintf>
    temper=temperature;
 800188a:	4a0b      	ldr	r2, [pc, #44]	@ (80018b8 <Read_CPU_Temperature_DMA+0xa4>)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6013      	str	r3, [r2, #0]
}
 8001890:	bf00      	nop
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	200002e4 	.word	0x200002e4
 800189c:	0800aa84 	.word	0x0800aa84
 80018a0:	40533333 	.word	0x40533333
 80018a4:	457ff000 	.word	0x457ff000
 80018a8:	0800aa8c 	.word	0x0800aa8c
 80018ac:	3f428f5c 	.word	0x3f428f5c
 80018b0:	3b23d70a 	.word	0x3b23d70a
 80018b4:	0800aaa0 	.word	0x0800aaa0
 80018b8:	20001ef8 	.word	0x20001ef8

080018bc <Get_Thermistor_Resistance>:
void Heater_Off(void) {
    printf("Grzałka OFF\n\r");
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);  // Wyłącz grzałkę
}

float Get_Thermistor_Resistance(float v_out) {
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	ed87 0a01 	vstr	s0, [r7, #4]
    return R_FIXED * (v_out / (VCC - v_out));
 80018c6:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80018f0 <Get_Thermistor_Resistance+0x34>
 80018ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80018ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018d2:	edd7 6a01 	vldr	s13, [r7, #4]
 80018d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018da:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80018f4 <Get_Thermistor_Resistance+0x38>
 80018de:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80018e2:	eeb0 0a67 	vmov.f32	s0, s15
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	40533333 	.word	0x40533333
 80018f4:	461c4000 	.word	0x461c4000

080018f8 <Convert_Resistance_To_Temperature>:

float Convert_Resistance_To_Temperature(float r_therm) {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	ed87 0a01 	vstr	s0, [r7, #4]
    float temperature_kelvin = B_COEFFICIENT /
        (log(r_therm / R25) + (B_COEFFICIENT / T25));
 8001902:	edd7 7a01 	vldr	s15, [r7, #4]
 8001906:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001978 <Convert_Resistance_To_Temperature+0x80>
 800190a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800190e:	ee16 0a90 	vmov	r0, s13
 8001912:	f7fe fe99 	bl	8000648 <__aeabi_f2d>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	ec43 2b10 	vmov	d0, r2, r3
 800191e:	f008 fbdf 	bl	800a0e0 <log>
 8001922:	ec51 0b10 	vmov	r0, r1, d0
 8001926:	a310      	add	r3, pc, #64	@ (adr r3, 8001968 <Convert_Resistance_To_Temperature+0x70>)
 8001928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192c:	f7fe fd2e 	bl	800038c <__adddf3>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
    float temperature_kelvin = B_COEFFICIENT /
 8001934:	a10e      	add	r1, pc, #56	@ (adr r1, 8001970 <Convert_Resistance_To_Temperature+0x78>)
 8001936:	e9d1 0100 	ldrd	r0, r1, [r1]
 800193a:	f7ff f807 	bl	800094c <__aeabi_ddiv>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	4610      	mov	r0, r2
 8001944:	4619      	mov	r1, r3
 8001946:	f7ff f9af 	bl	8000ca8 <__aeabi_d2f>
 800194a:	4603      	mov	r3, r0
 800194c:	60fb      	str	r3, [r7, #12]
    return temperature_kelvin - 273.15f;  // Konwersja do °C
 800194e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001952:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800197c <Convert_Resistance_To_Temperature+0x84>
 8001956:	ee77 7ac7 	vsub.f32	s15, s15, s14
}
 800195a:	eeb0 0a67 	vmov.f32	s0, s15
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	f3af 8000 	nop.w
 8001968:	c0000000 	.word	0xc0000000
 800196c:	402aa339 	.word	0x402aa339
 8001970:	00000000 	.word	0x00000000
 8001974:	40af0600 	.word	0x40af0600
 8001978:	461c4000 	.word	0x461c4000
 800197c:	43889333 	.word	0x43889333

08001980 <Read_Thermistor_Temperature>:

float Read_Thermistor_Temperature(void) {
 8001980:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001984:	b088      	sub	sp, #32
 8001986:	af04      	add	r7, sp, #16
    float v_out = AD_RES_BUFFER[1] ;
 8001988:	4b24      	ldr	r3, [pc, #144]	@ (8001a1c <Read_Thermistor_Temperature+0x9c>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	ee07 3a90 	vmov	s15, r3
 8001990:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001994:	edc7 7a03 	vstr	s15, [r7, #12]
    float v_out1 = 0.9416f*((AD_RES_BUFFER[1] * 3.3f) / 4095.0f);
 8001998:	4b20      	ldr	r3, [pc, #128]	@ (8001a1c <Read_Thermistor_Temperature+0x9c>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	ee07 3a90 	vmov	s15, r3
 80019a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019a4:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001a20 <Read_Thermistor_Temperature+0xa0>
 80019a8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019ac:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8001a24 <Read_Thermistor_Temperature+0xa4>
 80019b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019b4:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001a28 <Read_Thermistor_Temperature+0xa8>
 80019b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019bc:	edc7 7a02 	vstr	s15, [r7, #8]
    float r_therm = Get_Thermistor_Resistance(v_out1);
 80019c0:	ed97 0a02 	vldr	s0, [r7, #8]
 80019c4:	f7ff ff7a 	bl	80018bc <Get_Thermistor_Resistance>
 80019c8:	ed87 0a01 	vstr	s0, [r7, #4]
    float temp_celsius = Convert_Resistance_To_Temperature(r_therm);  // Oblicz temperaturę
 80019cc:	ed97 0a01 	vldr	s0, [r7, #4]
 80019d0:	f7ff ff92 	bl	80018f8 <Convert_Resistance_To_Temperature>
 80019d4:	ed87 0a00 	vstr	s0, [r7]

    printf("Vout: %.3fV, Rtherm: %.1fΩ, Temp: %.2f°C\n\r", v_out, r_therm, temp_celsius);
 80019d8:	68f8      	ldr	r0, [r7, #12]
 80019da:	f7fe fe35 	bl	8000648 <__aeabi_f2d>
 80019de:	4680      	mov	r8, r0
 80019e0:	4689      	mov	r9, r1
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f7fe fe30 	bl	8000648 <__aeabi_f2d>
 80019e8:	4604      	mov	r4, r0
 80019ea:	460d      	mov	r5, r1
 80019ec:	6838      	ldr	r0, [r7, #0]
 80019ee:	f7fe fe2b 	bl	8000648 <__aeabi_f2d>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80019fa:	e9cd 4500 	strd	r4, r5, [sp]
 80019fe:	4642      	mov	r2, r8
 8001a00:	464b      	mov	r3, r9
 8001a02:	480a      	ldr	r0, [pc, #40]	@ (8001a2c <Read_Thermistor_Temperature+0xac>)
 8001a04:	f006 fbf2 	bl	80081ec <iprintf>

    return temp_celsius;
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	ee07 3a90 	vmov	s15, r3
}
 8001a0e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a12:	3710      	adds	r7, #16
 8001a14:	46bd      	mov	sp, r7
 8001a16:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a1a:	bf00      	nop
 8001a1c:	200002e4 	.word	0x200002e4
 8001a20:	40533333 	.word	0x40533333
 8001a24:	457ff000 	.word	0x457ff000
 8001a28:	3f710cb3 	.word	0x3f710cb3
 8001a2c:	0800aad4 	.word	0x0800aad4

08001a30 <Control_Heater>:



void Control_Heater(void) {
 8001a30:	b5b0      	push	{r4, r5, r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af02      	add	r7, sp, #8
    float current_temp = Read_Thermistor_Temperature();
 8001a36:	f7ff ffa3 	bl	8001980 <Read_Thermistor_Temperature>
 8001a3a:	ed87 0a01 	vstr	s0, [r7, #4]
    float target_temp = temper+2.0f;
 8001a3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a7c <Control_Heater+0x4c>)
 8001a40:	edd3 7a00 	vldr	s15, [r3]
 8001a44:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001a48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a4c:	edc7 7a00 	vstr	s15, [r7]
    printf("Current temp: %.2f°C, Target: %.2f°C\n\r", current_temp, target_temp);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7fe fdf9 	bl	8000648 <__aeabi_f2d>
 8001a56:	4604      	mov	r4, r0
 8001a58:	460d      	mov	r5, r1
 8001a5a:	6838      	ldr	r0, [r7, #0]
 8001a5c:	f7fe fdf4 	bl	8000648 <__aeabi_f2d>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	e9cd 2300 	strd	r2, r3, [sp]
 8001a68:	4622      	mov	r2, r4
 8001a6a:	462b      	mov	r3, r5
 8001a6c:	4804      	ldr	r0, [pc, #16]	@ (8001a80 <Control_Heater+0x50>)
 8001a6e:	f006 fbbd 	bl	80081ec <iprintf>
    } else {
        //Heater_Off();
    }
    //dac_value++;
    //HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bdb0      	pop	{r4, r5, r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20001ef8 	.word	0x20001ef8
 8001a80:	0800ab04 	.word	0x0800ab04

08001a84 <Servo_SetAngle>:



void Servo_SetAngle(int8_t angle) {
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	71fb      	strb	r3, [r7, #7]
    if (angle < -90) angle = -90;  // Ograniczenie zakresu
 8001a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a92:	f113 0f5a 	cmn.w	r3, #90	@ 0x5a
 8001a96:	da01      	bge.n	8001a9c <Servo_SetAngle+0x18>
 8001a98:	23a6      	movs	r3, #166	@ 0xa6
 8001a9a:	71fb      	strb	r3, [r7, #7]
    if (angle > 90) angle = 90;
 8001a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa0:	2b5a      	cmp	r3, #90	@ 0x5a
 8001aa2:	dd01      	ble.n	8001aa8 <Servo_SetAngle+0x24>
 8001aa4:	235a      	movs	r3, #90	@ 0x5a
 8001aa6:	71fb      	strb	r3, [r7, #7]

    // Przeliczenie kąta na szerokość impulsu (1000 µs do 2000 µs)
    uint16_t pulse = 500 + ((angle * 500) / 90);  // 1.5 ms ± 0.5 ms
 8001aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aac:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001ab0:	fb02 f303 	mul.w	r3, r2, r3
 8001ab4:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae0 <Servo_SetAngle+0x5c>)
 8001ab6:	fb82 1203 	smull	r1, r2, r2, r3
 8001aba:	441a      	add	r2, r3
 8001abc:	1192      	asrs	r2, r2, #6
 8001abe:	17db      	asrs	r3, r3, #31
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001ac8:	81fb      	strh	r3, [r7, #14]

    // Ustawienie wartości PWM
    __HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, pulse);
 8001aca:	4b06      	ldr	r3, [pc, #24]	@ (8001ae4 <Servo_SetAngle+0x60>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	89fa      	ldrh	r2, [r7, #14]
 8001ad0:	635a      	str	r2, [r3, #52]	@ 0x34
	  //HAL_Delay(10000);

}
 8001ad2:	bf00      	nop
 8001ad4:	3714      	adds	r7, #20
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	b60b60b7 	.word	0xb60b60b7
 8001ae4:	200020f4 	.word	0x200020f4

08001ae8 <Servo_Init>:


void Servo_Init() {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);  // Uruchomienie PWM na TIM11_CH1
 8001aec:	2100      	movs	r1, #0
 8001aee:	4804      	ldr	r0, [pc, #16]	@ (8001b00 <Servo_Init+0x18>)
 8001af0:	f003 fcd4 	bl	800549c <HAL_TIM_PWM_Start>
    Servo_SetAngle(0);  // Start w pozycji neutralnej (0°)
 8001af4:	2000      	movs	r0, #0
 8001af6:	f7ff ffc5 	bl	8001a84 <Servo_SetAngle>
}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	200020f4 	.word	0x200020f4

08001b04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b08:	b09e      	sub	sp, #120	@ 0x78
 8001b0a:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b0c:	f001 f8a4 	bl	8002c58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b10:	f000 f98c 	bl	8001e2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b14:	f000 fc66 	bl	80023e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b18:	f000 fc3c 	bl	8002394 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001b1c:	f000 fc10 	bl	8002340 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001b20:	f000 f9f2 	bl	8001f08 <MX_ADC1_Init>
  MX_DAC_Init();
 8001b24:	f000 fb26 	bl	8002174 <MX_DAC_Init>
  MX_TIM2_Init();
 8001b28:	f000 fb4e 	bl	80021c8 <MX_TIM2_Init>
  MX_ADC2_Init();
 8001b2c:	f000 fa7e 	bl	800202c <MX_ADC2_Init>
  MX_ADC3_Init();
 8001b30:	f000 face 	bl	80020d0 <MX_ADC3_Init>
  MX_TIM11_Init();
 8001b34:	f000 fbb6 	bl	80022a4 <MX_TIM11_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int32_t test_array[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
 8001b38:	4baa      	ldr	r3, [pc, #680]	@ (8001de4 <main+0x2e0>)
 8001b3a:	f107 0420 	add.w	r4, r7, #32
 8001b3e:	461d      	mov	r5, r3
 8001b40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b48:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b4c:	e884 0003 	stmia.w	r4, {r0, r1}
  int32_t result = 0.0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	61fb      	str	r3, [r7, #28]
  arm_mean_q31(test_array, 10, &result);
 8001b54:	f107 021c 	add.w	r2, r7, #28
 8001b58:	f107 0320 	add.w	r3, r7, #32
 8001b5c:	210a      	movs	r1, #10
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f004 fd30 	bl	80065c4 <arm_mean_q31>


  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001b64:	2201      	movs	r2, #1
 8001b66:	2180      	movs	r1, #128	@ 0x80
 8001b68:	489f      	ldr	r0, [pc, #636]	@ (8001de8 <main+0x2e4>)
 8001b6a:	f002 fdf7 	bl	800475c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b74:	489c      	ldr	r0, [pc, #624]	@ (8001de8 <main+0x2e4>)
 8001b76:	f002 fdf1 	bl	800475c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b80:	4899      	ldr	r0, [pc, #612]	@ (8001de8 <main+0x2e4>)
 8001b82:	f002 fdeb 	bl	800475c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001b86:	2201      	movs	r2, #1
 8001b88:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b8c:	4897      	ldr	r0, [pc, #604]	@ (8001dec <main+0x2e8>)
 8001b8e:	f002 fde5 	bl	800475c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001b92:	2201      	movs	r2, #1
 8001b94:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b98:	4894      	ldr	r0, [pc, #592]	@ (8001dec <main+0x2e8>)
 8001b9a:	f002 fddf 	bl	800475c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001ba4:	4891      	ldr	r0, [pc, #580]	@ (8001dec <main+0x2e8>)
 8001ba6:	f002 fdd9 	bl	800475c <HAL_GPIO_WritePin>

  HAL_TIM_PWM_Start(&htim11,TIM_CHANNEL_1);
 8001baa:	2100      	movs	r1, #0
 8001bac:	4890      	ldr	r0, [pc, #576]	@ (8001df0 <main+0x2ec>)
 8001bae:	f003 fc75 	bl	800549c <HAL_TIM_PWM_Start>

  dac_value = 1;
 8001bb2:	4b90      	ldr	r3, [pc, #576]	@ (8001df4 <main+0x2f0>)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	601a      	str	r2, [r3, #0]

  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);  // Włączenie DAC
 8001bb8:	2100      	movs	r1, #0
 8001bba:	488f      	ldr	r0, [pc, #572]	@ (8001df8 <main+0x2f4>)
 8001bbc:	f001 ffd5 	bl	8003b6a <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 1241);  // Ustawienie 1V
 8001bc0:	f240 43d9 	movw	r3, #1241	@ 0x4d9
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	488b      	ldr	r0, [pc, #556]	@ (8001df8 <main+0x2f4>)
 8001bca:	f002 f825 	bl	8003c18 <HAL_DAC_SetValue>
  HAL_ADC_Start(&hadc1);
 8001bce:	488b      	ldr	r0, [pc, #556]	@ (8001dfc <main+0x2f8>)
 8001bd0:	f001 f91c 	bl	8002e0c <HAL_ADC_Start>
  HAL_ADC_Start_DMA(&hadc2, tab, 512);
 8001bd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bd8:	4989      	ldr	r1, [pc, #548]	@ (8001e00 <main+0x2fc>)
 8001bda:	488a      	ldr	r0, [pc, #552]	@ (8001e04 <main+0x300>)
 8001bdc:	f001 faa6 	bl	800312c <HAL_ADC_Start_DMA>
  if (HAL_ADC_Start_DMA(&hadc1, AD_RES_BUFFER, 5) != HAL_OK) {
 8001be0:	2205      	movs	r2, #5
 8001be2:	4989      	ldr	r1, [pc, #548]	@ (8001e08 <main+0x304>)
 8001be4:	4885      	ldr	r0, [pc, #532]	@ (8001dfc <main+0x2f8>)
 8001be6:	f001 faa1 	bl	800312c <HAL_ADC_Start_DMA>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d002      	beq.n	8001bf6 <main+0xf2>
      printf("Błąd startu ADC z DMA!\n\r");
 8001bf0:	4886      	ldr	r0, [pc, #536]	@ (8001e0c <main+0x308>)
 8001bf2:	f006 fafb 	bl	80081ec <iprintf>
  }
  HAL_ADC_Start_DMA(&hadc1, AD_RES_BUFFER, 5);
 8001bf6:	2205      	movs	r2, #5
 8001bf8:	4983      	ldr	r1, [pc, #524]	@ (8001e08 <main+0x304>)
 8001bfa:	4880      	ldr	r0, [pc, #512]	@ (8001dfc <main+0x2f8>)
 8001bfc:	f001 fa96 	bl	800312c <HAL_ADC_Start_DMA>
  Read_CPU_Temperature_DMA();
 8001c00:	f7ff fe08 	bl	8001814 <Read_CPU_Temperature_DMA>

  Servo_Init();
 8001c04:	f7ff ff70 	bl	8001ae8 <Servo_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  float cos_alpha[4];

	  for (int i =1;i<4;i++){
 8001c08:	2301      	movs	r3, #1
 8001c0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001c0c:	e0bd      	b.n	8001d8a <main+0x286>
		  toggle_pins();
 8001c0e:	f7ff fa63 	bl	80010d8 <toggle_pins>
		  HAL_ADC_Start_DMA(&hadc1, AD_RES_BUFFER, 5);
 8001c12:	2205      	movs	r2, #5
 8001c14:	497c      	ldr	r1, [pc, #496]	@ (8001e08 <main+0x304>)
 8001c16:	4879      	ldr	r0, [pc, #484]	@ (8001dfc <main+0x2f8>)
 8001c18:	f001 fa88 	bl	800312c <HAL_ADC_Start_DMA>
		  Read_CPU_Temperature_DMA();
 8001c1c:	f7ff fdfa 	bl	8001814 <Read_CPU_Temperature_DMA>
		  printf("ADC CH10: %.2fV, CH11: %.2fV, CH12: %.2fV, CH13: %fV\n\r",
		  	  	  	                           (AD_RES_BUFFER[0] * 3.3f) / 4095.0f,
 8001c20:	4b79      	ldr	r3, [pc, #484]	@ (8001e08 <main+0x304>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	ee07 3a90 	vmov	s15, r3
 8001c28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c2c:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8001e10 <main+0x30c>
 8001c30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c34:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 8001e14 <main+0x310>
 8001c38:	eec7 6a87 	vdiv.f32	s13, s15, s14
		  printf("ADC CH10: %.2fV, CH11: %.2fV, CH12: %.2fV, CH13: %fV\n\r",
 8001c3c:	ee16 0a90 	vmov	r0, s13
 8001c40:	f7fe fd02 	bl	8000648 <__aeabi_f2d>
 8001c44:	4682      	mov	sl, r0
 8001c46:	468b      	mov	fp, r1
		  	  	  	                           0.9416f*((AD_RES_BUFFER[1] * 3.3f) / 4095.0f),
 8001c48:	4b6f      	ldr	r3, [pc, #444]	@ (8001e08 <main+0x304>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	ee07 3a90 	vmov	s15, r3
 8001c50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c54:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 8001e10 <main+0x30c>
 8001c58:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c5c:	eddf 6a6d 	vldr	s13, [pc, #436]	@ 8001e14 <main+0x310>
 8001c60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c64:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8001e18 <main+0x314>
 8001c68:	ee67 7a87 	vmul.f32	s15, s15, s14
		  printf("ADC CH10: %.2fV, CH11: %.2fV, CH12: %.2fV, CH13: %fV\n\r",
 8001c6c:	ee17 0a90 	vmov	r0, s15
 8001c70:	f7fe fcea 	bl	8000648 <__aeabi_f2d>
 8001c74:	4604      	mov	r4, r0
 8001c76:	460d      	mov	r5, r1
		  	  	  	                           (AD_RES_BUFFER[2] * 3.3f) / 4095.0f,
 8001c78:	4b63      	ldr	r3, [pc, #396]	@ (8001e08 <main+0x304>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	ee07 3a90 	vmov	s15, r3
 8001c80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c84:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 8001e10 <main+0x30c>
 8001c88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c8c:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 8001e14 <main+0x310>
 8001c90:	eec7 6a87 	vdiv.f32	s13, s15, s14
		  printf("ADC CH10: %.2fV, CH11: %.2fV, CH12: %.2fV, CH13: %fV\n\r",
 8001c94:	ee16 0a90 	vmov	r0, s13
 8001c98:	f7fe fcd6 	bl	8000648 <__aeabi_f2d>
 8001c9c:	4680      	mov	r8, r0
 8001c9e:	4689      	mov	r9, r1
		  	  	  	                           (AD_RES_BUFFER[4] * 3.3f) / 4095.0f);
 8001ca0:	4b59      	ldr	r3, [pc, #356]	@ (8001e08 <main+0x304>)
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	ee07 3a90 	vmov	s15, r3
 8001ca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cac:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8001e10 <main+0x30c>
 8001cb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cb4:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8001e14 <main+0x310>
 8001cb8:	eec7 6a87 	vdiv.f32	s13, s15, s14
		  printf("ADC CH10: %.2fV, CH11: %.2fV, CH12: %.2fV, CH13: %fV\n\r",
 8001cbc:	ee16 0a90 	vmov	r0, s13
 8001cc0:	f7fe fcc2 	bl	8000648 <__aeabi_f2d>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001ccc:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001cd0:	e9cd 4500 	strd	r4, r5, [sp]
 8001cd4:	4652      	mov	r2, sl
 8001cd6:	465b      	mov	r3, fp
 8001cd8:	4850      	ldr	r0, [pc, #320]	@ (8001e1c <main+0x318>)
 8001cda:	f006 fa87 	bl	80081ec <iprintf>

		  float detector_out = (AD_RES_BUFFER[2] * 3.3f) / 4095.0f;
 8001cde:	4b4a      	ldr	r3, [pc, #296]	@ (8001e08 <main+0x304>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	ee07 3a90 	vmov	s15, r3
 8001ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cea:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8001e10 <main+0x30c>
 8001cee:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001cf2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8001e14 <main+0x310>
 8001cf6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cfa:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
		  float input = 2.0f * (1.0f - (detector_out / Uoh)) + delta_err;
 8001cfe:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001d02:	eddf 6a47 	vldr	s13, [pc, #284]	@ 8001e20 <main+0x31c>
 8001d06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001d0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d12:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001d16:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8001e24 <main+0x320>
 8001d1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d1e:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
		  float value = asinf(input);
 8001d22:	ed97 0a13 	vldr	s0, [r7, #76]	@ 0x4c
 8001d26:	f008 fa19 	bl	800a15c <asinf>
 8001d2a:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
		  cos_alpha[i]= value;
 8001d2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	3360      	adds	r3, #96	@ 0x60
 8001d34:	443b      	add	r3, r7
 8001d36:	3b54      	subs	r3, #84	@ 0x54
 8001d38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001d3a:	601a      	str	r2, [r3, #0]



		  for (int i = 0;i<512;i++){
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001d40:	e018      	b.n	8001d74 <main+0x270>
		  	  		tab_ADC[i]=((tab[i] * 3.3f) / 4095.0f);
 8001d42:	4a2f      	ldr	r2, [pc, #188]	@ (8001e00 <main+0x2fc>)
 8001d44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d4a:	ee07 3a90 	vmov	s15, r3
 8001d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d52:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001e10 <main+0x30c>
 8001d56:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d5a:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 8001e14 <main+0x310>
 8001d5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d62:	4a31      	ldr	r2, [pc, #196]	@ (8001e28 <main+0x324>)
 8001d64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4413      	add	r3, r2
 8001d6a:	edc3 7a00 	vstr	s15, [r3]
		  for (int i = 0;i<512;i++){
 8001d6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d70:	3301      	adds	r3, #1
 8001d72:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001d74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d7a:	dbe2      	blt.n	8001d42 <main+0x23e>
		  	  		//printf("%.2f  %.2f\n\r",tab_ADC[i], (tab[1] * 3.3f) / 4095.0f);
		  	  	}

		  perform_fft();
 8001d7c:	f7ff fb6e 	bl	800145c <perform_fft>
		  analyze_fft_results();
 8001d80:	f7ff fc08 	bl	8001594 <analyze_fft_results>
	  for (int i =1;i<4;i++){
 8001d84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d86:	3301      	adds	r3, #1
 8001d88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001d8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d8c:	2b03      	cmp	r3, #3
 8001d8e:	f77f af3e 	ble.w	8001c0e <main+0x10a>

	  }
	  AngleResults angle = calculate_angles(cos_alpha);
 8001d92:	f107 030c 	add.w	r3, r7, #12
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff fa22 	bl	80011e0 <calculate_angles>
 8001d9c:	eeb0 7a40 	vmov.f32	s14, s0
 8001da0:	eef0 7a60 	vmov.f32	s15, s1
 8001da4:	ed87 7a01 	vstr	s14, [r7, #4]
 8001da8:	edc7 7a02 	vstr	s15, [r7, #8]
	  Servo_SetAngle(30);
 8001dac:	201e      	movs	r0, #30
 8001dae:	f7ff fe69 	bl	8001a84 <Servo_SetAngle>
	  HAL_Delay(1000);
 8001db2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001db6:	f000 ffc1 	bl	8002d3c <HAL_Delay>
	  Servo_SetAngle(-30);
 8001dba:	f06f 001d 	mvn.w	r0, #29
 8001dbe:	f7ff fe61 	bl	8001a84 <Servo_SetAngle>
	  	for (int i = 0;i<512	;i++){
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	657b      	str	r3, [r7, #84]	@ 0x54
 8001dc6:	e002      	b.n	8001dce <main+0x2ca>
 8001dc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dca:	3301      	adds	r3, #1
 8001dcc:	657b      	str	r3, [r7, #84]	@ 0x54
 8001dce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001dd4:	dbf8      	blt.n	8001dc8 <main+0x2c4>
	  		//tab_ADC[i]=((tab[1] * 3.3f) / 4095.0f);
	  		//printf("%.2f  \n\r",tab_ADC[i]);
	  	}


	  	Control_Heater();
 8001dd6:	f7ff fe2b 	bl	8001a30 <Control_Heater>
	  	HAL_Delay(1000);
 8001dda:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001dde:	f000 ffad 	bl	8002d3c <HAL_Delay>
  {
 8001de2:	e711      	b.n	8001c08 <main+0x104>
 8001de4:	0800ab84 	.word	0x0800ab84
 8001de8:	40020800 	.word	0x40020800
 8001dec:	40020000 	.word	0x40020000
 8001df0:	200020f4 	.word	0x200020f4
 8001df4:	20001efc 	.word	0x20001efc
 8001df8:	20002098 	.word	0x20002098
 8001dfc:	20001f00 	.word	0x20001f00
 8001e00:	200002f8 	.word	0x200002f8
 8001e04:	20001f48 	.word	0x20001f48
 8001e08:	200002e4 	.word	0x200002e4
 8001e0c:	0800ab30 	.word	0x0800ab30
 8001e10:	40533333 	.word	0x40533333
 8001e14:	457ff000 	.word	0x457ff000
 8001e18:	3f710cb3 	.word	0x3f710cb3
 8001e1c:	0800ab4c 	.word	0x0800ab4c
 8001e20:	4039999a 	.word	0x4039999a
 8001e24:	00000000 	.word	0x00000000
 8001e28:	20000af8 	.word	0x20000af8

08001e2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b094      	sub	sp, #80	@ 0x50
 8001e30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e32:	f107 031c 	add.w	r3, r7, #28
 8001e36:	2234      	movs	r2, #52	@ 0x34
 8001e38:	2100      	movs	r1, #0
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f006 fa2b 	bl	8008296 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e40:	f107 0308 	add.w	r3, r7, #8
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e50:	2300      	movs	r3, #0
 8001e52:	607b      	str	r3, [r7, #4]
 8001e54:	4b2a      	ldr	r3, [pc, #168]	@ (8001f00 <SystemClock_Config+0xd4>)
 8001e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e58:	4a29      	ldr	r2, [pc, #164]	@ (8001f00 <SystemClock_Config+0xd4>)
 8001e5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e60:	4b27      	ldr	r3, [pc, #156]	@ (8001f00 <SystemClock_Config+0xd4>)
 8001e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e68:	607b      	str	r3, [r7, #4]
 8001e6a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	603b      	str	r3, [r7, #0]
 8001e70:	4b24      	ldr	r3, [pc, #144]	@ (8001f04 <SystemClock_Config+0xd8>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001e78:	4a22      	ldr	r2, [pc, #136]	@ (8001f04 <SystemClock_Config+0xd8>)
 8001e7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e7e:	6013      	str	r3, [r2, #0]
 8001e80:	4b20      	ldr	r3, [pc, #128]	@ (8001f04 <SystemClock_Config+0xd8>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e88:	603b      	str	r3, [r7, #0]
 8001e8a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e90:	2301      	movs	r3, #1
 8001e92:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e94:	2310      	movs	r3, #16
 8001e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001ea0:	2310      	movs	r3, #16
 8001ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001ea4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001ea8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001eaa:	2304      	movs	r3, #4
 8001eac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eb6:	f107 031c 	add.w	r3, r7, #28
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f002 ffb2 	bl	8004e24 <HAL_RCC_OscConfig>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001ec6:	f000 fb13 	bl	80024f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eca:	230f      	movs	r3, #15
 8001ecc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ed6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001eda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8001edc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001ee0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ee2:	f107 0308 	add.w	r3, r7, #8
 8001ee6:	2102      	movs	r1, #2
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f002 fc51 	bl	8004790 <HAL_RCC_ClockConfig>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001ef4:	f000 fafc 	bl	80024f0 <Error_Handler>
  }
}
 8001ef8:	bf00      	nop
 8001efa:	3750      	adds	r7, #80	@ 0x50
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40023800 	.word	0x40023800
 8001f04:	40007000 	.word	0x40007000

08001f08 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f0e:	463b      	mov	r3, r7
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	605a      	str	r2, [r3, #4]
 8001f16:	609a      	str	r2, [r3, #8]
 8001f18:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001f1a:	4b40      	ldr	r3, [pc, #256]	@ (800201c <MX_ADC1_Init+0x114>)
 8001f1c:	4a40      	ldr	r2, [pc, #256]	@ (8002020 <MX_ADC1_Init+0x118>)
 8001f1e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001f20:	4b3e      	ldr	r3, [pc, #248]	@ (800201c <MX_ADC1_Init+0x114>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f26:	4b3d      	ldr	r3, [pc, #244]	@ (800201c <MX_ADC1_Init+0x114>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001f2c:	4b3b      	ldr	r3, [pc, #236]	@ (800201c <MX_ADC1_Init+0x114>)
 8001f2e:	2201      	movs	r2, #1
 8001f30:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001f32:	4b3a      	ldr	r3, [pc, #232]	@ (800201c <MX_ADC1_Init+0x114>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8001f38:	4b38      	ldr	r3, [pc, #224]	@ (800201c <MX_ADC1_Init+0x114>)
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8001f40:	4b36      	ldr	r3, [pc, #216]	@ (800201c <MX_ADC1_Init+0x114>)
 8001f42:	2201      	movs	r2, #1
 8001f44:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f46:	4b35      	ldr	r3, [pc, #212]	@ (800201c <MX_ADC1_Init+0x114>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f4c:	4b33      	ldr	r3, [pc, #204]	@ (800201c <MX_ADC1_Init+0x114>)
 8001f4e:	4a35      	ldr	r2, [pc, #212]	@ (8002024 <MX_ADC1_Init+0x11c>)
 8001f50:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f52:	4b32      	ldr	r3, [pc, #200]	@ (800201c <MX_ADC1_Init+0x114>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8001f58:	4b30      	ldr	r3, [pc, #192]	@ (800201c <MX_ADC1_Init+0x114>)
 8001f5a:	2205      	movs	r2, #5
 8001f5c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001f5e:	4b2f      	ldr	r3, [pc, #188]	@ (800201c <MX_ADC1_Init+0x114>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f66:	4b2d      	ldr	r3, [pc, #180]	@ (800201c <MX_ADC1_Init+0x114>)
 8001f68:	2201      	movs	r2, #1
 8001f6a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f6c:	482b      	ldr	r0, [pc, #172]	@ (800201c <MX_ADC1_Init+0x114>)
 8001f6e:	f000 ff09 	bl	8002d84 <HAL_ADC_Init>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001f78:	f000 faba 	bl	80024f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001f7c:	230a      	movs	r3, #10
 8001f7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001f80:	2301      	movs	r3, #1
 8001f82:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8001f84:	2306      	movs	r3, #6
 8001f86:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f88:	463b      	mov	r3, r7
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4823      	ldr	r0, [pc, #140]	@ (800201c <MX_ADC1_Init+0x114>)
 8001f8e:	f001 fa09 	bl	80033a4 <HAL_ADC_ConfigChannel>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001f98:	f000 faaa 	bl	80024f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001f9c:	230b      	movs	r3, #11
 8001f9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fa4:	463b      	mov	r3, r7
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	481c      	ldr	r0, [pc, #112]	@ (800201c <MX_ADC1_Init+0x114>)
 8001faa:	f001 f9fb 	bl	80033a4 <HAL_ADC_ConfigChannel>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001fb4:	f000 fa9c 	bl	80024f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001fb8:	230c      	movs	r3, #12
 8001fba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fc4:	463b      	mov	r3, r7
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4814      	ldr	r0, [pc, #80]	@ (800201c <MX_ADC1_Init+0x114>)
 8001fca:	f001 f9eb 	bl	80033a4 <HAL_ADC_ConfigChannel>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8001fd4:	f000 fa8c 	bl	80024f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001fd8:	230d      	movs	r3, #13
 8001fda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001fdc:	2304      	movs	r3, #4
 8001fde:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fe0:	463b      	mov	r3, r7
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	480d      	ldr	r0, [pc, #52]	@ (800201c <MX_ADC1_Init+0x114>)
 8001fe6:	f001 f9dd 	bl	80033a4 <HAL_ADC_ConfigChannel>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8001ff0:	f000 fa7e 	bl	80024f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8002028 <MX_ADC1_Init+0x120>)
 8001ff6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001ff8:	2305      	movs	r3, #5
 8001ffa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001ffc:	2307      	movs	r3, #7
 8001ffe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002000:	463b      	mov	r3, r7
 8002002:	4619      	mov	r1, r3
 8002004:	4805      	ldr	r0, [pc, #20]	@ (800201c <MX_ADC1_Init+0x114>)
 8002006:	f001 f9cd 	bl	80033a4 <HAL_ADC_ConfigChannel>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 8002010:	f000 fa6e 	bl	80024f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002014:	bf00      	nop
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	20001f00 	.word	0x20001f00
 8002020:	40012000 	.word	0x40012000
 8002024:	0f000001 	.word	0x0f000001
 8002028:	10000012 	.word	0x10000012

0800202c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002032:	463b      	mov	r3, r7
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800203e:	4b21      	ldr	r3, [pc, #132]	@ (80020c4 <MX_ADC2_Init+0x98>)
 8002040:	4a21      	ldr	r2, [pc, #132]	@ (80020c8 <MX_ADC2_Init+0x9c>)
 8002042:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002044:	4b1f      	ldr	r3, [pc, #124]	@ (80020c4 <MX_ADC2_Init+0x98>)
 8002046:	2200      	movs	r2, #0
 8002048:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800204a:	4b1e      	ldr	r3, [pc, #120]	@ (80020c4 <MX_ADC2_Init+0x98>)
 800204c:	2200      	movs	r2, #0
 800204e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8002050:	4b1c      	ldr	r3, [pc, #112]	@ (80020c4 <MX_ADC2_Init+0x98>)
 8002052:	2200      	movs	r2, #0
 8002054:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002056:	4b1b      	ldr	r3, [pc, #108]	@ (80020c4 <MX_ADC2_Init+0x98>)
 8002058:	2201      	movs	r2, #1
 800205a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800205c:	4b19      	ldr	r3, [pc, #100]	@ (80020c4 <MX_ADC2_Init+0x98>)
 800205e:	2200      	movs	r2, #0
 8002060:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002064:	4b17      	ldr	r3, [pc, #92]	@ (80020c4 <MX_ADC2_Init+0x98>)
 8002066:	2200      	movs	r2, #0
 8002068:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800206a:	4b16      	ldr	r3, [pc, #88]	@ (80020c4 <MX_ADC2_Init+0x98>)
 800206c:	4a17      	ldr	r2, [pc, #92]	@ (80020cc <MX_ADC2_Init+0xa0>)
 800206e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002070:	4b14      	ldr	r3, [pc, #80]	@ (80020c4 <MX_ADC2_Init+0x98>)
 8002072:	2200      	movs	r2, #0
 8002074:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8002076:	4b13      	ldr	r3, [pc, #76]	@ (80020c4 <MX_ADC2_Init+0x98>)
 8002078:	2201      	movs	r2, #1
 800207a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800207c:	4b11      	ldr	r3, [pc, #68]	@ (80020c4 <MX_ADC2_Init+0x98>)
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002084:	4b0f      	ldr	r3, [pc, #60]	@ (80020c4 <MX_ADC2_Init+0x98>)
 8002086:	2201      	movs	r2, #1
 8002088:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800208a:	480e      	ldr	r0, [pc, #56]	@ (80020c4 <MX_ADC2_Init+0x98>)
 800208c:	f000 fe7a 	bl	8002d84 <HAL_ADC_Init>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8002096:	f000 fa2b 	bl	80024f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800209a:	2300      	movs	r3, #0
 800209c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800209e:	2301      	movs	r3, #1
 80020a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80020a2:	2302      	movs	r3, #2
 80020a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80020a6:	463b      	mov	r3, r7
 80020a8:	4619      	mov	r1, r3
 80020aa:	4806      	ldr	r0, [pc, #24]	@ (80020c4 <MX_ADC2_Init+0x98>)
 80020ac:	f001 f97a 	bl	80033a4 <HAL_ADC_ConfigChannel>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80020b6:	f000 fa1b 	bl	80024f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80020ba:	bf00      	nop
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20001f48 	.word	0x20001f48
 80020c8:	40012100 	.word	0x40012100
 80020cc:	0f000001 	.word	0x0f000001

080020d0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80020d6:	463b      	mov	r3, r7
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	605a      	str	r2, [r3, #4]
 80020de:	609a      	str	r2, [r3, #8]
 80020e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80020e2:	4b21      	ldr	r3, [pc, #132]	@ (8002168 <MX_ADC3_Init+0x98>)
 80020e4:	4a21      	ldr	r2, [pc, #132]	@ (800216c <MX_ADC3_Init+0x9c>)
 80020e6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80020e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002168 <MX_ADC3_Init+0x98>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80020ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002168 <MX_ADC3_Init+0x98>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80020f4:	4b1c      	ldr	r3, [pc, #112]	@ (8002168 <MX_ADC3_Init+0x98>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80020fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002168 <MX_ADC3_Init+0x98>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002100:	4b19      	ldr	r3, [pc, #100]	@ (8002168 <MX_ADC3_Init+0x98>)
 8002102:	2200      	movs	r2, #0
 8002104:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002108:	4b17      	ldr	r3, [pc, #92]	@ (8002168 <MX_ADC3_Init+0x98>)
 800210a:	2200      	movs	r2, #0
 800210c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800210e:	4b16      	ldr	r3, [pc, #88]	@ (8002168 <MX_ADC3_Init+0x98>)
 8002110:	4a17      	ldr	r2, [pc, #92]	@ (8002170 <MX_ADC3_Init+0xa0>)
 8002112:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002114:	4b14      	ldr	r3, [pc, #80]	@ (8002168 <MX_ADC3_Init+0x98>)
 8002116:	2200      	movs	r2, #0
 8002118:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800211a:	4b13      	ldr	r3, [pc, #76]	@ (8002168 <MX_ADC3_Init+0x98>)
 800211c:	2201      	movs	r2, #1
 800211e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8002120:	4b11      	ldr	r3, [pc, #68]	@ (8002168 <MX_ADC3_Init+0x98>)
 8002122:	2200      	movs	r2, #0
 8002124:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002128:	4b0f      	ldr	r3, [pc, #60]	@ (8002168 <MX_ADC3_Init+0x98>)
 800212a:	2201      	movs	r2, #1
 800212c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800212e:	480e      	ldr	r0, [pc, #56]	@ (8002168 <MX_ADC3_Init+0x98>)
 8002130:	f000 fe28 	bl	8002d84 <HAL_ADC_Init>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 800213a:	f000 f9d9 	bl	80024f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800213e:	2301      	movs	r3, #1
 8002140:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002142:	2301      	movs	r3, #1
 8002144:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002146:	2300      	movs	r3, #0
 8002148:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800214a:	463b      	mov	r3, r7
 800214c:	4619      	mov	r1, r3
 800214e:	4806      	ldr	r0, [pc, #24]	@ (8002168 <MX_ADC3_Init+0x98>)
 8002150:	f001 f928 	bl	80033a4 <HAL_ADC_ConfigChannel>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 800215a:	f000 f9c9 	bl	80024f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800215e:	bf00      	nop
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	20001f90 	.word	0x20001f90
 800216c:	40012200 	.word	0x40012200
 8002170:	0f000001 	.word	0x0f000001

08002174 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800217a:	463b      	mov	r3, r7
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002182:	4b0f      	ldr	r3, [pc, #60]	@ (80021c0 <MX_DAC_Init+0x4c>)
 8002184:	4a0f      	ldr	r2, [pc, #60]	@ (80021c4 <MX_DAC_Init+0x50>)
 8002186:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002188:	480d      	ldr	r0, [pc, #52]	@ (80021c0 <MX_DAC_Init+0x4c>)
 800218a:	f001 fccc 	bl	8003b26 <HAL_DAC_Init>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002194:	f000 f9ac 	bl	80024f0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002198:	2300      	movs	r3, #0
 800219a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800219c:	2300      	movs	r3, #0
 800219e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80021a0:	463b      	mov	r3, r7
 80021a2:	2200      	movs	r2, #0
 80021a4:	4619      	mov	r1, r3
 80021a6:	4806      	ldr	r0, [pc, #24]	@ (80021c0 <MX_DAC_Init+0x4c>)
 80021a8:	f001 fd7a 	bl	8003ca0 <HAL_DAC_ConfigChannel>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80021b2:	f000 f99d 	bl	80024f0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80021b6:	bf00      	nop
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	20002098 	.word	0x20002098
 80021c4:	40007400 	.word	0x40007400

080021c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08a      	sub	sp, #40	@ 0x28
 80021cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021ce:	f107 0320 	add.w	r3, r7, #32
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021d8:	1d3b      	adds	r3, r7, #4
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	605a      	str	r2, [r3, #4]
 80021e0:	609a      	str	r2, [r3, #8]
 80021e2:	60da      	str	r2, [r3, #12]
 80021e4:	611a      	str	r2, [r3, #16]
 80021e6:	615a      	str	r2, [r3, #20]
 80021e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021ea:	4b2d      	ldr	r3, [pc, #180]	@ (80022a0 <MX_TIM2_Init+0xd8>)
 80021ec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80021f0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80021f2:	4b2b      	ldr	r3, [pc, #172]	@ (80022a0 <MX_TIM2_Init+0xd8>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021f8:	4b29      	ldr	r3, [pc, #164]	@ (80022a0 <MX_TIM2_Init+0xd8>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80021fe:	4b28      	ldr	r3, [pc, #160]	@ (80022a0 <MX_TIM2_Init+0xd8>)
 8002200:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002204:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002206:	4b26      	ldr	r3, [pc, #152]	@ (80022a0 <MX_TIM2_Init+0xd8>)
 8002208:	2200      	movs	r2, #0
 800220a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800220c:	4b24      	ldr	r3, [pc, #144]	@ (80022a0 <MX_TIM2_Init+0xd8>)
 800220e:	2280      	movs	r2, #128	@ 0x80
 8002210:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002212:	4823      	ldr	r0, [pc, #140]	@ (80022a0 <MX_TIM2_Init+0xd8>)
 8002214:	f003 f8f3 	bl	80053fe <HAL_TIM_PWM_Init>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800221e:	f000 f967 	bl	80024f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002222:	2300      	movs	r3, #0
 8002224:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002226:	2300      	movs	r3, #0
 8002228:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800222a:	f107 0320 	add.w	r3, r7, #32
 800222e:	4619      	mov	r1, r3
 8002230:	481b      	ldr	r0, [pc, #108]	@ (80022a0 <MX_TIM2_Init+0xd8>)
 8002232:	f003 fd3f 	bl	8005cb4 <HAL_TIMEx_MasterConfigSynchronization>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800223c:	f000 f958 	bl	80024f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002240:	2360      	movs	r3, #96	@ 0x60
 8002242:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002244:	2300      	movs	r3, #0
 8002246:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002248:	2300      	movs	r3, #0
 800224a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002250:	1d3b      	adds	r3, r7, #4
 8002252:	2200      	movs	r2, #0
 8002254:	4619      	mov	r1, r3
 8002256:	4812      	ldr	r0, [pc, #72]	@ (80022a0 <MX_TIM2_Init+0xd8>)
 8002258:	f003 f9e8 	bl	800562c <HAL_TIM_PWM_ConfigChannel>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002262:	f000 f945 	bl	80024f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002266:	1d3b      	adds	r3, r7, #4
 8002268:	2208      	movs	r2, #8
 800226a:	4619      	mov	r1, r3
 800226c:	480c      	ldr	r0, [pc, #48]	@ (80022a0 <MX_TIM2_Init+0xd8>)
 800226e:	f003 f9dd 	bl	800562c <HAL_TIM_PWM_ConfigChannel>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002278:	f000 f93a 	bl	80024f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800227c:	1d3b      	adds	r3, r7, #4
 800227e:	220c      	movs	r2, #12
 8002280:	4619      	mov	r1, r3
 8002282:	4807      	ldr	r0, [pc, #28]	@ (80022a0 <MX_TIM2_Init+0xd8>)
 8002284:	f003 f9d2 	bl	800562c <HAL_TIM_PWM_ConfigChannel>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 800228e:	f000 f92f 	bl	80024f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002292:	4803      	ldr	r0, [pc, #12]	@ (80022a0 <MX_TIM2_Init+0xd8>)
 8002294:	f000 faee 	bl	8002874 <HAL_TIM_MspPostInit>

}
 8002298:	bf00      	nop
 800229a:	3728      	adds	r7, #40	@ 0x28
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	200020ac 	.word	0x200020ac

080022a4 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b088      	sub	sp, #32
 80022a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80022aa:	1d3b      	adds	r3, r7, #4
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	605a      	str	r2, [r3, #4]
 80022b2:	609a      	str	r2, [r3, #8]
 80022b4:	60da      	str	r2, [r3, #12]
 80022b6:	611a      	str	r2, [r3, #16]
 80022b8:	615a      	str	r2, [r3, #20]
 80022ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80022bc:	4b1e      	ldr	r3, [pc, #120]	@ (8002338 <MX_TIM11_Init+0x94>)
 80022be:	4a1f      	ldr	r2, [pc, #124]	@ (800233c <MX_TIM11_Init+0x98>)
 80022c0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 71;
 80022c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002338 <MX_TIM11_Init+0x94>)
 80022c4:	2247      	movs	r2, #71	@ 0x47
 80022c6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002338 <MX_TIM11_Init+0x94>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2000;
 80022ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002338 <MX_TIM11_Init+0x94>)
 80022d0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80022d4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022d6:	4b18      	ldr	r3, [pc, #96]	@ (8002338 <MX_TIM11_Init+0x94>)
 80022d8:	2200      	movs	r2, #0
 80022da:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022dc:	4b16      	ldr	r3, [pc, #88]	@ (8002338 <MX_TIM11_Init+0x94>)
 80022de:	2280      	movs	r2, #128	@ 0x80
 80022e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80022e2:	4815      	ldr	r0, [pc, #84]	@ (8002338 <MX_TIM11_Init+0x94>)
 80022e4:	f003 f83c 	bl	8005360 <HAL_TIM_Base_Init>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80022ee:	f000 f8ff 	bl	80024f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80022f2:	4811      	ldr	r0, [pc, #68]	@ (8002338 <MX_TIM11_Init+0x94>)
 80022f4:	f003 f883 	bl	80053fe <HAL_TIM_PWM_Init>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80022fe:	f000 f8f7 	bl	80024f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002302:	2360      	movs	r3, #96	@ 0x60
 8002304:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002306:	2300      	movs	r3, #0
 8002308:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800230a:	2300      	movs	r3, #0
 800230c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800230e:	2300      	movs	r3, #0
 8002310:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002312:	1d3b      	adds	r3, r7, #4
 8002314:	2200      	movs	r2, #0
 8002316:	4619      	mov	r1, r3
 8002318:	4807      	ldr	r0, [pc, #28]	@ (8002338 <MX_TIM11_Init+0x94>)
 800231a:	f003 f987 	bl	800562c <HAL_TIM_PWM_ConfigChannel>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8002324:	f000 f8e4 	bl	80024f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8002328:	4803      	ldr	r0, [pc, #12]	@ (8002338 <MX_TIM11_Init+0x94>)
 800232a:	f000 faa3 	bl	8002874 <HAL_TIM_MspPostInit>

}
 800232e:	bf00      	nop
 8002330:	3720      	adds	r7, #32
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	200020f4 	.word	0x200020f4
 800233c:	40014800 	.word	0x40014800

08002340 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002344:	4b11      	ldr	r3, [pc, #68]	@ (800238c <MX_USART2_UART_Init+0x4c>)
 8002346:	4a12      	ldr	r2, [pc, #72]	@ (8002390 <MX_USART2_UART_Init+0x50>)
 8002348:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800234a:	4b10      	ldr	r3, [pc, #64]	@ (800238c <MX_USART2_UART_Init+0x4c>)
 800234c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002350:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002352:	4b0e      	ldr	r3, [pc, #56]	@ (800238c <MX_USART2_UART_Init+0x4c>)
 8002354:	2200      	movs	r2, #0
 8002356:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002358:	4b0c      	ldr	r3, [pc, #48]	@ (800238c <MX_USART2_UART_Init+0x4c>)
 800235a:	2200      	movs	r2, #0
 800235c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800235e:	4b0b      	ldr	r3, [pc, #44]	@ (800238c <MX_USART2_UART_Init+0x4c>)
 8002360:	2200      	movs	r2, #0
 8002362:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002364:	4b09      	ldr	r3, [pc, #36]	@ (800238c <MX_USART2_UART_Init+0x4c>)
 8002366:	220c      	movs	r2, #12
 8002368:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800236a:	4b08      	ldr	r3, [pc, #32]	@ (800238c <MX_USART2_UART_Init+0x4c>)
 800236c:	2200      	movs	r2, #0
 800236e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002370:	4b06      	ldr	r3, [pc, #24]	@ (800238c <MX_USART2_UART_Init+0x4c>)
 8002372:	2200      	movs	r2, #0
 8002374:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002376:	4805      	ldr	r0, [pc, #20]	@ (800238c <MX_USART2_UART_Init+0x4c>)
 8002378:	f003 fd18 	bl	8005dac <HAL_UART_Init>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002382:	f000 f8b5 	bl	80024f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	2000213c 	.word	0x2000213c
 8002390:	40004400 	.word	0x40004400

08002394 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	607b      	str	r3, [r7, #4]
 800239e:	4b10      	ldr	r3, [pc, #64]	@ (80023e0 <MX_DMA_Init+0x4c>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a2:	4a0f      	ldr	r2, [pc, #60]	@ (80023e0 <MX_DMA_Init+0x4c>)
 80023a4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80023a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023aa:	4b0d      	ldr	r3, [pc, #52]	@ (80023e0 <MX_DMA_Init+0x4c>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023b2:	607b      	str	r3, [r7, #4]
 80023b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80023b6:	2200      	movs	r2, #0
 80023b8:	2100      	movs	r1, #0
 80023ba:	2038      	movs	r0, #56	@ 0x38
 80023bc:	f001 fb7d 	bl	8003aba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80023c0:	2038      	movs	r0, #56	@ 0x38
 80023c2:	f001 fb96 	bl	8003af2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80023c6:	2200      	movs	r2, #0
 80023c8:	2100      	movs	r1, #0
 80023ca:	203a      	movs	r0, #58	@ 0x3a
 80023cc:	f001 fb75 	bl	8003aba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80023d0:	203a      	movs	r0, #58	@ 0x3a
 80023d2:	f001 fb8e 	bl	8003af2 <HAL_NVIC_EnableIRQ>

}
 80023d6:	bf00      	nop
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40023800 	.word	0x40023800

080023e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b08a      	sub	sp, #40	@ 0x28
 80023e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ea:	f107 0314 	add.w	r3, r7, #20
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	605a      	str	r2, [r3, #4]
 80023f4:	609a      	str	r2, [r3, #8]
 80023f6:	60da      	str	r2, [r3, #12]
 80023f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	613b      	str	r3, [r7, #16]
 80023fe:	4b39      	ldr	r3, [pc, #228]	@ (80024e4 <MX_GPIO_Init+0x100>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002402:	4a38      	ldr	r2, [pc, #224]	@ (80024e4 <MX_GPIO_Init+0x100>)
 8002404:	f043 0304 	orr.w	r3, r3, #4
 8002408:	6313      	str	r3, [r2, #48]	@ 0x30
 800240a:	4b36      	ldr	r3, [pc, #216]	@ (80024e4 <MX_GPIO_Init+0x100>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240e:	f003 0304 	and.w	r3, r3, #4
 8002412:	613b      	str	r3, [r7, #16]
 8002414:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	60fb      	str	r3, [r7, #12]
 800241a:	4b32      	ldr	r3, [pc, #200]	@ (80024e4 <MX_GPIO_Init+0x100>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241e:	4a31      	ldr	r2, [pc, #196]	@ (80024e4 <MX_GPIO_Init+0x100>)
 8002420:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002424:	6313      	str	r3, [r2, #48]	@ 0x30
 8002426:	4b2f      	ldr	r3, [pc, #188]	@ (80024e4 <MX_GPIO_Init+0x100>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	60bb      	str	r3, [r7, #8]
 8002436:	4b2b      	ldr	r3, [pc, #172]	@ (80024e4 <MX_GPIO_Init+0x100>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800243a:	4a2a      	ldr	r2, [pc, #168]	@ (80024e4 <MX_GPIO_Init+0x100>)
 800243c:	f043 0301 	orr.w	r3, r3, #1
 8002440:	6313      	str	r3, [r2, #48]	@ 0x30
 8002442:	4b28      	ldr	r3, [pc, #160]	@ (80024e4 <MX_GPIO_Init+0x100>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	60bb      	str	r3, [r7, #8]
 800244c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800244e:	2300      	movs	r3, #0
 8002450:	607b      	str	r3, [r7, #4]
 8002452:	4b24      	ldr	r3, [pc, #144]	@ (80024e4 <MX_GPIO_Init+0x100>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002456:	4a23      	ldr	r2, [pc, #140]	@ (80024e4 <MX_GPIO_Init+0x100>)
 8002458:	f043 0302 	orr.w	r3, r3, #2
 800245c:	6313      	str	r3, [r2, #48]	@ 0x30
 800245e:	4b21      	ldr	r3, [pc, #132]	@ (80024e4 <MX_GPIO_Init+0x100>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	607b      	str	r3, [r7, #4]
 8002468:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800246a:	2200      	movs	r2, #0
 800246c:	f44f 61e4 	mov.w	r1, #1824	@ 0x720
 8002470:	481d      	ldr	r0, [pc, #116]	@ (80024e8 <MX_GPIO_Init+0x104>)
 8002472:	f002 f973 	bl	800475c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002476:	2200      	movs	r2, #0
 8002478:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800247c:	481b      	ldr	r0, [pc, #108]	@ (80024ec <MX_GPIO_Init+0x108>)
 800247e:	f002 f96d 	bl	800475c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002482:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002486:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002488:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800248c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248e:	2300      	movs	r3, #0
 8002490:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002492:	f107 0314 	add.w	r3, r7, #20
 8002496:	4619      	mov	r1, r3
 8002498:	4814      	ldr	r0, [pc, #80]	@ (80024ec <MX_GPIO_Init+0x108>)
 800249a:	f001 ffcb 	bl	8004434 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800249e:	f44f 63e4 	mov.w	r3, #1824	@ 0x720
 80024a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024a4:	2301      	movs	r3, #1
 80024a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a8:	2300      	movs	r3, #0
 80024aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ac:	2300      	movs	r3, #0
 80024ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b0:	f107 0314 	add.w	r3, r7, #20
 80024b4:	4619      	mov	r1, r3
 80024b6:	480c      	ldr	r0, [pc, #48]	@ (80024e8 <MX_GPIO_Init+0x104>)
 80024b8:	f001 ffbc 	bl	8004434 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80024bc:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80024c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024c2:	2301      	movs	r3, #1
 80024c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c6:	2300      	movs	r3, #0
 80024c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ca:	2300      	movs	r3, #0
 80024cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024ce:	f107 0314 	add.w	r3, r7, #20
 80024d2:	4619      	mov	r1, r3
 80024d4:	4805      	ldr	r0, [pc, #20]	@ (80024ec <MX_GPIO_Init+0x108>)
 80024d6:	f001 ffad 	bl	8004434 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80024da:	bf00      	nop
 80024dc:	3728      	adds	r7, #40	@ 0x28
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40023800 	.word	0x40023800
 80024e8:	40020000 	.word	0x40020000
 80024ec:	40020800 	.word	0x40020800

080024f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024f4:	b672      	cpsid	i
}
 80024f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024f8:	bf00      	nop
 80024fa:	e7fd      	b.n	80024f8 <Error_Handler+0x8>

080024fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	607b      	str	r3, [r7, #4]
 8002506:	4b10      	ldr	r3, [pc, #64]	@ (8002548 <HAL_MspInit+0x4c>)
 8002508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800250a:	4a0f      	ldr	r2, [pc, #60]	@ (8002548 <HAL_MspInit+0x4c>)
 800250c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002510:	6453      	str	r3, [r2, #68]	@ 0x44
 8002512:	4b0d      	ldr	r3, [pc, #52]	@ (8002548 <HAL_MspInit+0x4c>)
 8002514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002516:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800251a:	607b      	str	r3, [r7, #4]
 800251c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	603b      	str	r3, [r7, #0]
 8002522:	4b09      	ldr	r3, [pc, #36]	@ (8002548 <HAL_MspInit+0x4c>)
 8002524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002526:	4a08      	ldr	r2, [pc, #32]	@ (8002548 <HAL_MspInit+0x4c>)
 8002528:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800252c:	6413      	str	r3, [r2, #64]	@ 0x40
 800252e:	4b06      	ldr	r3, [pc, #24]	@ (8002548 <HAL_MspInit+0x4c>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002536:	603b      	str	r3, [r7, #0]
 8002538:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800253a:	2007      	movs	r0, #7
 800253c:	f001 fab2 	bl	8003aa4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002540:	bf00      	nop
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40023800 	.word	0x40023800

0800254c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b08e      	sub	sp, #56	@ 0x38
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002554:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	605a      	str	r2, [r3, #4]
 800255e:	609a      	str	r2, [r3, #8]
 8002560:	60da      	str	r2, [r3, #12]
 8002562:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a75      	ldr	r2, [pc, #468]	@ (8002740 <HAL_ADC_MspInit+0x1f4>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d158      	bne.n	8002620 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	623b      	str	r3, [r7, #32]
 8002572:	4b74      	ldr	r3, [pc, #464]	@ (8002744 <HAL_ADC_MspInit+0x1f8>)
 8002574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002576:	4a73      	ldr	r2, [pc, #460]	@ (8002744 <HAL_ADC_MspInit+0x1f8>)
 8002578:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800257c:	6453      	str	r3, [r2, #68]	@ 0x44
 800257e:	4b71      	ldr	r3, [pc, #452]	@ (8002744 <HAL_ADC_MspInit+0x1f8>)
 8002580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002582:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002586:	623b      	str	r3, [r7, #32]
 8002588:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	61fb      	str	r3, [r7, #28]
 800258e:	4b6d      	ldr	r3, [pc, #436]	@ (8002744 <HAL_ADC_MspInit+0x1f8>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002592:	4a6c      	ldr	r2, [pc, #432]	@ (8002744 <HAL_ADC_MspInit+0x1f8>)
 8002594:	f043 0304 	orr.w	r3, r3, #4
 8002598:	6313      	str	r3, [r2, #48]	@ 0x30
 800259a:	4b6a      	ldr	r3, [pc, #424]	@ (8002744 <HAL_ADC_MspInit+0x1f8>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259e:	f003 0304 	and.w	r3, r3, #4
 80025a2:	61fb      	str	r3, [r7, #28]
 80025a4:	69fb      	ldr	r3, [r7, #28]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80025a6:	230f      	movs	r3, #15
 80025a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025aa:	2303      	movs	r3, #3
 80025ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025b6:	4619      	mov	r1, r3
 80025b8:	4863      	ldr	r0, [pc, #396]	@ (8002748 <HAL_ADC_MspInit+0x1fc>)
 80025ba:	f001 ff3b 	bl	8004434 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80025be:	4b63      	ldr	r3, [pc, #396]	@ (800274c <HAL_ADC_MspInit+0x200>)
 80025c0:	4a63      	ldr	r2, [pc, #396]	@ (8002750 <HAL_ADC_MspInit+0x204>)
 80025c2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80025c4:	4b61      	ldr	r3, [pc, #388]	@ (800274c <HAL_ADC_MspInit+0x200>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025ca:	4b60      	ldr	r3, [pc, #384]	@ (800274c <HAL_ADC_MspInit+0x200>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80025d0:	4b5e      	ldr	r3, [pc, #376]	@ (800274c <HAL_ADC_MspInit+0x200>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80025d6:	4b5d      	ldr	r3, [pc, #372]	@ (800274c <HAL_ADC_MspInit+0x200>)
 80025d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80025dc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80025de:	4b5b      	ldr	r3, [pc, #364]	@ (800274c <HAL_ADC_MspInit+0x200>)
 80025e0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80025e4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80025e6:	4b59      	ldr	r3, [pc, #356]	@ (800274c <HAL_ADC_MspInit+0x200>)
 80025e8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80025ec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80025ee:	4b57      	ldr	r3, [pc, #348]	@ (800274c <HAL_ADC_MspInit+0x200>)
 80025f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025f4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80025f6:	4b55      	ldr	r3, [pc, #340]	@ (800274c <HAL_ADC_MspInit+0x200>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025fc:	4b53      	ldr	r3, [pc, #332]	@ (800274c <HAL_ADC_MspInit+0x200>)
 80025fe:	2200      	movs	r2, #0
 8002600:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002602:	4852      	ldr	r0, [pc, #328]	@ (800274c <HAL_ADC_MspInit+0x200>)
 8002604:	f001 fba6 	bl	8003d54 <HAL_DMA_Init>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800260e:	f7ff ff6f 	bl	80024f0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a4d      	ldr	r2, [pc, #308]	@ (800274c <HAL_ADC_MspInit+0x200>)
 8002616:	639a      	str	r2, [r3, #56]	@ 0x38
 8002618:	4a4c      	ldr	r2, [pc, #304]	@ (800274c <HAL_ADC_MspInit+0x200>)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800261e:	e08b      	b.n	8002738 <HAL_ADC_MspInit+0x1ec>
  else if(hadc->Instance==ADC2)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a4b      	ldr	r2, [pc, #300]	@ (8002754 <HAL_ADC_MspInit+0x208>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d159      	bne.n	80026de <HAL_ADC_MspInit+0x192>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800262a:	2300      	movs	r3, #0
 800262c:	61bb      	str	r3, [r7, #24]
 800262e:	4b45      	ldr	r3, [pc, #276]	@ (8002744 <HAL_ADC_MspInit+0x1f8>)
 8002630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002632:	4a44      	ldr	r2, [pc, #272]	@ (8002744 <HAL_ADC_MspInit+0x1f8>)
 8002634:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002638:	6453      	str	r3, [r2, #68]	@ 0x44
 800263a:	4b42      	ldr	r3, [pc, #264]	@ (8002744 <HAL_ADC_MspInit+0x1f8>)
 800263c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800263e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002642:	61bb      	str	r3, [r7, #24]
 8002644:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	617b      	str	r3, [r7, #20]
 800264a:	4b3e      	ldr	r3, [pc, #248]	@ (8002744 <HAL_ADC_MspInit+0x1f8>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264e:	4a3d      	ldr	r2, [pc, #244]	@ (8002744 <HAL_ADC_MspInit+0x1f8>)
 8002650:	f043 0301 	orr.w	r3, r3, #1
 8002654:	6313      	str	r3, [r2, #48]	@ 0x30
 8002656:	4b3b      	ldr	r3, [pc, #236]	@ (8002744 <HAL_ADC_MspInit+0x1f8>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	617b      	str	r3, [r7, #20]
 8002660:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002662:	2301      	movs	r3, #1
 8002664:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002666:	2303      	movs	r3, #3
 8002668:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266a:	2300      	movs	r3, #0
 800266c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002672:	4619      	mov	r1, r3
 8002674:	4838      	ldr	r0, [pc, #224]	@ (8002758 <HAL_ADC_MspInit+0x20c>)
 8002676:	f001 fedd 	bl	8004434 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800267a:	4b38      	ldr	r3, [pc, #224]	@ (800275c <HAL_ADC_MspInit+0x210>)
 800267c:	4a38      	ldr	r2, [pc, #224]	@ (8002760 <HAL_ADC_MspInit+0x214>)
 800267e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8002680:	4b36      	ldr	r3, [pc, #216]	@ (800275c <HAL_ADC_MspInit+0x210>)
 8002682:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002686:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002688:	4b34      	ldr	r3, [pc, #208]	@ (800275c <HAL_ADC_MspInit+0x210>)
 800268a:	2200      	movs	r2, #0
 800268c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800268e:	4b33      	ldr	r3, [pc, #204]	@ (800275c <HAL_ADC_MspInit+0x210>)
 8002690:	2200      	movs	r2, #0
 8002692:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002694:	4b31      	ldr	r3, [pc, #196]	@ (800275c <HAL_ADC_MspInit+0x210>)
 8002696:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800269a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800269c:	4b2f      	ldr	r3, [pc, #188]	@ (800275c <HAL_ADC_MspInit+0x210>)
 800269e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80026a2:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80026a4:	4b2d      	ldr	r3, [pc, #180]	@ (800275c <HAL_ADC_MspInit+0x210>)
 80026a6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80026aa:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80026ac:	4b2b      	ldr	r3, [pc, #172]	@ (800275c <HAL_ADC_MspInit+0x210>)
 80026ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026b2:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80026b4:	4b29      	ldr	r3, [pc, #164]	@ (800275c <HAL_ADC_MspInit+0x210>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026ba:	4b28      	ldr	r3, [pc, #160]	@ (800275c <HAL_ADC_MspInit+0x210>)
 80026bc:	2200      	movs	r2, #0
 80026be:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80026c0:	4826      	ldr	r0, [pc, #152]	@ (800275c <HAL_ADC_MspInit+0x210>)
 80026c2:	f001 fb47 	bl	8003d54 <HAL_DMA_Init>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <HAL_ADC_MspInit+0x184>
      Error_Handler();
 80026cc:	f7ff ff10 	bl	80024f0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a22      	ldr	r2, [pc, #136]	@ (800275c <HAL_ADC_MspInit+0x210>)
 80026d4:	639a      	str	r2, [r3, #56]	@ 0x38
 80026d6:	4a21      	ldr	r2, [pc, #132]	@ (800275c <HAL_ADC_MspInit+0x210>)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80026dc:	e02c      	b.n	8002738 <HAL_ADC_MspInit+0x1ec>
  else if(hadc->Instance==ADC3)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a20      	ldr	r2, [pc, #128]	@ (8002764 <HAL_ADC_MspInit+0x218>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d127      	bne.n	8002738 <HAL_ADC_MspInit+0x1ec>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80026e8:	2300      	movs	r3, #0
 80026ea:	613b      	str	r3, [r7, #16]
 80026ec:	4b15      	ldr	r3, [pc, #84]	@ (8002744 <HAL_ADC_MspInit+0x1f8>)
 80026ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f0:	4a14      	ldr	r2, [pc, #80]	@ (8002744 <HAL_ADC_MspInit+0x1f8>)
 80026f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026f6:	6453      	str	r3, [r2, #68]	@ 0x44
 80026f8:	4b12      	ldr	r3, [pc, #72]	@ (8002744 <HAL_ADC_MspInit+0x1f8>)
 80026fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002700:	613b      	str	r3, [r7, #16]
 8002702:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002704:	2300      	movs	r3, #0
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	4b0e      	ldr	r3, [pc, #56]	@ (8002744 <HAL_ADC_MspInit+0x1f8>)
 800270a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270c:	4a0d      	ldr	r2, [pc, #52]	@ (8002744 <HAL_ADC_MspInit+0x1f8>)
 800270e:	f043 0301 	orr.w	r3, r3, #1
 8002712:	6313      	str	r3, [r2, #48]	@ 0x30
 8002714:	4b0b      	ldr	r3, [pc, #44]	@ (8002744 <HAL_ADC_MspInit+0x1f8>)
 8002716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002720:	2302      	movs	r3, #2
 8002722:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002724:	2303      	movs	r3, #3
 8002726:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002728:	2300      	movs	r3, #0
 800272a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800272c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002730:	4619      	mov	r1, r3
 8002732:	4809      	ldr	r0, [pc, #36]	@ (8002758 <HAL_ADC_MspInit+0x20c>)
 8002734:	f001 fe7e 	bl	8004434 <HAL_GPIO_Init>
}
 8002738:	bf00      	nop
 800273a:	3738      	adds	r7, #56	@ 0x38
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40012000 	.word	0x40012000
 8002744:	40023800 	.word	0x40023800
 8002748:	40020800 	.word	0x40020800
 800274c:	20001fd8 	.word	0x20001fd8
 8002750:	40026410 	.word	0x40026410
 8002754:	40012100 	.word	0x40012100
 8002758:	40020000 	.word	0x40020000
 800275c:	20002038 	.word	0x20002038
 8002760:	40026440 	.word	0x40026440
 8002764:	40012200 	.word	0x40012200

08002768 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b08a      	sub	sp, #40	@ 0x28
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002770:	f107 0314 	add.w	r3, r7, #20
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	605a      	str	r2, [r3, #4]
 800277a:	609a      	str	r2, [r3, #8]
 800277c:	60da      	str	r2, [r3, #12]
 800277e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a17      	ldr	r2, [pc, #92]	@ (80027e4 <HAL_DAC_MspInit+0x7c>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d127      	bne.n	80027da <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800278a:	2300      	movs	r3, #0
 800278c:	613b      	str	r3, [r7, #16]
 800278e:	4b16      	ldr	r3, [pc, #88]	@ (80027e8 <HAL_DAC_MspInit+0x80>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002792:	4a15      	ldr	r2, [pc, #84]	@ (80027e8 <HAL_DAC_MspInit+0x80>)
 8002794:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002798:	6413      	str	r3, [r2, #64]	@ 0x40
 800279a:	4b13      	ldr	r3, [pc, #76]	@ (80027e8 <HAL_DAC_MspInit+0x80>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027a2:	613b      	str	r3, [r7, #16]
 80027a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	4b0f      	ldr	r3, [pc, #60]	@ (80027e8 <HAL_DAC_MspInit+0x80>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ae:	4a0e      	ldr	r2, [pc, #56]	@ (80027e8 <HAL_DAC_MspInit+0x80>)
 80027b0:	f043 0301 	orr.w	r3, r3, #1
 80027b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027b6:	4b0c      	ldr	r3, [pc, #48]	@ (80027e8 <HAL_DAC_MspInit+0x80>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80027c2:	2310      	movs	r3, #16
 80027c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027c6:	2303      	movs	r3, #3
 80027c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ca:	2300      	movs	r3, #0
 80027cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ce:	f107 0314 	add.w	r3, r7, #20
 80027d2:	4619      	mov	r1, r3
 80027d4:	4805      	ldr	r0, [pc, #20]	@ (80027ec <HAL_DAC_MspInit+0x84>)
 80027d6:	f001 fe2d 	bl	8004434 <HAL_GPIO_Init>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 80027da:	bf00      	nop
 80027dc:	3728      	adds	r7, #40	@ 0x28
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	40007400 	.word	0x40007400
 80027e8:	40023800 	.word	0x40023800
 80027ec:	40020000 	.word	0x40020000

080027f0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002800:	d10d      	bne.n	800281e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	60fb      	str	r3, [r7, #12]
 8002806:	4b09      	ldr	r3, [pc, #36]	@ (800282c <HAL_TIM_PWM_MspInit+0x3c>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280a:	4a08      	ldr	r2, [pc, #32]	@ (800282c <HAL_TIM_PWM_MspInit+0x3c>)
 800280c:	f043 0301 	orr.w	r3, r3, #1
 8002810:	6413      	str	r3, [r2, #64]	@ 0x40
 8002812:	4b06      	ldr	r3, [pc, #24]	@ (800282c <HAL_TIM_PWM_MspInit+0x3c>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800281e:	bf00      	nop
 8002820:	3714      	adds	r7, #20
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	40023800 	.word	0x40023800

08002830 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a0b      	ldr	r2, [pc, #44]	@ (800286c <HAL_TIM_Base_MspInit+0x3c>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d10d      	bne.n	800285e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	4b0a      	ldr	r3, [pc, #40]	@ (8002870 <HAL_TIM_Base_MspInit+0x40>)
 8002848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800284a:	4a09      	ldr	r2, [pc, #36]	@ (8002870 <HAL_TIM_Base_MspInit+0x40>)
 800284c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002850:	6453      	str	r3, [r2, #68]	@ 0x44
 8002852:	4b07      	ldr	r3, [pc, #28]	@ (8002870 <HAL_TIM_Base_MspInit+0x40>)
 8002854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002856:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM11_MspInit 1 */

  }

}
 800285e:	bf00      	nop
 8002860:	3714      	adds	r7, #20
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	40014800 	.word	0x40014800
 8002870:	40023800 	.word	0x40023800

08002874 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b08a      	sub	sp, #40	@ 0x28
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800287c:	f107 0314 	add.w	r3, r7, #20
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	605a      	str	r2, [r3, #4]
 8002886:	609a      	str	r2, [r3, #8]
 8002888:	60da      	str	r2, [r3, #12]
 800288a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002894:	d13e      	bne.n	8002914 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002896:	2300      	movs	r3, #0
 8002898:	613b      	str	r3, [r7, #16]
 800289a:	4b32      	ldr	r3, [pc, #200]	@ (8002964 <HAL_TIM_MspPostInit+0xf0>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289e:	4a31      	ldr	r2, [pc, #196]	@ (8002964 <HAL_TIM_MspPostInit+0xf0>)
 80028a0:	f043 0302 	orr.w	r3, r3, #2
 80028a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028a6:	4b2f      	ldr	r3, [pc, #188]	@ (8002964 <HAL_TIM_MspPostInit+0xf0>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	613b      	str	r3, [r7, #16]
 80028b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b2:	2300      	movs	r3, #0
 80028b4:	60fb      	str	r3, [r7, #12]
 80028b6:	4b2b      	ldr	r3, [pc, #172]	@ (8002964 <HAL_TIM_MspPostInit+0xf0>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ba:	4a2a      	ldr	r2, [pc, #168]	@ (8002964 <HAL_TIM_MspPostInit+0xf0>)
 80028bc:	f043 0301 	orr.w	r3, r3, #1
 80028c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028c2:	4b28      	ldr	r3, [pc, #160]	@ (8002964 <HAL_TIM_MspPostInit+0xf0>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB2     ------> TIM2_CH4
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 80028ce:	f240 4304 	movw	r3, #1028	@ 0x404
 80028d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d4:	2302      	movs	r3, #2
 80028d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d8:	2300      	movs	r3, #0
 80028da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028dc:	2300      	movs	r3, #0
 80028de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80028e0:	2301      	movs	r3, #1
 80028e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e4:	f107 0314 	add.w	r3, r7, #20
 80028e8:	4619      	mov	r1, r3
 80028ea:	481f      	ldr	r0, [pc, #124]	@ (8002968 <HAL_TIM_MspPostInit+0xf4>)
 80028ec:	f001 fda2 	bl	8004434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80028f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80028f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f6:	2302      	movs	r3, #2
 80028f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fa:	2300      	movs	r3, #0
 80028fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028fe:	2300      	movs	r3, #0
 8002900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002902:	2301      	movs	r3, #1
 8002904:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002906:	f107 0314 	add.w	r3, r7, #20
 800290a:	4619      	mov	r1, r3
 800290c:	4817      	ldr	r0, [pc, #92]	@ (800296c <HAL_TIM_MspPostInit+0xf8>)
 800290e:	f001 fd91 	bl	8004434 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8002912:	e023      	b.n	800295c <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM11)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a15      	ldr	r2, [pc, #84]	@ (8002970 <HAL_TIM_MspPostInit+0xfc>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d11e      	bne.n	800295c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800291e:	2300      	movs	r3, #0
 8002920:	60bb      	str	r3, [r7, #8]
 8002922:	4b10      	ldr	r3, [pc, #64]	@ (8002964 <HAL_TIM_MspPostInit+0xf0>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002926:	4a0f      	ldr	r2, [pc, #60]	@ (8002964 <HAL_TIM_MspPostInit+0xf0>)
 8002928:	f043 0302 	orr.w	r3, r3, #2
 800292c:	6313      	str	r3, [r2, #48]	@ 0x30
 800292e:	4b0d      	ldr	r3, [pc, #52]	@ (8002964 <HAL_TIM_MspPostInit+0xf0>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	60bb      	str	r3, [r7, #8]
 8002938:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800293a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800293e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002940:	2302      	movs	r3, #2
 8002942:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002944:	2300      	movs	r3, #0
 8002946:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002948:	2300      	movs	r3, #0
 800294a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800294c:	2303      	movs	r3, #3
 800294e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002950:	f107 0314 	add.w	r3, r7, #20
 8002954:	4619      	mov	r1, r3
 8002956:	4804      	ldr	r0, [pc, #16]	@ (8002968 <HAL_TIM_MspPostInit+0xf4>)
 8002958:	f001 fd6c 	bl	8004434 <HAL_GPIO_Init>
}
 800295c:	bf00      	nop
 800295e:	3728      	adds	r7, #40	@ 0x28
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40023800 	.word	0x40023800
 8002968:	40020400 	.word	0x40020400
 800296c:	40020000 	.word	0x40020000
 8002970:	40014800 	.word	0x40014800

08002974 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b08a      	sub	sp, #40	@ 0x28
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800297c:	f107 0314 	add.w	r3, r7, #20
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	605a      	str	r2, [r3, #4]
 8002986:	609a      	str	r2, [r3, #8]
 8002988:	60da      	str	r2, [r3, #12]
 800298a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a19      	ldr	r2, [pc, #100]	@ (80029f8 <HAL_UART_MspInit+0x84>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d12b      	bne.n	80029ee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	613b      	str	r3, [r7, #16]
 800299a:	4b18      	ldr	r3, [pc, #96]	@ (80029fc <HAL_UART_MspInit+0x88>)
 800299c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299e:	4a17      	ldr	r2, [pc, #92]	@ (80029fc <HAL_UART_MspInit+0x88>)
 80029a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80029a6:	4b15      	ldr	r3, [pc, #84]	@ (80029fc <HAL_UART_MspInit+0x88>)
 80029a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ae:	613b      	str	r3, [r7, #16]
 80029b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	4b11      	ldr	r3, [pc, #68]	@ (80029fc <HAL_UART_MspInit+0x88>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ba:	4a10      	ldr	r2, [pc, #64]	@ (80029fc <HAL_UART_MspInit+0x88>)
 80029bc:	f043 0301 	orr.w	r3, r3, #1
 80029c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80029c2:	4b0e      	ldr	r3, [pc, #56]	@ (80029fc <HAL_UART_MspInit+0x88>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80029ce:	230c      	movs	r3, #12
 80029d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d2:	2302      	movs	r3, #2
 80029d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029da:	2303      	movs	r3, #3
 80029dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029de:	2307      	movs	r3, #7
 80029e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e2:	f107 0314 	add.w	r3, r7, #20
 80029e6:	4619      	mov	r1, r3
 80029e8:	4805      	ldr	r0, [pc, #20]	@ (8002a00 <HAL_UART_MspInit+0x8c>)
 80029ea:	f001 fd23 	bl	8004434 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80029ee:	bf00      	nop
 80029f0:	3728      	adds	r7, #40	@ 0x28
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40004400 	.word	0x40004400
 80029fc:	40023800 	.word	0x40023800
 8002a00:	40020000 	.word	0x40020000

08002a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a08:	bf00      	nop
 8002a0a:	e7fd      	b.n	8002a08 <NMI_Handler+0x4>

08002a0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a10:	bf00      	nop
 8002a12:	e7fd      	b.n	8002a10 <HardFault_Handler+0x4>

08002a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a18:	bf00      	nop
 8002a1a:	e7fd      	b.n	8002a18 <MemManage_Handler+0x4>

08002a1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a20:	bf00      	nop
 8002a22:	e7fd      	b.n	8002a20 <BusFault_Handler+0x4>

08002a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a28:	bf00      	nop
 8002a2a:	e7fd      	b.n	8002a28 <UsageFault_Handler+0x4>

08002a2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a30:	bf00      	nop
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr

08002a3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a3e:	bf00      	nop
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a4c:	bf00      	nop
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a5a:	f000 f94f 	bl	8002cfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a5e:	bf00      	nop
 8002a60:	bd80      	pop	{r7, pc}
	...

08002a64 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002a68:	4802      	ldr	r0, [pc, #8]	@ (8002a74 <DMA2_Stream0_IRQHandler+0x10>)
 8002a6a:	f001 fa79 	bl	8003f60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002a6e:	bf00      	nop
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	20001fd8 	.word	0x20001fd8

08002a78 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002a7c:	4802      	ldr	r0, [pc, #8]	@ (8002a88 <DMA2_Stream2_IRQHandler+0x10>)
 8002a7e:	f001 fa6f 	bl	8003f60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002a82:	bf00      	nop
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	20002038 	.word	0x20002038

08002a8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  return 1;
 8002a90:	2301      	movs	r3, #1
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <_kill>:

int _kill(int pid, int sig)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002aa6:	f005 fc49 	bl	800833c <__errno>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2216      	movs	r2, #22
 8002aae:	601a      	str	r2, [r3, #0]
  return -1;
 8002ab0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <_exit>:

void _exit (int status)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f7ff ffe7 	bl	8002a9c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ace:	bf00      	nop
 8002ad0:	e7fd      	b.n	8002ace <_exit+0x12>

08002ad2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b086      	sub	sp, #24
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	60f8      	str	r0, [r7, #12]
 8002ada:	60b9      	str	r1, [r7, #8]
 8002adc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ade:	2300      	movs	r3, #0
 8002ae0:	617b      	str	r3, [r7, #20]
 8002ae2:	e00a      	b.n	8002afa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ae4:	f3af 8000 	nop.w
 8002ae8:	4601      	mov	r1, r0
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	1c5a      	adds	r2, r3, #1
 8002aee:	60ba      	str	r2, [r7, #8]
 8002af0:	b2ca      	uxtb	r2, r1
 8002af2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	3301      	adds	r3, #1
 8002af8:	617b      	str	r3, [r7, #20]
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	dbf0      	blt.n	8002ae4 <_read+0x12>
  }

  return len;
 8002b02:	687b      	ldr	r3, [r7, #4]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3718      	adds	r7, #24
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <_close>:
  }
  return len;
}

int _close(int file)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b34:	605a      	str	r2, [r3, #4]
  return 0;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <_isatty>:

int _isatty(int file)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b4c:	2301      	movs	r3, #1
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	b085      	sub	sp, #20
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	60f8      	str	r0, [r7, #12]
 8002b62:	60b9      	str	r1, [r7, #8]
 8002b64:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3714      	adds	r7, #20
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b7c:	4a14      	ldr	r2, [pc, #80]	@ (8002bd0 <_sbrk+0x5c>)
 8002b7e:	4b15      	ldr	r3, [pc, #84]	@ (8002bd4 <_sbrk+0x60>)
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b88:	4b13      	ldr	r3, [pc, #76]	@ (8002bd8 <_sbrk+0x64>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d102      	bne.n	8002b96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b90:	4b11      	ldr	r3, [pc, #68]	@ (8002bd8 <_sbrk+0x64>)
 8002b92:	4a12      	ldr	r2, [pc, #72]	@ (8002bdc <_sbrk+0x68>)
 8002b94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b96:	4b10      	ldr	r3, [pc, #64]	@ (8002bd8 <_sbrk+0x64>)
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d207      	bcs.n	8002bb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ba4:	f005 fbca 	bl	800833c <__errno>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	220c      	movs	r2, #12
 8002bac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bae:	f04f 33ff 	mov.w	r3, #4294967295
 8002bb2:	e009      	b.n	8002bc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bb4:	4b08      	ldr	r3, [pc, #32]	@ (8002bd8 <_sbrk+0x64>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bba:	4b07      	ldr	r3, [pc, #28]	@ (8002bd8 <_sbrk+0x64>)
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	4a05      	ldr	r2, [pc, #20]	@ (8002bd8 <_sbrk+0x64>)
 8002bc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3718      	adds	r7, #24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	20020000 	.word	0x20020000
 8002bd4:	00000400 	.word	0x00000400
 8002bd8:	20002188 	.word	0x20002188
 8002bdc:	200022e0 	.word	0x200022e0

08002be0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002be4:	4b06      	ldr	r3, [pc, #24]	@ (8002c00 <SystemInit+0x20>)
 8002be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bea:	4a05      	ldr	r2, [pc, #20]	@ (8002c00 <SystemInit+0x20>)
 8002bec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002bf0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bf4:	bf00      	nop
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	e000ed00 	.word	0xe000ed00

08002c04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c3c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002c08:	f7ff ffea 	bl	8002be0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c0c:	480c      	ldr	r0, [pc, #48]	@ (8002c40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c0e:	490d      	ldr	r1, [pc, #52]	@ (8002c44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c10:	4a0d      	ldr	r2, [pc, #52]	@ (8002c48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c14:	e002      	b.n	8002c1c <LoopCopyDataInit>

08002c16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c1a:	3304      	adds	r3, #4

08002c1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c20:	d3f9      	bcc.n	8002c16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c22:	4a0a      	ldr	r2, [pc, #40]	@ (8002c4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c24:	4c0a      	ldr	r4, [pc, #40]	@ (8002c50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c28:	e001      	b.n	8002c2e <LoopFillZerobss>

08002c2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c2c:	3204      	adds	r2, #4

08002c2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c30:	d3fb      	bcc.n	8002c2a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002c32:	f005 fb89 	bl	8008348 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c36:	f7fe ff65 	bl	8001b04 <main>
  bx  lr    
 8002c3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c44:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002c48:	0801e3e0 	.word	0x0801e3e0
  ldr r2, =_sbss
 8002c4c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002c50:	200022dc 	.word	0x200022dc

08002c54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c54:	e7fe      	b.n	8002c54 <ADC_IRQHandler>
	...

08002c58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c5c:	4b0e      	ldr	r3, [pc, #56]	@ (8002c98 <HAL_Init+0x40>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a0d      	ldr	r2, [pc, #52]	@ (8002c98 <HAL_Init+0x40>)
 8002c62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c68:	4b0b      	ldr	r3, [pc, #44]	@ (8002c98 <HAL_Init+0x40>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a0a      	ldr	r2, [pc, #40]	@ (8002c98 <HAL_Init+0x40>)
 8002c6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c74:	4b08      	ldr	r3, [pc, #32]	@ (8002c98 <HAL_Init+0x40>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a07      	ldr	r2, [pc, #28]	@ (8002c98 <HAL_Init+0x40>)
 8002c7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c80:	2003      	movs	r0, #3
 8002c82:	f000 ff0f 	bl	8003aa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c86:	2000      	movs	r0, #0
 8002c88:	f000 f808 	bl	8002c9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c8c:	f7ff fc36 	bl	80024fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40023c00 	.word	0x40023c00

08002c9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ca4:	4b12      	ldr	r3, [pc, #72]	@ (8002cf0 <HAL_InitTick+0x54>)
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	4b12      	ldr	r3, [pc, #72]	@ (8002cf4 <HAL_InitTick+0x58>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	4619      	mov	r1, r3
 8002cae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002cb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 ff27 	bl	8003b0e <HAL_SYSTICK_Config>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e00e      	b.n	8002ce8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b0f      	cmp	r3, #15
 8002cce:	d80a      	bhi.n	8002ce6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cd8:	f000 feef 	bl	8003aba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cdc:	4a06      	ldr	r2, [pc, #24]	@ (8002cf8 <HAL_InitTick+0x5c>)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	e000      	b.n	8002ce8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	20000000 	.word	0x20000000
 8002cf4:	20000008 	.word	0x20000008
 8002cf8:	20000004 	.word	0x20000004

08002cfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d00:	4b06      	ldr	r3, [pc, #24]	@ (8002d1c <HAL_IncTick+0x20>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	461a      	mov	r2, r3
 8002d06:	4b06      	ldr	r3, [pc, #24]	@ (8002d20 <HAL_IncTick+0x24>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	4a04      	ldr	r2, [pc, #16]	@ (8002d20 <HAL_IncTick+0x24>)
 8002d0e:	6013      	str	r3, [r2, #0]
}
 8002d10:	bf00      	nop
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	20000008 	.word	0x20000008
 8002d20:	2000218c 	.word	0x2000218c

08002d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  return uwTick;
 8002d28:	4b03      	ldr	r3, [pc, #12]	@ (8002d38 <HAL_GetTick+0x14>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	2000218c 	.word	0x2000218c

08002d3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d44:	f7ff ffee 	bl	8002d24 <HAL_GetTick>
 8002d48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d54:	d005      	beq.n	8002d62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d56:	4b0a      	ldr	r3, [pc, #40]	@ (8002d80 <HAL_Delay+0x44>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4413      	add	r3, r2
 8002d60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d62:	bf00      	nop
 8002d64:	f7ff ffde 	bl	8002d24 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d8f7      	bhi.n	8002d64 <HAL_Delay+0x28>
  {
  }
}
 8002d74:	bf00      	nop
 8002d76:	bf00      	nop
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	20000008 	.word	0x20000008

08002d84 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e033      	b.n	8002e02 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d109      	bne.n	8002db6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f7ff fbd2 	bl	800254c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dba:	f003 0310 	and.w	r3, r3, #16
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d118      	bne.n	8002df4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002dca:	f023 0302 	bic.w	r3, r3, #2
 8002dce:	f043 0202 	orr.w	r2, r3, #2
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 fc16 	bl	8003608 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de6:	f023 0303 	bic.w	r3, r3, #3
 8002dea:	f043 0201 	orr.w	r2, r3, #1
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	641a      	str	r2, [r3, #64]	@ 0x40
 8002df2:	e001      	b.n	8002df8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
	...

08002e0c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002e14:	2300      	movs	r3, #0
 8002e16:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d101      	bne.n	8002e26 <HAL_ADC_Start+0x1a>
 8002e22:	2302      	movs	r3, #2
 8002e24:	e0b2      	b.n	8002f8c <HAL_ADC_Start+0x180>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d018      	beq.n	8002e6e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689a      	ldr	r2, [r3, #8]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0201 	orr.w	r2, r2, #1
 8002e4a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e4c:	4b52      	ldr	r3, [pc, #328]	@ (8002f98 <HAL_ADC_Start+0x18c>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a52      	ldr	r2, [pc, #328]	@ (8002f9c <HAL_ADC_Start+0x190>)
 8002e52:	fba2 2303 	umull	r2, r3, r2, r3
 8002e56:	0c9a      	lsrs	r2, r3, #18
 8002e58:	4613      	mov	r3, r2
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	4413      	add	r3, r2
 8002e5e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002e60:	e002      	b.n	8002e68 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	3b01      	subs	r3, #1
 8002e66:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1f9      	bne.n	8002e62 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d17a      	bne.n	8002f72 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e80:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002e84:	f023 0301 	bic.w	r3, r3, #1
 8002e88:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d007      	beq.n	8002eae <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002ea6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002eb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002eba:	d106      	bne.n	8002eca <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec0:	f023 0206 	bic.w	r2, r3, #6
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	645a      	str	r2, [r3, #68]	@ 0x44
 8002ec8:	e002      	b.n	8002ed0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ed8:	4b31      	ldr	r3, [pc, #196]	@ (8002fa0 <HAL_ADC_Start+0x194>)
 8002eda:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002ee4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f003 031f 	and.w	r3, r3, #31
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d12a      	bne.n	8002f48 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a2b      	ldr	r2, [pc, #172]	@ (8002fa4 <HAL_ADC_Start+0x198>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d015      	beq.n	8002f28 <HAL_ADC_Start+0x11c>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a29      	ldr	r2, [pc, #164]	@ (8002fa8 <HAL_ADC_Start+0x19c>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d105      	bne.n	8002f12 <HAL_ADC_Start+0x106>
 8002f06:	4b26      	ldr	r3, [pc, #152]	@ (8002fa0 <HAL_ADC_Start+0x194>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f003 031f 	and.w	r3, r3, #31
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00a      	beq.n	8002f28 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a25      	ldr	r2, [pc, #148]	@ (8002fac <HAL_ADC_Start+0x1a0>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d136      	bne.n	8002f8a <HAL_ADC_Start+0x17e>
 8002f1c:	4b20      	ldr	r3, [pc, #128]	@ (8002fa0 <HAL_ADC_Start+0x194>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f003 0310 	and.w	r3, r3, #16
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d130      	bne.n	8002f8a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d129      	bne.n	8002f8a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	689a      	ldr	r2, [r3, #8]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002f44:	609a      	str	r2, [r3, #8]
 8002f46:	e020      	b.n	8002f8a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a15      	ldr	r2, [pc, #84]	@ (8002fa4 <HAL_ADC_Start+0x198>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d11b      	bne.n	8002f8a <HAL_ADC_Start+0x17e>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d114      	bne.n	8002f8a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002f6e:	609a      	str	r2, [r3, #8]
 8002f70:	e00b      	b.n	8002f8a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f76:	f043 0210 	orr.w	r2, r3, #16
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f82:	f043 0201 	orr.w	r2, r3, #1
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3714      	adds	r7, #20
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr
 8002f98:	20000000 	.word	0x20000000
 8002f9c:	431bde83 	.word	0x431bde83
 8002fa0:	40012300 	.word	0x40012300
 8002fa4:	40012000 	.word	0x40012000
 8002fa8:	40012100 	.word	0x40012100
 8002fac:	40012200 	.word	0x40012200

08002fb0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d101      	bne.n	8002fc6 <HAL_ADC_Stop+0x16>
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	e021      	b.n	800300a <HAL_ADC_Stop+0x5a>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 0201 	bic.w	r2, r2, #1
 8002fdc:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d109      	bne.n	8003000 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002ff4:	f023 0301 	bic.w	r3, r3, #1
 8002ff8:	f043 0201 	orr.w	r2, r3, #1
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr

08003016 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b084      	sub	sp, #16
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
 800301e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003020:	2300      	movs	r3, #0
 8003022:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800302e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003032:	d113      	bne.n	800305c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800303e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003042:	d10b      	bne.n	800305c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003048:	f043 0220 	orr.w	r2, r3, #32
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e063      	b.n	8003124 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800305c:	f7ff fe62 	bl	8002d24 <HAL_GetTick>
 8003060:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003062:	e021      	b.n	80030a8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306a:	d01d      	beq.n	80030a8 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d007      	beq.n	8003082 <HAL_ADC_PollForConversion+0x6c>
 8003072:	f7ff fe57 	bl	8002d24 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	429a      	cmp	r2, r3
 8003080:	d212      	bcs.n	80030a8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0302 	and.w	r3, r3, #2
 800308c:	2b02      	cmp	r3, #2
 800308e:	d00b      	beq.n	80030a8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003094:	f043 0204 	orr.w	r2, r3, #4
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e03d      	b.n	8003124 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d1d6      	bne.n	8003064 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f06f 0212 	mvn.w	r2, #18
 80030be:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d123      	bne.n	8003122 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d11f      	bne.n	8003122 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e8:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d006      	beq.n	80030fe <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d111      	bne.n	8003122 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003102:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d105      	bne.n	8003122 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311a:	f043 0201 	orr.w	r2, r3, #1
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003138:	2300      	movs	r3, #0
 800313a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003142:	2b01      	cmp	r3, #1
 8003144:	d101      	bne.n	800314a <HAL_ADC_Start_DMA+0x1e>
 8003146:	2302      	movs	r3, #2
 8003148:	e0e9      	b.n	800331e <HAL_ADC_Start_DMA+0x1f2>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b01      	cmp	r3, #1
 800315e:	d018      	beq.n	8003192 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689a      	ldr	r2, [r3, #8]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f042 0201 	orr.w	r2, r2, #1
 800316e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003170:	4b6d      	ldr	r3, [pc, #436]	@ (8003328 <HAL_ADC_Start_DMA+0x1fc>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a6d      	ldr	r2, [pc, #436]	@ (800332c <HAL_ADC_Start_DMA+0x200>)
 8003176:	fba2 2303 	umull	r2, r3, r2, r3
 800317a:	0c9a      	lsrs	r2, r3, #18
 800317c:	4613      	mov	r3, r2
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	4413      	add	r3, r2
 8003182:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003184:	e002      	b.n	800318c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	3b01      	subs	r3, #1
 800318a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1f9      	bne.n	8003186 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800319c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031a0:	d107      	bne.n	80031b2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	689a      	ldr	r2, [r3, #8]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031b0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	2b01      	cmp	r3, #1
 80031be:	f040 80a1 	bne.w	8003304 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80031ca:	f023 0301 	bic.w	r3, r3, #1
 80031ce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d007      	beq.n	80031f4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80031ec:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003200:	d106      	bne.n	8003210 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003206:	f023 0206 	bic.w	r2, r3, #6
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	645a      	str	r2, [r3, #68]	@ 0x44
 800320e:	e002      	b.n	8003216 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800321e:	4b44      	ldr	r3, [pc, #272]	@ (8003330 <HAL_ADC_Start_DMA+0x204>)
 8003220:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003226:	4a43      	ldr	r2, [pc, #268]	@ (8003334 <HAL_ADC_Start_DMA+0x208>)
 8003228:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800322e:	4a42      	ldr	r2, [pc, #264]	@ (8003338 <HAL_ADC_Start_DMA+0x20c>)
 8003230:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003236:	4a41      	ldr	r2, [pc, #260]	@ (800333c <HAL_ADC_Start_DMA+0x210>)
 8003238:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003242:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003252:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689a      	ldr	r2, [r3, #8]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003262:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	334c      	adds	r3, #76	@ 0x4c
 800326e:	4619      	mov	r1, r3
 8003270:	68ba      	ldr	r2, [r7, #8]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f000 fe1c 	bl	8003eb0 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f003 031f 	and.w	r3, r3, #31
 8003280:	2b00      	cmp	r3, #0
 8003282:	d12a      	bne.n	80032da <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a2d      	ldr	r2, [pc, #180]	@ (8003340 <HAL_ADC_Start_DMA+0x214>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d015      	beq.n	80032ba <HAL_ADC_Start_DMA+0x18e>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a2c      	ldr	r2, [pc, #176]	@ (8003344 <HAL_ADC_Start_DMA+0x218>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d105      	bne.n	80032a4 <HAL_ADC_Start_DMA+0x178>
 8003298:	4b25      	ldr	r3, [pc, #148]	@ (8003330 <HAL_ADC_Start_DMA+0x204>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f003 031f 	and.w	r3, r3, #31
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00a      	beq.n	80032ba <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a27      	ldr	r2, [pc, #156]	@ (8003348 <HAL_ADC_Start_DMA+0x21c>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d136      	bne.n	800331c <HAL_ADC_Start_DMA+0x1f0>
 80032ae:	4b20      	ldr	r3, [pc, #128]	@ (8003330 <HAL_ADC_Start_DMA+0x204>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f003 0310 	and.w	r3, r3, #16
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d130      	bne.n	800331c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d129      	bne.n	800331c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689a      	ldr	r2, [r3, #8]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80032d6:	609a      	str	r2, [r3, #8]
 80032d8:	e020      	b.n	800331c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a18      	ldr	r2, [pc, #96]	@ (8003340 <HAL_ADC_Start_DMA+0x214>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d11b      	bne.n	800331c <HAL_ADC_Start_DMA+0x1f0>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d114      	bne.n	800331c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003300:	609a      	str	r2, [r3, #8]
 8003302:	e00b      	b.n	800331c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003308:	f043 0210 	orr.w	r2, r3, #16
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003314:	f043 0201 	orr.w	r2, r3, #1
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3718      	adds	r7, #24
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	20000000 	.word	0x20000000
 800332c:	431bde83 	.word	0x431bde83
 8003330:	40012300 	.word	0x40012300
 8003334:	08003801 	.word	0x08003801
 8003338:	080038bb 	.word	0x080038bb
 800333c:	080038d7 	.word	0x080038d7
 8003340:	40012000 	.word	0x40012000
 8003344:	40012100 	.word	0x40012100
 8003348:	40012200 	.word	0x40012200

0800334c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800335a:	4618      	mov	r0, r3
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr

08003366 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003366:	b480      	push	{r7}
 8003368:	b083      	sub	sp, #12
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800336e:	bf00      	nop
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr

0800337a <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800337a:	b480      	push	{r7}
 800337c:	b083      	sub	sp, #12
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003382:	bf00      	nop
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr

0800338e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800338e:	b480      	push	{r7}
 8003390:	b083      	sub	sp, #12
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003396:	bf00      	nop
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
	...

080033a4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80033ae:	2300      	movs	r3, #0
 80033b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d101      	bne.n	80033c0 <HAL_ADC_ConfigChannel+0x1c>
 80033bc:	2302      	movs	r3, #2
 80033be:	e113      	b.n	80035e8 <HAL_ADC_ConfigChannel+0x244>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2b09      	cmp	r3, #9
 80033ce:	d925      	bls.n	800341c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68d9      	ldr	r1, [r3, #12]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	b29b      	uxth	r3, r3
 80033dc:	461a      	mov	r2, r3
 80033de:	4613      	mov	r3, r2
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	4413      	add	r3, r2
 80033e4:	3b1e      	subs	r3, #30
 80033e6:	2207      	movs	r2, #7
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	43da      	mvns	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	400a      	ands	r2, r1
 80033f4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68d9      	ldr	r1, [r3, #12]
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	b29b      	uxth	r3, r3
 8003406:	4618      	mov	r0, r3
 8003408:	4603      	mov	r3, r0
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	4403      	add	r3, r0
 800340e:	3b1e      	subs	r3, #30
 8003410:	409a      	lsls	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	430a      	orrs	r2, r1
 8003418:	60da      	str	r2, [r3, #12]
 800341a:	e022      	b.n	8003462 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6919      	ldr	r1, [r3, #16]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	b29b      	uxth	r3, r3
 8003428:	461a      	mov	r2, r3
 800342a:	4613      	mov	r3, r2
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	4413      	add	r3, r2
 8003430:	2207      	movs	r2, #7
 8003432:	fa02 f303 	lsl.w	r3, r2, r3
 8003436:	43da      	mvns	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	400a      	ands	r2, r1
 800343e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6919      	ldr	r1, [r3, #16]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	689a      	ldr	r2, [r3, #8]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	b29b      	uxth	r3, r3
 8003450:	4618      	mov	r0, r3
 8003452:	4603      	mov	r3, r0
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	4403      	add	r3, r0
 8003458:	409a      	lsls	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	2b06      	cmp	r3, #6
 8003468:	d824      	bhi.n	80034b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	4613      	mov	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4413      	add	r3, r2
 800347a:	3b05      	subs	r3, #5
 800347c:	221f      	movs	r2, #31
 800347e:	fa02 f303 	lsl.w	r3, r2, r3
 8003482:	43da      	mvns	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	400a      	ands	r2, r1
 800348a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	b29b      	uxth	r3, r3
 8003498:	4618      	mov	r0, r3
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	4613      	mov	r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	4413      	add	r3, r2
 80034a4:	3b05      	subs	r3, #5
 80034a6:	fa00 f203 	lsl.w	r2, r0, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80034b2:	e04c      	b.n	800354e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	2b0c      	cmp	r3, #12
 80034ba:	d824      	bhi.n	8003506 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685a      	ldr	r2, [r3, #4]
 80034c6:	4613      	mov	r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	4413      	add	r3, r2
 80034cc:	3b23      	subs	r3, #35	@ 0x23
 80034ce:	221f      	movs	r2, #31
 80034d0:	fa02 f303 	lsl.w	r3, r2, r3
 80034d4:	43da      	mvns	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	400a      	ands	r2, r1
 80034dc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	4618      	mov	r0, r3
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	4613      	mov	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4413      	add	r3, r2
 80034f6:	3b23      	subs	r3, #35	@ 0x23
 80034f8:	fa00 f203 	lsl.w	r2, r0, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	430a      	orrs	r2, r1
 8003502:	631a      	str	r2, [r3, #48]	@ 0x30
 8003504:	e023      	b.n	800354e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	4613      	mov	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4413      	add	r3, r2
 8003516:	3b41      	subs	r3, #65	@ 0x41
 8003518:	221f      	movs	r2, #31
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	43da      	mvns	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	400a      	ands	r2, r1
 8003526:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	b29b      	uxth	r3, r3
 8003534:	4618      	mov	r0, r3
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	4613      	mov	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	3b41      	subs	r3, #65	@ 0x41
 8003542:	fa00 f203 	lsl.w	r2, r0, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	430a      	orrs	r2, r1
 800354c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800354e:	4b29      	ldr	r3, [pc, #164]	@ (80035f4 <HAL_ADC_ConfigChannel+0x250>)
 8003550:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a28      	ldr	r2, [pc, #160]	@ (80035f8 <HAL_ADC_ConfigChannel+0x254>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d10f      	bne.n	800357c <HAL_ADC_ConfigChannel+0x1d8>
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2b12      	cmp	r3, #18
 8003562:	d10b      	bne.n	800357c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a1d      	ldr	r2, [pc, #116]	@ (80035f8 <HAL_ADC_ConfigChannel+0x254>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d12b      	bne.n	80035de <HAL_ADC_ConfigChannel+0x23a>
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a1c      	ldr	r2, [pc, #112]	@ (80035fc <HAL_ADC_ConfigChannel+0x258>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d003      	beq.n	8003598 <HAL_ADC_ConfigChannel+0x1f4>
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2b11      	cmp	r3, #17
 8003596:	d122      	bne.n	80035de <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a11      	ldr	r2, [pc, #68]	@ (80035fc <HAL_ADC_ConfigChannel+0x258>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d111      	bne.n	80035de <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035ba:	4b11      	ldr	r3, [pc, #68]	@ (8003600 <HAL_ADC_ConfigChannel+0x25c>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a11      	ldr	r2, [pc, #68]	@ (8003604 <HAL_ADC_ConfigChannel+0x260>)
 80035c0:	fba2 2303 	umull	r2, r3, r2, r3
 80035c4:	0c9a      	lsrs	r2, r3, #18
 80035c6:	4613      	mov	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4413      	add	r3, r2
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80035d0:	e002      	b.n	80035d8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	3b01      	subs	r3, #1
 80035d6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1f9      	bne.n	80035d2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3714      	adds	r7, #20
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr
 80035f4:	40012300 	.word	0x40012300
 80035f8:	40012000 	.word	0x40012000
 80035fc:	10000012 	.word	0x10000012
 8003600:	20000000 	.word	0x20000000
 8003604:	431bde83 	.word	0x431bde83

08003608 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003610:	4b79      	ldr	r3, [pc, #484]	@ (80037f8 <ADC_Init+0x1f0>)
 8003612:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	431a      	orrs	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800363c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6859      	ldr	r1, [r3, #4]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	021a      	lsls	r2, r3, #8
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	430a      	orrs	r2, r1
 8003650:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003660:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6859      	ldr	r1, [r3, #4]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	430a      	orrs	r2, r1
 8003672:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689a      	ldr	r2, [r3, #8]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003682:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6899      	ldr	r1, [r3, #8]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	68da      	ldr	r2, [r3, #12]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	430a      	orrs	r2, r1
 8003694:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800369a:	4a58      	ldr	r2, [pc, #352]	@ (80037fc <ADC_Init+0x1f4>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d022      	beq.n	80036e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689a      	ldr	r2, [r3, #8]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80036ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6899      	ldr	r1, [r3, #8]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80036d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6899      	ldr	r1, [r3, #8]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	609a      	str	r2, [r3, #8]
 80036e4:	e00f      	b.n	8003706 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	689a      	ldr	r2, [r3, #8]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80036f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003704:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 0202 	bic.w	r2, r2, #2
 8003714:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	6899      	ldr	r1, [r3, #8]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	7e1b      	ldrb	r3, [r3, #24]
 8003720:	005a      	lsls	r2, r3, #1
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	430a      	orrs	r2, r1
 8003728:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d01b      	beq.n	800376c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	685a      	ldr	r2, [r3, #4]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003742:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003752:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6859      	ldr	r1, [r3, #4]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375e:	3b01      	subs	r3, #1
 8003760:	035a      	lsls	r2, r3, #13
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	430a      	orrs	r2, r1
 8003768:	605a      	str	r2, [r3, #4]
 800376a:	e007      	b.n	800377c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	685a      	ldr	r2, [r3, #4]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800377a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800378a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	3b01      	subs	r3, #1
 8003798:	051a      	lsls	r2, r3, #20
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	430a      	orrs	r2, r1
 80037a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80037b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6899      	ldr	r1, [r3, #8]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80037be:	025a      	lsls	r2, r3, #9
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689a      	ldr	r2, [r3, #8]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6899      	ldr	r1, [r3, #8]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	029a      	lsls	r2, r3, #10
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	430a      	orrs	r2, r1
 80037ea:	609a      	str	r2, [r3, #8]
}
 80037ec:	bf00      	nop
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr
 80037f8:	40012300 	.word	0x40012300
 80037fc:	0f000001 	.word	0x0f000001

08003800 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800380c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003812:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003816:	2b00      	cmp	r3, #0
 8003818:	d13c      	bne.n	8003894 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d12b      	bne.n	800388c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003838:	2b00      	cmp	r3, #0
 800383a:	d127      	bne.n	800388c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003842:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003846:	2b00      	cmp	r3, #0
 8003848:	d006      	beq.n	8003858 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003854:	2b00      	cmp	r3, #0
 8003856:	d119      	bne.n	800388c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f022 0220 	bic.w	r2, r2, #32
 8003866:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800386c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003878:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d105      	bne.n	800388c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003884:	f043 0201 	orr.w	r2, r3, #1
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	f7ff fd6a 	bl	8003366 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003892:	e00e      	b.n	80038b2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003898:	f003 0310 	and.w	r3, r3, #16
 800389c:	2b00      	cmp	r3, #0
 800389e:	d003      	beq.n	80038a8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f7ff fd74 	bl	800338e <HAL_ADC_ErrorCallback>
}
 80038a6:	e004      	b.n	80038b2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	4798      	blx	r3
}
 80038b2:	bf00      	nop
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b084      	sub	sp, #16
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038c6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f7ff fd56 	bl	800337a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038ce:	bf00      	nop
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b084      	sub	sp, #16
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038e2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2240      	movs	r2, #64	@ 0x40
 80038e8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ee:	f043 0204 	orr.w	r2, r3, #4
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f7ff fd49 	bl	800338e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038fc:	bf00      	nop
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f003 0307 	and.w	r3, r3, #7
 8003912:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003914:	4b0c      	ldr	r3, [pc, #48]	@ (8003948 <__NVIC_SetPriorityGrouping+0x44>)
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800391a:	68ba      	ldr	r2, [r7, #8]
 800391c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003920:	4013      	ands	r3, r2
 8003922:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800392c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003930:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003934:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003936:	4a04      	ldr	r2, [pc, #16]	@ (8003948 <__NVIC_SetPriorityGrouping+0x44>)
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	60d3      	str	r3, [r2, #12]
}
 800393c:	bf00      	nop
 800393e:	3714      	adds	r7, #20
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr
 8003948:	e000ed00 	.word	0xe000ed00

0800394c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003950:	4b04      	ldr	r3, [pc, #16]	@ (8003964 <__NVIC_GetPriorityGrouping+0x18>)
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	0a1b      	lsrs	r3, r3, #8
 8003956:	f003 0307 	and.w	r3, r3, #7
}
 800395a:	4618      	mov	r0, r3
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr
 8003964:	e000ed00 	.word	0xe000ed00

08003968 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	4603      	mov	r3, r0
 8003970:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003976:	2b00      	cmp	r3, #0
 8003978:	db0b      	blt.n	8003992 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800397a:	79fb      	ldrb	r3, [r7, #7]
 800397c:	f003 021f 	and.w	r2, r3, #31
 8003980:	4907      	ldr	r1, [pc, #28]	@ (80039a0 <__NVIC_EnableIRQ+0x38>)
 8003982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003986:	095b      	lsrs	r3, r3, #5
 8003988:	2001      	movs	r0, #1
 800398a:	fa00 f202 	lsl.w	r2, r0, r2
 800398e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003992:	bf00      	nop
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	e000e100 	.word	0xe000e100

080039a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	4603      	mov	r3, r0
 80039ac:	6039      	str	r1, [r7, #0]
 80039ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	db0a      	blt.n	80039ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	490c      	ldr	r1, [pc, #48]	@ (80039f0 <__NVIC_SetPriority+0x4c>)
 80039be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c2:	0112      	lsls	r2, r2, #4
 80039c4:	b2d2      	uxtb	r2, r2
 80039c6:	440b      	add	r3, r1
 80039c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039cc:	e00a      	b.n	80039e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	b2da      	uxtb	r2, r3
 80039d2:	4908      	ldr	r1, [pc, #32]	@ (80039f4 <__NVIC_SetPriority+0x50>)
 80039d4:	79fb      	ldrb	r3, [r7, #7]
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	3b04      	subs	r3, #4
 80039dc:	0112      	lsls	r2, r2, #4
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	440b      	add	r3, r1
 80039e2:	761a      	strb	r2, [r3, #24]
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr
 80039f0:	e000e100 	.word	0xe000e100
 80039f4:	e000ed00 	.word	0xe000ed00

080039f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b089      	sub	sp, #36	@ 0x24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f003 0307 	and.w	r3, r3, #7
 8003a0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	f1c3 0307 	rsb	r3, r3, #7
 8003a12:	2b04      	cmp	r3, #4
 8003a14:	bf28      	it	cs
 8003a16:	2304      	movcs	r3, #4
 8003a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	2b06      	cmp	r3, #6
 8003a20:	d902      	bls.n	8003a28 <NVIC_EncodePriority+0x30>
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	3b03      	subs	r3, #3
 8003a26:	e000      	b.n	8003a2a <NVIC_EncodePriority+0x32>
 8003a28:	2300      	movs	r3, #0
 8003a2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	fa02 f303 	lsl.w	r3, r2, r3
 8003a36:	43da      	mvns	r2, r3
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	401a      	ands	r2, r3
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a40:	f04f 31ff 	mov.w	r1, #4294967295
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	fa01 f303 	lsl.w	r3, r1, r3
 8003a4a:	43d9      	mvns	r1, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a50:	4313      	orrs	r3, r2
         );
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3724      	adds	r7, #36	@ 0x24
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
	...

08003a60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a70:	d301      	bcc.n	8003a76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a72:	2301      	movs	r3, #1
 8003a74:	e00f      	b.n	8003a96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a76:	4a0a      	ldr	r2, [pc, #40]	@ (8003aa0 <SysTick_Config+0x40>)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a7e:	210f      	movs	r1, #15
 8003a80:	f04f 30ff 	mov.w	r0, #4294967295
 8003a84:	f7ff ff8e 	bl	80039a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a88:	4b05      	ldr	r3, [pc, #20]	@ (8003aa0 <SysTick_Config+0x40>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a8e:	4b04      	ldr	r3, [pc, #16]	@ (8003aa0 <SysTick_Config+0x40>)
 8003a90:	2207      	movs	r2, #7
 8003a92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	e000e010 	.word	0xe000e010

08003aa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f7ff ff29 	bl	8003904 <__NVIC_SetPriorityGrouping>
}
 8003ab2:	bf00      	nop
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b086      	sub	sp, #24
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	60b9      	str	r1, [r7, #8]
 8003ac4:	607a      	str	r2, [r7, #4]
 8003ac6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003acc:	f7ff ff3e 	bl	800394c <__NVIC_GetPriorityGrouping>
 8003ad0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	68b9      	ldr	r1, [r7, #8]
 8003ad6:	6978      	ldr	r0, [r7, #20]
 8003ad8:	f7ff ff8e 	bl	80039f8 <NVIC_EncodePriority>
 8003adc:	4602      	mov	r2, r0
 8003ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ae2:	4611      	mov	r1, r2
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7ff ff5d 	bl	80039a4 <__NVIC_SetPriority>
}
 8003aea:	bf00      	nop
 8003aec:	3718      	adds	r7, #24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b082      	sub	sp, #8
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	4603      	mov	r3, r0
 8003afa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7ff ff31 	bl	8003968 <__NVIC_EnableIRQ>
}
 8003b06:	bf00      	nop
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b082      	sub	sp, #8
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f7ff ffa2 	bl	8003a60 <SysTick_Config>
 8003b1c:	4603      	mov	r3, r0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b082      	sub	sp, #8
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d101      	bne.n	8003b38 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e014      	b.n	8003b62 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	791b      	ldrb	r3, [r3, #4]
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d105      	bne.n	8003b4e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7fe fe0d 	bl	8002768 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2202      	movs	r2, #2
 8003b52:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b083      	sub	sp, #12
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
 8003b72:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e046      	b.n	8003c0c <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	795b      	ldrb	r3, [r3, #5]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d101      	bne.n	8003b8a <HAL_DAC_Start+0x20>
 8003b86:	2302      	movs	r3, #2
 8003b88:	e040      	b.n	8003c0c <HAL_DAC_Start+0xa2>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2202      	movs	r2, #2
 8003b94:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	6819      	ldr	r1, [r3, #0]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	f003 0310 	and.w	r3, r3, #16
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	409a      	lsls	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10f      	bne.n	8003bd4 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8003bbe:	2b3c      	cmp	r3, #60	@ 0x3c
 8003bc0:	d11d      	bne.n	8003bfe <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f042 0201 	orr.w	r2, r2, #1
 8003bd0:	605a      	str	r2, [r3, #4]
 8003bd2:	e014      	b.n	8003bfe <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	f003 0310 	and.w	r3, r3, #16
 8003be4:	213c      	movs	r1, #60	@ 0x3c
 8003be6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d107      	bne.n	8003bfe <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f042 0202 	orr.w	r2, r2, #2
 8003bfc:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b087      	sub	sp, #28
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
 8003c24:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003c26:	2300      	movs	r3, #0
 8003c28:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e015      	b.n	8003c60 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d105      	bne.n	8003c4c <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4413      	add	r3, r2
 8003c46:	3308      	adds	r3, #8
 8003c48:	617b      	str	r3, [r7, #20]
 8003c4a:	e004      	b.n	8003c56 <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4413      	add	r3, r2
 8003c52:	3314      	adds	r3, #20
 8003c54:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	461a      	mov	r2, r3
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	371c      	adds	r7, #28
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <HAL_DAC_GetValue>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(const DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  uint32_t result = 0;
 8003c76:	2300      	movs	r3, #0
 8003c78:	60fb      	str	r3, [r7, #12]
  assert_param(hdac != NULL);

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  if (Channel == DAC_CHANNEL_1)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d104      	bne.n	8003c8a <HAL_DAC_GetValue+0x1e>
  {
    result = hdac->Instance->DOR1;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c86:	60fb      	str	r3, [r7, #12]
 8003c88:	e003      	b.n	8003c92 <HAL_DAC_GetValue+0x26>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    result = hdac->Instance->DOR2;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c90:	60fb      	str	r3, [r7, #12]
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  /* Returns the DAC channel data output register value */
  return result;
 8003c92:	68fb      	ldr	r3, [r7, #12]
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3714      	adds	r7, #20
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b089      	sub	sp, #36	@ 0x24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cac:	2300      	movs	r3, #0
 8003cae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d002      	beq.n	8003cbc <HAL_DAC_ConfigChannel+0x1c>
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d101      	bne.n	8003cc0 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e042      	b.n	8003d46 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	795b      	ldrb	r3, [r3, #5]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d101      	bne.n	8003ccc <HAL_DAC_ConfigChannel+0x2c>
 8003cc8:	2302      	movs	r3, #2
 8003cca:	e03c      	b.n	8003d46 <HAL_DAC_ConfigChannel+0xa6>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2202      	movs	r2, #2
 8003cd6:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f003 0310 	and.w	r3, r3, #16
 8003ce6:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003cea:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8003cee:	43db      	mvns	r3, r3
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f003 0310 	and.w	r3, r3, #16
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0e:	69ba      	ldr	r2, [r7, #24]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6819      	ldr	r1, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f003 0310 	and.w	r3, r3, #16
 8003d28:	22c0      	movs	r2, #192	@ 0xc0
 8003d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2e:	43da      	mvns	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	400a      	ands	r2, r1
 8003d36:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003d44:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3724      	adds	r7, #36	@ 0x24
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
	...

08003d54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003d60:	f7fe ffe0 	bl	8002d24 <HAL_GetTick>
 8003d64:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d101      	bne.n	8003d70 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e099      	b.n	8003ea4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2202      	movs	r2, #2
 8003d74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f022 0201 	bic.w	r2, r2, #1
 8003d8e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d90:	e00f      	b.n	8003db2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d92:	f7fe ffc7 	bl	8002d24 <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b05      	cmp	r3, #5
 8003d9e:	d908      	bls.n	8003db2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2220      	movs	r2, #32
 8003da4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2203      	movs	r2, #3
 8003daa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e078      	b.n	8003ea4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1e8      	bne.n	8003d92 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003dc8:	697a      	ldr	r2, [r7, #20]
 8003dca:	4b38      	ldr	r3, [pc, #224]	@ (8003eac <HAL_DMA_Init+0x158>)
 8003dcc:	4013      	ands	r3, r2
 8003dce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003dde:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003df6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a1b      	ldr	r3, [r3, #32]
 8003dfc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e08:	2b04      	cmp	r3, #4
 8003e0a:	d107      	bne.n	8003e1c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e14:	4313      	orrs	r3, r2
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	f023 0307 	bic.w	r3, r3, #7
 8003e32:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e42:	2b04      	cmp	r3, #4
 8003e44:	d117      	bne.n	8003e76 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00e      	beq.n	8003e76 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 fa6f 	bl	800433c <DMA_CheckFifoParam>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d008      	beq.n	8003e76 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2240      	movs	r2, #64	@ 0x40
 8003e68:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003e72:	2301      	movs	r3, #1
 8003e74:	e016      	b.n	8003ea4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 fa26 	bl	80042d0 <DMA_CalcBaseAndBitshift>
 8003e84:	4603      	mov	r3, r0
 8003e86:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e8c:	223f      	movs	r2, #63	@ 0x3f
 8003e8e:	409a      	lsls	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3718      	adds	r7, #24
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	f010803f 	.word	0xf010803f

08003eb0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
 8003ebc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ec6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d101      	bne.n	8003ed6 <HAL_DMA_Start_IT+0x26>
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	e040      	b.n	8003f58 <HAL_DMA_Start_IT+0xa8>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d12f      	bne.n	8003f4a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2202      	movs	r2, #2
 8003eee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	68b9      	ldr	r1, [r7, #8]
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f000 f9b8 	bl	8004274 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f08:	223f      	movs	r2, #63	@ 0x3f
 8003f0a:	409a      	lsls	r2, r3
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f042 0216 	orr.w	r2, r2, #22
 8003f1e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d007      	beq.n	8003f38 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f042 0208 	orr.w	r2, r2, #8
 8003f36:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f042 0201 	orr.w	r2, r2, #1
 8003f46:	601a      	str	r2, [r3, #0]
 8003f48:	e005      	b.n	8003f56 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003f52:	2302      	movs	r3, #2
 8003f54:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3718      	adds	r7, #24
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003f6c:	4b8e      	ldr	r3, [pc, #568]	@ (80041a8 <HAL_DMA_IRQHandler+0x248>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a8e      	ldr	r2, [pc, #568]	@ (80041ac <HAL_DMA_IRQHandler+0x24c>)
 8003f72:	fba2 2303 	umull	r2, r3, r2, r3
 8003f76:	0a9b      	lsrs	r3, r3, #10
 8003f78:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f7e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f8a:	2208      	movs	r2, #8
 8003f8c:	409a      	lsls	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	4013      	ands	r3, r2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d01a      	beq.n	8003fcc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0304 	and.w	r3, r3, #4
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d013      	beq.n	8003fcc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f022 0204 	bic.w	r2, r2, #4
 8003fb2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fb8:	2208      	movs	r2, #8
 8003fba:	409a      	lsls	r2, r3
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fc4:	f043 0201 	orr.w	r2, r3, #1
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	409a      	lsls	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d012      	beq.n	8004002 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00b      	beq.n	8004002 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fee:	2201      	movs	r2, #1
 8003ff0:	409a      	lsls	r2, r3
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ffa:	f043 0202 	orr.w	r2, r3, #2
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004006:	2204      	movs	r2, #4
 8004008:	409a      	lsls	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	4013      	ands	r3, r2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d012      	beq.n	8004038 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00b      	beq.n	8004038 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004024:	2204      	movs	r2, #4
 8004026:	409a      	lsls	r2, r3
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004030:	f043 0204 	orr.w	r2, r3, #4
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800403c:	2210      	movs	r2, #16
 800403e:	409a      	lsls	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	4013      	ands	r3, r2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d043      	beq.n	80040d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0308 	and.w	r3, r3, #8
 8004052:	2b00      	cmp	r3, #0
 8004054:	d03c      	beq.n	80040d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800405a:	2210      	movs	r2, #16
 800405c:	409a      	lsls	r2, r3
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d018      	beq.n	80040a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d108      	bne.n	8004090 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004082:	2b00      	cmp	r3, #0
 8004084:	d024      	beq.n	80040d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	4798      	blx	r3
 800408e:	e01f      	b.n	80040d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004094:	2b00      	cmp	r3, #0
 8004096:	d01b      	beq.n	80040d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	4798      	blx	r3
 80040a0:	e016      	b.n	80040d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d107      	bne.n	80040c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 0208 	bic.w	r2, r2, #8
 80040be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d003      	beq.n	80040d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040d4:	2220      	movs	r2, #32
 80040d6:	409a      	lsls	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	4013      	ands	r3, r2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f000 808f 	beq.w	8004200 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0310 	and.w	r3, r3, #16
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f000 8087 	beq.w	8004200 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040f6:	2220      	movs	r2, #32
 80040f8:	409a      	lsls	r2, r3
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b05      	cmp	r3, #5
 8004108:	d136      	bne.n	8004178 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f022 0216 	bic.w	r2, r2, #22
 8004118:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	695a      	ldr	r2, [r3, #20]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004128:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412e:	2b00      	cmp	r3, #0
 8004130:	d103      	bne.n	800413a <HAL_DMA_IRQHandler+0x1da>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004136:	2b00      	cmp	r3, #0
 8004138:	d007      	beq.n	800414a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f022 0208 	bic.w	r2, r2, #8
 8004148:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800414e:	223f      	movs	r2, #63	@ 0x3f
 8004150:	409a      	lsls	r2, r3
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800416a:	2b00      	cmp	r3, #0
 800416c:	d07e      	beq.n	800426c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	4798      	blx	r3
        }
        return;
 8004176:	e079      	b.n	800426c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d01d      	beq.n	80041c2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d10d      	bne.n	80041b0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004198:	2b00      	cmp	r3, #0
 800419a:	d031      	beq.n	8004200 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	4798      	blx	r3
 80041a4:	e02c      	b.n	8004200 <HAL_DMA_IRQHandler+0x2a0>
 80041a6:	bf00      	nop
 80041a8:	20000000 	.word	0x20000000
 80041ac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d023      	beq.n	8004200 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	4798      	blx	r3
 80041c0:	e01e      	b.n	8004200 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d10f      	bne.n	80041f0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0210 	bic.w	r2, r2, #16
 80041de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d003      	beq.n	8004200 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004204:	2b00      	cmp	r3, #0
 8004206:	d032      	beq.n	800426e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	2b00      	cmp	r3, #0
 8004212:	d022      	beq.n	800425a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2205      	movs	r2, #5
 8004218:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f022 0201 	bic.w	r2, r2, #1
 800422a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	3301      	adds	r3, #1
 8004230:	60bb      	str	r3, [r7, #8]
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	429a      	cmp	r2, r3
 8004236:	d307      	bcc.n	8004248 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1f2      	bne.n	800422c <HAL_DMA_IRQHandler+0x2cc>
 8004246:	e000      	b.n	800424a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004248:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2201      	movs	r2, #1
 800424e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800425e:	2b00      	cmp	r3, #0
 8004260:	d005      	beq.n	800426e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	4798      	blx	r3
 800426a:	e000      	b.n	800426e <HAL_DMA_IRQHandler+0x30e>
        return;
 800426c:	bf00      	nop
    }
  }
}
 800426e:	3718      	adds	r7, #24
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
 8004280:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004290:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	683a      	ldr	r2, [r7, #0]
 8004298:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	2b40      	cmp	r3, #64	@ 0x40
 80042a0:	d108      	bne.n	80042b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68ba      	ldr	r2, [r7, #8]
 80042b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80042b2:	e007      	b.n	80042c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68ba      	ldr	r2, [r7, #8]
 80042ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	60da      	str	r2, [r3, #12]
}
 80042c4:	bf00      	nop
 80042c6:	3714      	adds	r7, #20
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	3b10      	subs	r3, #16
 80042e0:	4a14      	ldr	r2, [pc, #80]	@ (8004334 <DMA_CalcBaseAndBitshift+0x64>)
 80042e2:	fba2 2303 	umull	r2, r3, r2, r3
 80042e6:	091b      	lsrs	r3, r3, #4
 80042e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80042ea:	4a13      	ldr	r2, [pc, #76]	@ (8004338 <DMA_CalcBaseAndBitshift+0x68>)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	4413      	add	r3, r2
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	461a      	mov	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2b03      	cmp	r3, #3
 80042fc:	d909      	bls.n	8004312 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004306:	f023 0303 	bic.w	r3, r3, #3
 800430a:	1d1a      	adds	r2, r3, #4
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	659a      	str	r2, [r3, #88]	@ 0x58
 8004310:	e007      	b.n	8004322 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800431a:	f023 0303 	bic.w	r3, r3, #3
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004326:	4618      	mov	r0, r3
 8004328:	3714      	adds	r7, #20
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	aaaaaaab 	.word	0xaaaaaaab
 8004338:	0800abc4 	.word	0x0800abc4

0800433c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004344:	2300      	movs	r3, #0
 8004346:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800434c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d11f      	bne.n	8004396 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	2b03      	cmp	r3, #3
 800435a:	d856      	bhi.n	800440a <DMA_CheckFifoParam+0xce>
 800435c:	a201      	add	r2, pc, #4	@ (adr r2, 8004364 <DMA_CheckFifoParam+0x28>)
 800435e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004362:	bf00      	nop
 8004364:	08004375 	.word	0x08004375
 8004368:	08004387 	.word	0x08004387
 800436c:	08004375 	.word	0x08004375
 8004370:	0800440b 	.word	0x0800440b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004378:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d046      	beq.n	800440e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004384:	e043      	b.n	800440e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800438a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800438e:	d140      	bne.n	8004412 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004394:	e03d      	b.n	8004412 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800439e:	d121      	bne.n	80043e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	2b03      	cmp	r3, #3
 80043a4:	d837      	bhi.n	8004416 <DMA_CheckFifoParam+0xda>
 80043a6:	a201      	add	r2, pc, #4	@ (adr r2, 80043ac <DMA_CheckFifoParam+0x70>)
 80043a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ac:	080043bd 	.word	0x080043bd
 80043b0:	080043c3 	.word	0x080043c3
 80043b4:	080043bd 	.word	0x080043bd
 80043b8:	080043d5 	.word	0x080043d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	73fb      	strb	r3, [r7, #15]
      break;
 80043c0:	e030      	b.n	8004424 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d025      	beq.n	800441a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043d2:	e022      	b.n	800441a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80043dc:	d11f      	bne.n	800441e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80043e2:	e01c      	b.n	800441e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d903      	bls.n	80043f2 <DMA_CheckFifoParam+0xb6>
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	2b03      	cmp	r3, #3
 80043ee:	d003      	beq.n	80043f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80043f0:	e018      	b.n	8004424 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	73fb      	strb	r3, [r7, #15]
      break;
 80043f6:	e015      	b.n	8004424 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00e      	beq.n	8004422 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	73fb      	strb	r3, [r7, #15]
      break;
 8004408:	e00b      	b.n	8004422 <DMA_CheckFifoParam+0xe6>
      break;
 800440a:	bf00      	nop
 800440c:	e00a      	b.n	8004424 <DMA_CheckFifoParam+0xe8>
      break;
 800440e:	bf00      	nop
 8004410:	e008      	b.n	8004424 <DMA_CheckFifoParam+0xe8>
      break;
 8004412:	bf00      	nop
 8004414:	e006      	b.n	8004424 <DMA_CheckFifoParam+0xe8>
      break;
 8004416:	bf00      	nop
 8004418:	e004      	b.n	8004424 <DMA_CheckFifoParam+0xe8>
      break;
 800441a:	bf00      	nop
 800441c:	e002      	b.n	8004424 <DMA_CheckFifoParam+0xe8>
      break;   
 800441e:	bf00      	nop
 8004420:	e000      	b.n	8004424 <DMA_CheckFifoParam+0xe8>
      break;
 8004422:	bf00      	nop
    }
  } 
  
  return status; 
 8004424:	7bfb      	ldrb	r3, [r7, #15]
}
 8004426:	4618      	mov	r0, r3
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop

08004434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004434:	b480      	push	{r7}
 8004436:	b089      	sub	sp, #36	@ 0x24
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800443e:	2300      	movs	r3, #0
 8004440:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004442:	2300      	movs	r3, #0
 8004444:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004446:	2300      	movs	r3, #0
 8004448:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800444a:	2300      	movs	r3, #0
 800444c:	61fb      	str	r3, [r7, #28]
 800444e:	e165      	b.n	800471c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004450:	2201      	movs	r2, #1
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	fa02 f303 	lsl.w	r3, r2, r3
 8004458:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	4013      	ands	r3, r2
 8004462:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	429a      	cmp	r2, r3
 800446a:	f040 8154 	bne.w	8004716 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f003 0303 	and.w	r3, r3, #3
 8004476:	2b01      	cmp	r3, #1
 8004478:	d005      	beq.n	8004486 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004482:	2b02      	cmp	r3, #2
 8004484:	d130      	bne.n	80044e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	005b      	lsls	r3, r3, #1
 8004490:	2203      	movs	r2, #3
 8004492:	fa02 f303 	lsl.w	r3, r2, r3
 8004496:	43db      	mvns	r3, r3
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	4013      	ands	r3, r2
 800449c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	68da      	ldr	r2, [r3, #12]
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	fa02 f303 	lsl.w	r3, r2, r3
 80044aa:	69ba      	ldr	r2, [r7, #24]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	69ba      	ldr	r2, [r7, #24]
 80044b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044bc:	2201      	movs	r2, #1
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	fa02 f303 	lsl.w	r3, r2, r3
 80044c4:	43db      	mvns	r3, r3
 80044c6:	69ba      	ldr	r2, [r7, #24]
 80044c8:	4013      	ands	r3, r2
 80044ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	091b      	lsrs	r3, r3, #4
 80044d2:	f003 0201 	and.w	r2, r3, #1
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	fa02 f303 	lsl.w	r3, r2, r3
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	4313      	orrs	r3, r2
 80044e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	69ba      	ldr	r2, [r7, #24]
 80044e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f003 0303 	and.w	r3, r3, #3
 80044f0:	2b03      	cmp	r3, #3
 80044f2:	d017      	beq.n	8004524 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	005b      	lsls	r3, r3, #1
 80044fe:	2203      	movs	r2, #3
 8004500:	fa02 f303 	lsl.w	r3, r2, r3
 8004504:	43db      	mvns	r3, r3
 8004506:	69ba      	ldr	r2, [r7, #24]
 8004508:	4013      	ands	r3, r2
 800450a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	689a      	ldr	r2, [r3, #8]
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	005b      	lsls	r3, r3, #1
 8004514:	fa02 f303 	lsl.w	r3, r2, r3
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	4313      	orrs	r3, r2
 800451c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	69ba      	ldr	r2, [r7, #24]
 8004522:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f003 0303 	and.w	r3, r3, #3
 800452c:	2b02      	cmp	r3, #2
 800452e:	d123      	bne.n	8004578 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	08da      	lsrs	r2, r3, #3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	3208      	adds	r2, #8
 8004538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800453c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	f003 0307 	and.w	r3, r3, #7
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	220f      	movs	r2, #15
 8004548:	fa02 f303 	lsl.w	r3, r2, r3
 800454c:	43db      	mvns	r3, r3
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	4013      	ands	r3, r2
 8004552:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	691a      	ldr	r2, [r3, #16]
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	f003 0307 	and.w	r3, r3, #7
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	fa02 f303 	lsl.w	r3, r2, r3
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	4313      	orrs	r3, r2
 8004568:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	08da      	lsrs	r2, r3, #3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	3208      	adds	r2, #8
 8004572:	69b9      	ldr	r1, [r7, #24]
 8004574:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	005b      	lsls	r3, r3, #1
 8004582:	2203      	movs	r2, #3
 8004584:	fa02 f303 	lsl.w	r3, r2, r3
 8004588:	43db      	mvns	r3, r3
 800458a:	69ba      	ldr	r2, [r7, #24]
 800458c:	4013      	ands	r3, r2
 800458e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f003 0203 	and.w	r2, r3, #3
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	005b      	lsls	r3, r3, #1
 800459c:	fa02 f303 	lsl.w	r3, r2, r3
 80045a0:	69ba      	ldr	r2, [r7, #24]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	69ba      	ldr	r2, [r7, #24]
 80045aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f000 80ae 	beq.w	8004716 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045ba:	2300      	movs	r3, #0
 80045bc:	60fb      	str	r3, [r7, #12]
 80045be:	4b5d      	ldr	r3, [pc, #372]	@ (8004734 <HAL_GPIO_Init+0x300>)
 80045c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045c2:	4a5c      	ldr	r2, [pc, #368]	@ (8004734 <HAL_GPIO_Init+0x300>)
 80045c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80045c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80045ca:	4b5a      	ldr	r3, [pc, #360]	@ (8004734 <HAL_GPIO_Init+0x300>)
 80045cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045d2:	60fb      	str	r3, [r7, #12]
 80045d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045d6:	4a58      	ldr	r2, [pc, #352]	@ (8004738 <HAL_GPIO_Init+0x304>)
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	089b      	lsrs	r3, r3, #2
 80045dc:	3302      	adds	r3, #2
 80045de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	f003 0303 	and.w	r3, r3, #3
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	220f      	movs	r2, #15
 80045ee:	fa02 f303 	lsl.w	r3, r2, r3
 80045f2:	43db      	mvns	r3, r3
 80045f4:	69ba      	ldr	r2, [r7, #24]
 80045f6:	4013      	ands	r3, r2
 80045f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a4f      	ldr	r2, [pc, #316]	@ (800473c <HAL_GPIO_Init+0x308>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d025      	beq.n	800464e <HAL_GPIO_Init+0x21a>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a4e      	ldr	r2, [pc, #312]	@ (8004740 <HAL_GPIO_Init+0x30c>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d01f      	beq.n	800464a <HAL_GPIO_Init+0x216>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a4d      	ldr	r2, [pc, #308]	@ (8004744 <HAL_GPIO_Init+0x310>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d019      	beq.n	8004646 <HAL_GPIO_Init+0x212>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a4c      	ldr	r2, [pc, #304]	@ (8004748 <HAL_GPIO_Init+0x314>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d013      	beq.n	8004642 <HAL_GPIO_Init+0x20e>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a4b      	ldr	r2, [pc, #300]	@ (800474c <HAL_GPIO_Init+0x318>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d00d      	beq.n	800463e <HAL_GPIO_Init+0x20a>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a4a      	ldr	r2, [pc, #296]	@ (8004750 <HAL_GPIO_Init+0x31c>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d007      	beq.n	800463a <HAL_GPIO_Init+0x206>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a49      	ldr	r2, [pc, #292]	@ (8004754 <HAL_GPIO_Init+0x320>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d101      	bne.n	8004636 <HAL_GPIO_Init+0x202>
 8004632:	2306      	movs	r3, #6
 8004634:	e00c      	b.n	8004650 <HAL_GPIO_Init+0x21c>
 8004636:	2307      	movs	r3, #7
 8004638:	e00a      	b.n	8004650 <HAL_GPIO_Init+0x21c>
 800463a:	2305      	movs	r3, #5
 800463c:	e008      	b.n	8004650 <HAL_GPIO_Init+0x21c>
 800463e:	2304      	movs	r3, #4
 8004640:	e006      	b.n	8004650 <HAL_GPIO_Init+0x21c>
 8004642:	2303      	movs	r3, #3
 8004644:	e004      	b.n	8004650 <HAL_GPIO_Init+0x21c>
 8004646:	2302      	movs	r3, #2
 8004648:	e002      	b.n	8004650 <HAL_GPIO_Init+0x21c>
 800464a:	2301      	movs	r3, #1
 800464c:	e000      	b.n	8004650 <HAL_GPIO_Init+0x21c>
 800464e:	2300      	movs	r3, #0
 8004650:	69fa      	ldr	r2, [r7, #28]
 8004652:	f002 0203 	and.w	r2, r2, #3
 8004656:	0092      	lsls	r2, r2, #2
 8004658:	4093      	lsls	r3, r2
 800465a:	69ba      	ldr	r2, [r7, #24]
 800465c:	4313      	orrs	r3, r2
 800465e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004660:	4935      	ldr	r1, [pc, #212]	@ (8004738 <HAL_GPIO_Init+0x304>)
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	089b      	lsrs	r3, r3, #2
 8004666:	3302      	adds	r3, #2
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800466e:	4b3a      	ldr	r3, [pc, #232]	@ (8004758 <HAL_GPIO_Init+0x324>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	43db      	mvns	r3, r3
 8004678:	69ba      	ldr	r2, [r7, #24]
 800467a:	4013      	ands	r3, r2
 800467c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800468a:	69ba      	ldr	r2, [r7, #24]
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	4313      	orrs	r3, r2
 8004690:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004692:	4a31      	ldr	r2, [pc, #196]	@ (8004758 <HAL_GPIO_Init+0x324>)
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004698:	4b2f      	ldr	r3, [pc, #188]	@ (8004758 <HAL_GPIO_Init+0x324>)
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	43db      	mvns	r3, r3
 80046a2:	69ba      	ldr	r2, [r7, #24]
 80046a4:	4013      	ands	r3, r2
 80046a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d003      	beq.n	80046bc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80046bc:	4a26      	ldr	r2, [pc, #152]	@ (8004758 <HAL_GPIO_Init+0x324>)
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80046c2:	4b25      	ldr	r3, [pc, #148]	@ (8004758 <HAL_GPIO_Init+0x324>)
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	43db      	mvns	r3, r3
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	4013      	ands	r3, r2
 80046d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d003      	beq.n	80046e6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80046de:	69ba      	ldr	r2, [r7, #24]
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80046e6:	4a1c      	ldr	r2, [pc, #112]	@ (8004758 <HAL_GPIO_Init+0x324>)
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046ec:	4b1a      	ldr	r3, [pc, #104]	@ (8004758 <HAL_GPIO_Init+0x324>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	43db      	mvns	r3, r3
 80046f6:	69ba      	ldr	r2, [r7, #24]
 80046f8:	4013      	ands	r3, r2
 80046fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d003      	beq.n	8004710 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	4313      	orrs	r3, r2
 800470e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004710:	4a11      	ldr	r2, [pc, #68]	@ (8004758 <HAL_GPIO_Init+0x324>)
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	3301      	adds	r3, #1
 800471a:	61fb      	str	r3, [r7, #28]
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	2b0f      	cmp	r3, #15
 8004720:	f67f ae96 	bls.w	8004450 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004724:	bf00      	nop
 8004726:	bf00      	nop
 8004728:	3724      	adds	r7, #36	@ 0x24
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	40023800 	.word	0x40023800
 8004738:	40013800 	.word	0x40013800
 800473c:	40020000 	.word	0x40020000
 8004740:	40020400 	.word	0x40020400
 8004744:	40020800 	.word	0x40020800
 8004748:	40020c00 	.word	0x40020c00
 800474c:	40021000 	.word	0x40021000
 8004750:	40021400 	.word	0x40021400
 8004754:	40021800 	.word	0x40021800
 8004758:	40013c00 	.word	0x40013c00

0800475c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	460b      	mov	r3, r1
 8004766:	807b      	strh	r3, [r7, #2]
 8004768:	4613      	mov	r3, r2
 800476a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800476c:	787b      	ldrb	r3, [r7, #1]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d003      	beq.n	800477a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004772:	887a      	ldrh	r2, [r7, #2]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004778:	e003      	b.n	8004782 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800477a:	887b      	ldrh	r3, [r7, #2]
 800477c:	041a      	lsls	r2, r3, #16
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	619a      	str	r2, [r3, #24]
}
 8004782:	bf00      	nop
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
	...

08004790 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d101      	bne.n	80047a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e0cc      	b.n	800493e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047a4:	4b68      	ldr	r3, [pc, #416]	@ (8004948 <HAL_RCC_ClockConfig+0x1b8>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 030f 	and.w	r3, r3, #15
 80047ac:	683a      	ldr	r2, [r7, #0]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d90c      	bls.n	80047cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047b2:	4b65      	ldr	r3, [pc, #404]	@ (8004948 <HAL_RCC_ClockConfig+0x1b8>)
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	b2d2      	uxtb	r2, r2
 80047b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ba:	4b63      	ldr	r3, [pc, #396]	@ (8004948 <HAL_RCC_ClockConfig+0x1b8>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 030f 	and.w	r3, r3, #15
 80047c2:	683a      	ldr	r2, [r7, #0]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d001      	beq.n	80047cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e0b8      	b.n	800493e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0302 	and.w	r3, r3, #2
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d020      	beq.n	800481a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0304 	and.w	r3, r3, #4
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d005      	beq.n	80047f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047e4:	4b59      	ldr	r3, [pc, #356]	@ (800494c <HAL_RCC_ClockConfig+0x1bc>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	4a58      	ldr	r2, [pc, #352]	@ (800494c <HAL_RCC_ClockConfig+0x1bc>)
 80047ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80047ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0308 	and.w	r3, r3, #8
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d005      	beq.n	8004808 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047fc:	4b53      	ldr	r3, [pc, #332]	@ (800494c <HAL_RCC_ClockConfig+0x1bc>)
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	4a52      	ldr	r2, [pc, #328]	@ (800494c <HAL_RCC_ClockConfig+0x1bc>)
 8004802:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004806:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004808:	4b50      	ldr	r3, [pc, #320]	@ (800494c <HAL_RCC_ClockConfig+0x1bc>)
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	494d      	ldr	r1, [pc, #308]	@ (800494c <HAL_RCC_ClockConfig+0x1bc>)
 8004816:	4313      	orrs	r3, r2
 8004818:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	2b00      	cmp	r3, #0
 8004824:	d044      	beq.n	80048b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d107      	bne.n	800483e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800482e:	4b47      	ldr	r3, [pc, #284]	@ (800494c <HAL_RCC_ClockConfig+0x1bc>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d119      	bne.n	800486e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e07f      	b.n	800493e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	2b02      	cmp	r3, #2
 8004844:	d003      	beq.n	800484e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800484a:	2b03      	cmp	r3, #3
 800484c:	d107      	bne.n	800485e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800484e:	4b3f      	ldr	r3, [pc, #252]	@ (800494c <HAL_RCC_ClockConfig+0x1bc>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d109      	bne.n	800486e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e06f      	b.n	800493e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800485e:	4b3b      	ldr	r3, [pc, #236]	@ (800494c <HAL_RCC_ClockConfig+0x1bc>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e067      	b.n	800493e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800486e:	4b37      	ldr	r3, [pc, #220]	@ (800494c <HAL_RCC_ClockConfig+0x1bc>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f023 0203 	bic.w	r2, r3, #3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	4934      	ldr	r1, [pc, #208]	@ (800494c <HAL_RCC_ClockConfig+0x1bc>)
 800487c:	4313      	orrs	r3, r2
 800487e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004880:	f7fe fa50 	bl	8002d24 <HAL_GetTick>
 8004884:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004886:	e00a      	b.n	800489e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004888:	f7fe fa4c 	bl	8002d24 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004896:	4293      	cmp	r3, r2
 8004898:	d901      	bls.n	800489e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e04f      	b.n	800493e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800489e:	4b2b      	ldr	r3, [pc, #172]	@ (800494c <HAL_RCC_ClockConfig+0x1bc>)
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f003 020c 	and.w	r2, r3, #12
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d1eb      	bne.n	8004888 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048b0:	4b25      	ldr	r3, [pc, #148]	@ (8004948 <HAL_RCC_ClockConfig+0x1b8>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 030f 	and.w	r3, r3, #15
 80048b8:	683a      	ldr	r2, [r7, #0]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d20c      	bcs.n	80048d8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048be:	4b22      	ldr	r3, [pc, #136]	@ (8004948 <HAL_RCC_ClockConfig+0x1b8>)
 80048c0:	683a      	ldr	r2, [r7, #0]
 80048c2:	b2d2      	uxtb	r2, r2
 80048c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048c6:	4b20      	ldr	r3, [pc, #128]	@ (8004948 <HAL_RCC_ClockConfig+0x1b8>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 030f 	and.w	r3, r3, #15
 80048ce:	683a      	ldr	r2, [r7, #0]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d001      	beq.n	80048d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e032      	b.n	800493e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0304 	and.w	r3, r3, #4
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d008      	beq.n	80048f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048e4:	4b19      	ldr	r3, [pc, #100]	@ (800494c <HAL_RCC_ClockConfig+0x1bc>)
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	4916      	ldr	r1, [pc, #88]	@ (800494c <HAL_RCC_ClockConfig+0x1bc>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0308 	and.w	r3, r3, #8
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d009      	beq.n	8004916 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004902:	4b12      	ldr	r3, [pc, #72]	@ (800494c <HAL_RCC_ClockConfig+0x1bc>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	00db      	lsls	r3, r3, #3
 8004910:	490e      	ldr	r1, [pc, #56]	@ (800494c <HAL_RCC_ClockConfig+0x1bc>)
 8004912:	4313      	orrs	r3, r2
 8004914:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004916:	f000 f855 	bl	80049c4 <HAL_RCC_GetSysClockFreq>
 800491a:	4602      	mov	r2, r0
 800491c:	4b0b      	ldr	r3, [pc, #44]	@ (800494c <HAL_RCC_ClockConfig+0x1bc>)
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	091b      	lsrs	r3, r3, #4
 8004922:	f003 030f 	and.w	r3, r3, #15
 8004926:	490a      	ldr	r1, [pc, #40]	@ (8004950 <HAL_RCC_ClockConfig+0x1c0>)
 8004928:	5ccb      	ldrb	r3, [r1, r3]
 800492a:	fa22 f303 	lsr.w	r3, r2, r3
 800492e:	4a09      	ldr	r2, [pc, #36]	@ (8004954 <HAL_RCC_ClockConfig+0x1c4>)
 8004930:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004932:	4b09      	ldr	r3, [pc, #36]	@ (8004958 <HAL_RCC_ClockConfig+0x1c8>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4618      	mov	r0, r3
 8004938:	f7fe f9b0 	bl	8002c9c <HAL_InitTick>

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	40023c00 	.word	0x40023c00
 800494c:	40023800 	.word	0x40023800
 8004950:	0800abac 	.word	0x0800abac
 8004954:	20000000 	.word	0x20000000
 8004958:	20000004 	.word	0x20000004

0800495c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800495c:	b480      	push	{r7}
 800495e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004960:	4b03      	ldr	r3, [pc, #12]	@ (8004970 <HAL_RCC_GetHCLKFreq+0x14>)
 8004962:	681b      	ldr	r3, [r3, #0]
}
 8004964:	4618      	mov	r0, r3
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	20000000 	.word	0x20000000

08004974 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004978:	f7ff fff0 	bl	800495c <HAL_RCC_GetHCLKFreq>
 800497c:	4602      	mov	r2, r0
 800497e:	4b05      	ldr	r3, [pc, #20]	@ (8004994 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	0a9b      	lsrs	r3, r3, #10
 8004984:	f003 0307 	and.w	r3, r3, #7
 8004988:	4903      	ldr	r1, [pc, #12]	@ (8004998 <HAL_RCC_GetPCLK1Freq+0x24>)
 800498a:	5ccb      	ldrb	r3, [r1, r3]
 800498c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004990:	4618      	mov	r0, r3
 8004992:	bd80      	pop	{r7, pc}
 8004994:	40023800 	.word	0x40023800
 8004998:	0800abbc 	.word	0x0800abbc

0800499c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80049a0:	f7ff ffdc 	bl	800495c <HAL_RCC_GetHCLKFreq>
 80049a4:	4602      	mov	r2, r0
 80049a6:	4b05      	ldr	r3, [pc, #20]	@ (80049bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	0b5b      	lsrs	r3, r3, #13
 80049ac:	f003 0307 	and.w	r3, r3, #7
 80049b0:	4903      	ldr	r1, [pc, #12]	@ (80049c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049b2:	5ccb      	ldrb	r3, [r1, r3]
 80049b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	40023800 	.word	0x40023800
 80049c0:	0800abbc 	.word	0x0800abbc

080049c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049c8:	b0ae      	sub	sp, #184	@ 0xb8
 80049ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80049cc:	2300      	movs	r3, #0
 80049ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80049d2:	2300      	movs	r3, #0
 80049d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80049d8:	2300      	movs	r3, #0
 80049da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80049de:	2300      	movs	r3, #0
 80049e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80049e4:	2300      	movs	r3, #0
 80049e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049ea:	4bcb      	ldr	r3, [pc, #812]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x354>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f003 030c 	and.w	r3, r3, #12
 80049f2:	2b0c      	cmp	r3, #12
 80049f4:	f200 8206 	bhi.w	8004e04 <HAL_RCC_GetSysClockFreq+0x440>
 80049f8:	a201      	add	r2, pc, #4	@ (adr r2, 8004a00 <HAL_RCC_GetSysClockFreq+0x3c>)
 80049fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049fe:	bf00      	nop
 8004a00:	08004a35 	.word	0x08004a35
 8004a04:	08004e05 	.word	0x08004e05
 8004a08:	08004e05 	.word	0x08004e05
 8004a0c:	08004e05 	.word	0x08004e05
 8004a10:	08004a3d 	.word	0x08004a3d
 8004a14:	08004e05 	.word	0x08004e05
 8004a18:	08004e05 	.word	0x08004e05
 8004a1c:	08004e05 	.word	0x08004e05
 8004a20:	08004a45 	.word	0x08004a45
 8004a24:	08004e05 	.word	0x08004e05
 8004a28:	08004e05 	.word	0x08004e05
 8004a2c:	08004e05 	.word	0x08004e05
 8004a30:	08004c35 	.word	0x08004c35
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a34:	4bb9      	ldr	r3, [pc, #740]	@ (8004d1c <HAL_RCC_GetSysClockFreq+0x358>)
 8004a36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004a3a:	e1e7      	b.n	8004e0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a3c:	4bb8      	ldr	r3, [pc, #736]	@ (8004d20 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004a3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004a42:	e1e3      	b.n	8004e0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a44:	4bb4      	ldr	r3, [pc, #720]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a50:	4bb1      	ldr	r3, [pc, #708]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d071      	beq.n	8004b40 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a5c:	4bae      	ldr	r3, [pc, #696]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	099b      	lsrs	r3, r3, #6
 8004a62:	2200      	movs	r2, #0
 8004a64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004a68:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004a6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a74:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004a78:	2300      	movs	r3, #0
 8004a7a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004a7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004a82:	4622      	mov	r2, r4
 8004a84:	462b      	mov	r3, r5
 8004a86:	f04f 0000 	mov.w	r0, #0
 8004a8a:	f04f 0100 	mov.w	r1, #0
 8004a8e:	0159      	lsls	r1, r3, #5
 8004a90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a94:	0150      	lsls	r0, r2, #5
 8004a96:	4602      	mov	r2, r0
 8004a98:	460b      	mov	r3, r1
 8004a9a:	4621      	mov	r1, r4
 8004a9c:	1a51      	subs	r1, r2, r1
 8004a9e:	6439      	str	r1, [r7, #64]	@ 0x40
 8004aa0:	4629      	mov	r1, r5
 8004aa2:	eb63 0301 	sbc.w	r3, r3, r1
 8004aa6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004aa8:	f04f 0200 	mov.w	r2, #0
 8004aac:	f04f 0300 	mov.w	r3, #0
 8004ab0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004ab4:	4649      	mov	r1, r9
 8004ab6:	018b      	lsls	r3, r1, #6
 8004ab8:	4641      	mov	r1, r8
 8004aba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004abe:	4641      	mov	r1, r8
 8004ac0:	018a      	lsls	r2, r1, #6
 8004ac2:	4641      	mov	r1, r8
 8004ac4:	1a51      	subs	r1, r2, r1
 8004ac6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004ac8:	4649      	mov	r1, r9
 8004aca:	eb63 0301 	sbc.w	r3, r3, r1
 8004ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ad0:	f04f 0200 	mov.w	r2, #0
 8004ad4:	f04f 0300 	mov.w	r3, #0
 8004ad8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004adc:	4649      	mov	r1, r9
 8004ade:	00cb      	lsls	r3, r1, #3
 8004ae0:	4641      	mov	r1, r8
 8004ae2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ae6:	4641      	mov	r1, r8
 8004ae8:	00ca      	lsls	r2, r1, #3
 8004aea:	4610      	mov	r0, r2
 8004aec:	4619      	mov	r1, r3
 8004aee:	4603      	mov	r3, r0
 8004af0:	4622      	mov	r2, r4
 8004af2:	189b      	adds	r3, r3, r2
 8004af4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004af6:	462b      	mov	r3, r5
 8004af8:	460a      	mov	r2, r1
 8004afa:	eb42 0303 	adc.w	r3, r2, r3
 8004afe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b00:	f04f 0200 	mov.w	r2, #0
 8004b04:	f04f 0300 	mov.w	r3, #0
 8004b08:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004b0c:	4629      	mov	r1, r5
 8004b0e:	024b      	lsls	r3, r1, #9
 8004b10:	4621      	mov	r1, r4
 8004b12:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b16:	4621      	mov	r1, r4
 8004b18:	024a      	lsls	r2, r1, #9
 8004b1a:	4610      	mov	r0, r2
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004b22:	2200      	movs	r2, #0
 8004b24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b28:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004b2c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004b30:	f7fc f95a 	bl	8000de8 <__aeabi_uldivmod>
 8004b34:	4602      	mov	r2, r0
 8004b36:	460b      	mov	r3, r1
 8004b38:	4613      	mov	r3, r2
 8004b3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b3e:	e067      	b.n	8004c10 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b40:	4b75      	ldr	r3, [pc, #468]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	099b      	lsrs	r3, r3, #6
 8004b46:	2200      	movs	r2, #0
 8004b48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b4c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004b50:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004b54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b58:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004b5e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004b62:	4622      	mov	r2, r4
 8004b64:	462b      	mov	r3, r5
 8004b66:	f04f 0000 	mov.w	r0, #0
 8004b6a:	f04f 0100 	mov.w	r1, #0
 8004b6e:	0159      	lsls	r1, r3, #5
 8004b70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b74:	0150      	lsls	r0, r2, #5
 8004b76:	4602      	mov	r2, r0
 8004b78:	460b      	mov	r3, r1
 8004b7a:	4621      	mov	r1, r4
 8004b7c:	1a51      	subs	r1, r2, r1
 8004b7e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004b80:	4629      	mov	r1, r5
 8004b82:	eb63 0301 	sbc.w	r3, r3, r1
 8004b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b88:	f04f 0200 	mov.w	r2, #0
 8004b8c:	f04f 0300 	mov.w	r3, #0
 8004b90:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004b94:	4649      	mov	r1, r9
 8004b96:	018b      	lsls	r3, r1, #6
 8004b98:	4641      	mov	r1, r8
 8004b9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b9e:	4641      	mov	r1, r8
 8004ba0:	018a      	lsls	r2, r1, #6
 8004ba2:	4641      	mov	r1, r8
 8004ba4:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ba8:	4649      	mov	r1, r9
 8004baa:	eb63 0b01 	sbc.w	fp, r3, r1
 8004bae:	f04f 0200 	mov.w	r2, #0
 8004bb2:	f04f 0300 	mov.w	r3, #0
 8004bb6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004bba:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004bbe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bc2:	4692      	mov	sl, r2
 8004bc4:	469b      	mov	fp, r3
 8004bc6:	4623      	mov	r3, r4
 8004bc8:	eb1a 0303 	adds.w	r3, sl, r3
 8004bcc:	623b      	str	r3, [r7, #32]
 8004bce:	462b      	mov	r3, r5
 8004bd0:	eb4b 0303 	adc.w	r3, fp, r3
 8004bd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bd6:	f04f 0200 	mov.w	r2, #0
 8004bda:	f04f 0300 	mov.w	r3, #0
 8004bde:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004be2:	4629      	mov	r1, r5
 8004be4:	028b      	lsls	r3, r1, #10
 8004be6:	4621      	mov	r1, r4
 8004be8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bec:	4621      	mov	r1, r4
 8004bee:	028a      	lsls	r2, r1, #10
 8004bf0:	4610      	mov	r0, r2
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	673b      	str	r3, [r7, #112]	@ 0x70
 8004bfc:	677a      	str	r2, [r7, #116]	@ 0x74
 8004bfe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004c02:	f7fc f8f1 	bl	8000de8 <__aeabi_uldivmod>
 8004c06:	4602      	mov	r2, r0
 8004c08:	460b      	mov	r3, r1
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004c10:	4b41      	ldr	r3, [pc, #260]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	0c1b      	lsrs	r3, r3, #16
 8004c16:	f003 0303 	and.w	r3, r3, #3
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	005b      	lsls	r3, r3, #1
 8004c1e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8004c22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004c26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004c32:	e0eb      	b.n	8004e0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c34:	4b38      	ldr	r3, [pc, #224]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c40:	4b35      	ldr	r3, [pc, #212]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d06b      	beq.n	8004d24 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c4c:	4b32      	ldr	r3, [pc, #200]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	099b      	lsrs	r3, r3, #6
 8004c52:	2200      	movs	r2, #0
 8004c54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c56:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004c58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c5e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c60:	2300      	movs	r3, #0
 8004c62:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c64:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004c68:	4622      	mov	r2, r4
 8004c6a:	462b      	mov	r3, r5
 8004c6c:	f04f 0000 	mov.w	r0, #0
 8004c70:	f04f 0100 	mov.w	r1, #0
 8004c74:	0159      	lsls	r1, r3, #5
 8004c76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c7a:	0150      	lsls	r0, r2, #5
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	460b      	mov	r3, r1
 8004c80:	4621      	mov	r1, r4
 8004c82:	1a51      	subs	r1, r2, r1
 8004c84:	61b9      	str	r1, [r7, #24]
 8004c86:	4629      	mov	r1, r5
 8004c88:	eb63 0301 	sbc.w	r3, r3, r1
 8004c8c:	61fb      	str	r3, [r7, #28]
 8004c8e:	f04f 0200 	mov.w	r2, #0
 8004c92:	f04f 0300 	mov.w	r3, #0
 8004c96:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004c9a:	4659      	mov	r1, fp
 8004c9c:	018b      	lsls	r3, r1, #6
 8004c9e:	4651      	mov	r1, sl
 8004ca0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ca4:	4651      	mov	r1, sl
 8004ca6:	018a      	lsls	r2, r1, #6
 8004ca8:	4651      	mov	r1, sl
 8004caa:	ebb2 0801 	subs.w	r8, r2, r1
 8004cae:	4659      	mov	r1, fp
 8004cb0:	eb63 0901 	sbc.w	r9, r3, r1
 8004cb4:	f04f 0200 	mov.w	r2, #0
 8004cb8:	f04f 0300 	mov.w	r3, #0
 8004cbc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cc0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cc4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cc8:	4690      	mov	r8, r2
 8004cca:	4699      	mov	r9, r3
 8004ccc:	4623      	mov	r3, r4
 8004cce:	eb18 0303 	adds.w	r3, r8, r3
 8004cd2:	613b      	str	r3, [r7, #16]
 8004cd4:	462b      	mov	r3, r5
 8004cd6:	eb49 0303 	adc.w	r3, r9, r3
 8004cda:	617b      	str	r3, [r7, #20]
 8004cdc:	f04f 0200 	mov.w	r2, #0
 8004ce0:	f04f 0300 	mov.w	r3, #0
 8004ce4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004ce8:	4629      	mov	r1, r5
 8004cea:	024b      	lsls	r3, r1, #9
 8004cec:	4621      	mov	r1, r4
 8004cee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004cf2:	4621      	mov	r1, r4
 8004cf4:	024a      	lsls	r2, r1, #9
 8004cf6:	4610      	mov	r0, r2
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004cfe:	2200      	movs	r2, #0
 8004d00:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d02:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004d04:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004d08:	f7fc f86e 	bl	8000de8 <__aeabi_uldivmod>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	460b      	mov	r3, r1
 8004d10:	4613      	mov	r3, r2
 8004d12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d16:	e065      	b.n	8004de4 <HAL_RCC_GetSysClockFreq+0x420>
 8004d18:	40023800 	.word	0x40023800
 8004d1c:	00f42400 	.word	0x00f42400
 8004d20:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d24:	4b3d      	ldr	r3, [pc, #244]	@ (8004e1c <HAL_RCC_GetSysClockFreq+0x458>)
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	099b      	lsrs	r3, r3, #6
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	4611      	mov	r1, r2
 8004d30:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d34:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d36:	2300      	movs	r3, #0
 8004d38:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d3a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004d3e:	4642      	mov	r2, r8
 8004d40:	464b      	mov	r3, r9
 8004d42:	f04f 0000 	mov.w	r0, #0
 8004d46:	f04f 0100 	mov.w	r1, #0
 8004d4a:	0159      	lsls	r1, r3, #5
 8004d4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d50:	0150      	lsls	r0, r2, #5
 8004d52:	4602      	mov	r2, r0
 8004d54:	460b      	mov	r3, r1
 8004d56:	4641      	mov	r1, r8
 8004d58:	1a51      	subs	r1, r2, r1
 8004d5a:	60b9      	str	r1, [r7, #8]
 8004d5c:	4649      	mov	r1, r9
 8004d5e:	eb63 0301 	sbc.w	r3, r3, r1
 8004d62:	60fb      	str	r3, [r7, #12]
 8004d64:	f04f 0200 	mov.w	r2, #0
 8004d68:	f04f 0300 	mov.w	r3, #0
 8004d6c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004d70:	4659      	mov	r1, fp
 8004d72:	018b      	lsls	r3, r1, #6
 8004d74:	4651      	mov	r1, sl
 8004d76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d7a:	4651      	mov	r1, sl
 8004d7c:	018a      	lsls	r2, r1, #6
 8004d7e:	4651      	mov	r1, sl
 8004d80:	1a54      	subs	r4, r2, r1
 8004d82:	4659      	mov	r1, fp
 8004d84:	eb63 0501 	sbc.w	r5, r3, r1
 8004d88:	f04f 0200 	mov.w	r2, #0
 8004d8c:	f04f 0300 	mov.w	r3, #0
 8004d90:	00eb      	lsls	r3, r5, #3
 8004d92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d96:	00e2      	lsls	r2, r4, #3
 8004d98:	4614      	mov	r4, r2
 8004d9a:	461d      	mov	r5, r3
 8004d9c:	4643      	mov	r3, r8
 8004d9e:	18e3      	adds	r3, r4, r3
 8004da0:	603b      	str	r3, [r7, #0]
 8004da2:	464b      	mov	r3, r9
 8004da4:	eb45 0303 	adc.w	r3, r5, r3
 8004da8:	607b      	str	r3, [r7, #4]
 8004daa:	f04f 0200 	mov.w	r2, #0
 8004dae:	f04f 0300 	mov.w	r3, #0
 8004db2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004db6:	4629      	mov	r1, r5
 8004db8:	028b      	lsls	r3, r1, #10
 8004dba:	4621      	mov	r1, r4
 8004dbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004dc0:	4621      	mov	r1, r4
 8004dc2:	028a      	lsls	r2, r1, #10
 8004dc4:	4610      	mov	r0, r2
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004dcc:	2200      	movs	r2, #0
 8004dce:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004dd0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004dd2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004dd6:	f7fc f807 	bl	8000de8 <__aeabi_uldivmod>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	460b      	mov	r3, r1
 8004dde:	4613      	mov	r3, r2
 8004de0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004de4:	4b0d      	ldr	r3, [pc, #52]	@ (8004e1c <HAL_RCC_GetSysClockFreq+0x458>)
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	0f1b      	lsrs	r3, r3, #28
 8004dea:	f003 0307 	and.w	r3, r3, #7
 8004dee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004df2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004df6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dfe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004e02:	e003      	b.n	8004e0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e04:	4b06      	ldr	r3, [pc, #24]	@ (8004e20 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004e06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004e0a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e0c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	37b8      	adds	r7, #184	@ 0xb8
 8004e14:	46bd      	mov	sp, r7
 8004e16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e1a:	bf00      	nop
 8004e1c:	40023800 	.word	0x40023800
 8004e20:	00f42400 	.word	0x00f42400

08004e24 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b086      	sub	sp, #24
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e28d      	b.n	8005352 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	f000 8083 	beq.w	8004f4a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004e44:	4b94      	ldr	r3, [pc, #592]	@ (8005098 <HAL_RCC_OscConfig+0x274>)
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f003 030c 	and.w	r3, r3, #12
 8004e4c:	2b04      	cmp	r3, #4
 8004e4e:	d019      	beq.n	8004e84 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004e50:	4b91      	ldr	r3, [pc, #580]	@ (8005098 <HAL_RCC_OscConfig+0x274>)
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	f003 030c 	and.w	r3, r3, #12
        || \
 8004e58:	2b08      	cmp	r3, #8
 8004e5a:	d106      	bne.n	8004e6a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004e5c:	4b8e      	ldr	r3, [pc, #568]	@ (8005098 <HAL_RCC_OscConfig+0x274>)
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e68:	d00c      	beq.n	8004e84 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e6a:	4b8b      	ldr	r3, [pc, #556]	@ (8005098 <HAL_RCC_OscConfig+0x274>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004e72:	2b0c      	cmp	r3, #12
 8004e74:	d112      	bne.n	8004e9c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e76:	4b88      	ldr	r3, [pc, #544]	@ (8005098 <HAL_RCC_OscConfig+0x274>)
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e82:	d10b      	bne.n	8004e9c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e84:	4b84      	ldr	r3, [pc, #528]	@ (8005098 <HAL_RCC_OscConfig+0x274>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d05b      	beq.n	8004f48 <HAL_RCC_OscConfig+0x124>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d157      	bne.n	8004f48 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e25a      	b.n	8005352 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ea4:	d106      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x90>
 8004ea6:	4b7c      	ldr	r3, [pc, #496]	@ (8005098 <HAL_RCC_OscConfig+0x274>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a7b      	ldr	r2, [pc, #492]	@ (8005098 <HAL_RCC_OscConfig+0x274>)
 8004eac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004eb0:	6013      	str	r3, [r2, #0]
 8004eb2:	e01d      	b.n	8004ef0 <HAL_RCC_OscConfig+0xcc>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ebc:	d10c      	bne.n	8004ed8 <HAL_RCC_OscConfig+0xb4>
 8004ebe:	4b76      	ldr	r3, [pc, #472]	@ (8005098 <HAL_RCC_OscConfig+0x274>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a75      	ldr	r2, [pc, #468]	@ (8005098 <HAL_RCC_OscConfig+0x274>)
 8004ec4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ec8:	6013      	str	r3, [r2, #0]
 8004eca:	4b73      	ldr	r3, [pc, #460]	@ (8005098 <HAL_RCC_OscConfig+0x274>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a72      	ldr	r2, [pc, #456]	@ (8005098 <HAL_RCC_OscConfig+0x274>)
 8004ed0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ed4:	6013      	str	r3, [r2, #0]
 8004ed6:	e00b      	b.n	8004ef0 <HAL_RCC_OscConfig+0xcc>
 8004ed8:	4b6f      	ldr	r3, [pc, #444]	@ (8005098 <HAL_RCC_OscConfig+0x274>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a6e      	ldr	r2, [pc, #440]	@ (8005098 <HAL_RCC_OscConfig+0x274>)
 8004ede:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ee2:	6013      	str	r3, [r2, #0]
 8004ee4:	4b6c      	ldr	r3, [pc, #432]	@ (8005098 <HAL_RCC_OscConfig+0x274>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a6b      	ldr	r2, [pc, #428]	@ (8005098 <HAL_RCC_OscConfig+0x274>)
 8004eea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004eee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d013      	beq.n	8004f20 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef8:	f7fd ff14 	bl	8002d24 <HAL_GetTick>
 8004efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004efe:	e008      	b.n	8004f12 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f00:	f7fd ff10 	bl	8002d24 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	2b64      	cmp	r3, #100	@ 0x64
 8004f0c:	d901      	bls.n	8004f12 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e21f      	b.n	8005352 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f12:	4b61      	ldr	r3, [pc, #388]	@ (8005098 <HAL_RCC_OscConfig+0x274>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d0f0      	beq.n	8004f00 <HAL_RCC_OscConfig+0xdc>
 8004f1e:	e014      	b.n	8004f4a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f20:	f7fd ff00 	bl	8002d24 <HAL_GetTick>
 8004f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f26:	e008      	b.n	8004f3a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f28:	f7fd fefc 	bl	8002d24 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b64      	cmp	r3, #100	@ 0x64
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e20b      	b.n	8005352 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f3a:	4b57      	ldr	r3, [pc, #348]	@ (8005098 <HAL_RCC_OscConfig+0x274>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1f0      	bne.n	8004f28 <HAL_RCC_OscConfig+0x104>
 8004f46:	e000      	b.n	8004f4a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d06f      	beq.n	8005036 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004f56:	4b50      	ldr	r3, [pc, #320]	@ (8005098 <HAL_RCC_OscConfig+0x274>)
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	f003 030c 	and.w	r3, r3, #12
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d017      	beq.n	8004f92 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004f62:	4b4d      	ldr	r3, [pc, #308]	@ (8005098 <HAL_RCC_OscConfig+0x274>)
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f003 030c 	and.w	r3, r3, #12
        || \
 8004f6a:	2b08      	cmp	r3, #8
 8004f6c:	d105      	bne.n	8004f7a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004f6e:	4b4a      	ldr	r3, [pc, #296]	@ (8005098 <HAL_RCC_OscConfig+0x274>)
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00b      	beq.n	8004f92 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f7a:	4b47      	ldr	r3, [pc, #284]	@ (8005098 <HAL_RCC_OscConfig+0x274>)
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004f82:	2b0c      	cmp	r3, #12
 8004f84:	d11c      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f86:	4b44      	ldr	r3, [pc, #272]	@ (8005098 <HAL_RCC_OscConfig+0x274>)
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d116      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f92:	4b41      	ldr	r3, [pc, #260]	@ (8005098 <HAL_RCC_OscConfig+0x274>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d005      	beq.n	8004faa <HAL_RCC_OscConfig+0x186>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d001      	beq.n	8004faa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e1d3      	b.n	8005352 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004faa:	4b3b      	ldr	r3, [pc, #236]	@ (8005098 <HAL_RCC_OscConfig+0x274>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	00db      	lsls	r3, r3, #3
 8004fb8:	4937      	ldr	r1, [pc, #220]	@ (8005098 <HAL_RCC_OscConfig+0x274>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fbe:	e03a      	b.n	8005036 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d020      	beq.n	800500a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fc8:	4b34      	ldr	r3, [pc, #208]	@ (800509c <HAL_RCC_OscConfig+0x278>)
 8004fca:	2201      	movs	r2, #1
 8004fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fce:	f7fd fea9 	bl	8002d24 <HAL_GetTick>
 8004fd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fd4:	e008      	b.n	8004fe8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fd6:	f7fd fea5 	bl	8002d24 <HAL_GetTick>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d901      	bls.n	8004fe8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e1b4      	b.n	8005352 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fe8:	4b2b      	ldr	r3, [pc, #172]	@ (8005098 <HAL_RCC_OscConfig+0x274>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0302 	and.w	r3, r3, #2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d0f0      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ff4:	4b28      	ldr	r3, [pc, #160]	@ (8005098 <HAL_RCC_OscConfig+0x274>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	00db      	lsls	r3, r3, #3
 8005002:	4925      	ldr	r1, [pc, #148]	@ (8005098 <HAL_RCC_OscConfig+0x274>)
 8005004:	4313      	orrs	r3, r2
 8005006:	600b      	str	r3, [r1, #0]
 8005008:	e015      	b.n	8005036 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800500a:	4b24      	ldr	r3, [pc, #144]	@ (800509c <HAL_RCC_OscConfig+0x278>)
 800500c:	2200      	movs	r2, #0
 800500e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005010:	f7fd fe88 	bl	8002d24 <HAL_GetTick>
 8005014:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005016:	e008      	b.n	800502a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005018:	f7fd fe84 	bl	8002d24 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	2b02      	cmp	r3, #2
 8005024:	d901      	bls.n	800502a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e193      	b.n	8005352 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800502a:	4b1b      	ldr	r3, [pc, #108]	@ (8005098 <HAL_RCC_OscConfig+0x274>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1f0      	bne.n	8005018 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0308 	and.w	r3, r3, #8
 800503e:	2b00      	cmp	r3, #0
 8005040:	d036      	beq.n	80050b0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d016      	beq.n	8005078 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800504a:	4b15      	ldr	r3, [pc, #84]	@ (80050a0 <HAL_RCC_OscConfig+0x27c>)
 800504c:	2201      	movs	r2, #1
 800504e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005050:	f7fd fe68 	bl	8002d24 <HAL_GetTick>
 8005054:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005056:	e008      	b.n	800506a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005058:	f7fd fe64 	bl	8002d24 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	2b02      	cmp	r3, #2
 8005064:	d901      	bls.n	800506a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e173      	b.n	8005352 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800506a:	4b0b      	ldr	r3, [pc, #44]	@ (8005098 <HAL_RCC_OscConfig+0x274>)
 800506c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d0f0      	beq.n	8005058 <HAL_RCC_OscConfig+0x234>
 8005076:	e01b      	b.n	80050b0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005078:	4b09      	ldr	r3, [pc, #36]	@ (80050a0 <HAL_RCC_OscConfig+0x27c>)
 800507a:	2200      	movs	r2, #0
 800507c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800507e:	f7fd fe51 	bl	8002d24 <HAL_GetTick>
 8005082:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005084:	e00e      	b.n	80050a4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005086:	f7fd fe4d 	bl	8002d24 <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	2b02      	cmp	r3, #2
 8005092:	d907      	bls.n	80050a4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e15c      	b.n	8005352 <HAL_RCC_OscConfig+0x52e>
 8005098:	40023800 	.word	0x40023800
 800509c:	42470000 	.word	0x42470000
 80050a0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050a4:	4b8a      	ldr	r3, [pc, #552]	@ (80052d0 <HAL_RCC_OscConfig+0x4ac>)
 80050a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050a8:	f003 0302 	and.w	r3, r3, #2
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d1ea      	bne.n	8005086 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0304 	and.w	r3, r3, #4
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f000 8097 	beq.w	80051ec <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050be:	2300      	movs	r3, #0
 80050c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050c2:	4b83      	ldr	r3, [pc, #524]	@ (80052d0 <HAL_RCC_OscConfig+0x4ac>)
 80050c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10f      	bne.n	80050ee <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050ce:	2300      	movs	r3, #0
 80050d0:	60bb      	str	r3, [r7, #8]
 80050d2:	4b7f      	ldr	r3, [pc, #508]	@ (80052d0 <HAL_RCC_OscConfig+0x4ac>)
 80050d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d6:	4a7e      	ldr	r2, [pc, #504]	@ (80052d0 <HAL_RCC_OscConfig+0x4ac>)
 80050d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80050de:	4b7c      	ldr	r3, [pc, #496]	@ (80052d0 <HAL_RCC_OscConfig+0x4ac>)
 80050e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050e6:	60bb      	str	r3, [r7, #8]
 80050e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050ea:	2301      	movs	r3, #1
 80050ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050ee:	4b79      	ldr	r3, [pc, #484]	@ (80052d4 <HAL_RCC_OscConfig+0x4b0>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d118      	bne.n	800512c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050fa:	4b76      	ldr	r3, [pc, #472]	@ (80052d4 <HAL_RCC_OscConfig+0x4b0>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a75      	ldr	r2, [pc, #468]	@ (80052d4 <HAL_RCC_OscConfig+0x4b0>)
 8005100:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005104:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005106:	f7fd fe0d 	bl	8002d24 <HAL_GetTick>
 800510a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800510c:	e008      	b.n	8005120 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800510e:	f7fd fe09 	bl	8002d24 <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	2b02      	cmp	r3, #2
 800511a:	d901      	bls.n	8005120 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e118      	b.n	8005352 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005120:	4b6c      	ldr	r3, [pc, #432]	@ (80052d4 <HAL_RCC_OscConfig+0x4b0>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005128:	2b00      	cmp	r3, #0
 800512a:	d0f0      	beq.n	800510e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d106      	bne.n	8005142 <HAL_RCC_OscConfig+0x31e>
 8005134:	4b66      	ldr	r3, [pc, #408]	@ (80052d0 <HAL_RCC_OscConfig+0x4ac>)
 8005136:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005138:	4a65      	ldr	r2, [pc, #404]	@ (80052d0 <HAL_RCC_OscConfig+0x4ac>)
 800513a:	f043 0301 	orr.w	r3, r3, #1
 800513e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005140:	e01c      	b.n	800517c <HAL_RCC_OscConfig+0x358>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	2b05      	cmp	r3, #5
 8005148:	d10c      	bne.n	8005164 <HAL_RCC_OscConfig+0x340>
 800514a:	4b61      	ldr	r3, [pc, #388]	@ (80052d0 <HAL_RCC_OscConfig+0x4ac>)
 800514c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800514e:	4a60      	ldr	r2, [pc, #384]	@ (80052d0 <HAL_RCC_OscConfig+0x4ac>)
 8005150:	f043 0304 	orr.w	r3, r3, #4
 8005154:	6713      	str	r3, [r2, #112]	@ 0x70
 8005156:	4b5e      	ldr	r3, [pc, #376]	@ (80052d0 <HAL_RCC_OscConfig+0x4ac>)
 8005158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800515a:	4a5d      	ldr	r2, [pc, #372]	@ (80052d0 <HAL_RCC_OscConfig+0x4ac>)
 800515c:	f043 0301 	orr.w	r3, r3, #1
 8005160:	6713      	str	r3, [r2, #112]	@ 0x70
 8005162:	e00b      	b.n	800517c <HAL_RCC_OscConfig+0x358>
 8005164:	4b5a      	ldr	r3, [pc, #360]	@ (80052d0 <HAL_RCC_OscConfig+0x4ac>)
 8005166:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005168:	4a59      	ldr	r2, [pc, #356]	@ (80052d0 <HAL_RCC_OscConfig+0x4ac>)
 800516a:	f023 0301 	bic.w	r3, r3, #1
 800516e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005170:	4b57      	ldr	r3, [pc, #348]	@ (80052d0 <HAL_RCC_OscConfig+0x4ac>)
 8005172:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005174:	4a56      	ldr	r2, [pc, #344]	@ (80052d0 <HAL_RCC_OscConfig+0x4ac>)
 8005176:	f023 0304 	bic.w	r3, r3, #4
 800517a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d015      	beq.n	80051b0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005184:	f7fd fdce 	bl	8002d24 <HAL_GetTick>
 8005188:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800518a:	e00a      	b.n	80051a2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800518c:	f7fd fdca 	bl	8002d24 <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	f241 3288 	movw	r2, #5000	@ 0x1388
 800519a:	4293      	cmp	r3, r2
 800519c:	d901      	bls.n	80051a2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e0d7      	b.n	8005352 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051a2:	4b4b      	ldr	r3, [pc, #300]	@ (80052d0 <HAL_RCC_OscConfig+0x4ac>)
 80051a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051a6:	f003 0302 	and.w	r3, r3, #2
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d0ee      	beq.n	800518c <HAL_RCC_OscConfig+0x368>
 80051ae:	e014      	b.n	80051da <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051b0:	f7fd fdb8 	bl	8002d24 <HAL_GetTick>
 80051b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051b6:	e00a      	b.n	80051ce <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051b8:	f7fd fdb4 	bl	8002d24 <HAL_GetTick>
 80051bc:	4602      	mov	r2, r0
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d901      	bls.n	80051ce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e0c1      	b.n	8005352 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051ce:	4b40      	ldr	r3, [pc, #256]	@ (80052d0 <HAL_RCC_OscConfig+0x4ac>)
 80051d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051d2:	f003 0302 	and.w	r3, r3, #2
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1ee      	bne.n	80051b8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80051da:	7dfb      	ldrb	r3, [r7, #23]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d105      	bne.n	80051ec <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051e0:	4b3b      	ldr	r3, [pc, #236]	@ (80052d0 <HAL_RCC_OscConfig+0x4ac>)
 80051e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e4:	4a3a      	ldr	r2, [pc, #232]	@ (80052d0 <HAL_RCC_OscConfig+0x4ac>)
 80051e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f000 80ad 	beq.w	8005350 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051f6:	4b36      	ldr	r3, [pc, #216]	@ (80052d0 <HAL_RCC_OscConfig+0x4ac>)
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f003 030c 	and.w	r3, r3, #12
 80051fe:	2b08      	cmp	r3, #8
 8005200:	d060      	beq.n	80052c4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	2b02      	cmp	r3, #2
 8005208:	d145      	bne.n	8005296 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800520a:	4b33      	ldr	r3, [pc, #204]	@ (80052d8 <HAL_RCC_OscConfig+0x4b4>)
 800520c:	2200      	movs	r2, #0
 800520e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005210:	f7fd fd88 	bl	8002d24 <HAL_GetTick>
 8005214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005216:	e008      	b.n	800522a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005218:	f7fd fd84 	bl	8002d24 <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	2b02      	cmp	r3, #2
 8005224:	d901      	bls.n	800522a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e093      	b.n	8005352 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800522a:	4b29      	ldr	r3, [pc, #164]	@ (80052d0 <HAL_RCC_OscConfig+0x4ac>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1f0      	bne.n	8005218 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	69da      	ldr	r2, [r3, #28]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a1b      	ldr	r3, [r3, #32]
 800523e:	431a      	orrs	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005244:	019b      	lsls	r3, r3, #6
 8005246:	431a      	orrs	r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800524c:	085b      	lsrs	r3, r3, #1
 800524e:	3b01      	subs	r3, #1
 8005250:	041b      	lsls	r3, r3, #16
 8005252:	431a      	orrs	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005258:	061b      	lsls	r3, r3, #24
 800525a:	431a      	orrs	r2, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005260:	071b      	lsls	r3, r3, #28
 8005262:	491b      	ldr	r1, [pc, #108]	@ (80052d0 <HAL_RCC_OscConfig+0x4ac>)
 8005264:	4313      	orrs	r3, r2
 8005266:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005268:	4b1b      	ldr	r3, [pc, #108]	@ (80052d8 <HAL_RCC_OscConfig+0x4b4>)
 800526a:	2201      	movs	r2, #1
 800526c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800526e:	f7fd fd59 	bl	8002d24 <HAL_GetTick>
 8005272:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005274:	e008      	b.n	8005288 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005276:	f7fd fd55 	bl	8002d24 <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	2b02      	cmp	r3, #2
 8005282:	d901      	bls.n	8005288 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	e064      	b.n	8005352 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005288:	4b11      	ldr	r3, [pc, #68]	@ (80052d0 <HAL_RCC_OscConfig+0x4ac>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d0f0      	beq.n	8005276 <HAL_RCC_OscConfig+0x452>
 8005294:	e05c      	b.n	8005350 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005296:	4b10      	ldr	r3, [pc, #64]	@ (80052d8 <HAL_RCC_OscConfig+0x4b4>)
 8005298:	2200      	movs	r2, #0
 800529a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800529c:	f7fd fd42 	bl	8002d24 <HAL_GetTick>
 80052a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052a2:	e008      	b.n	80052b6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052a4:	f7fd fd3e 	bl	8002d24 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d901      	bls.n	80052b6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e04d      	b.n	8005352 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052b6:	4b06      	ldr	r3, [pc, #24]	@ (80052d0 <HAL_RCC_OscConfig+0x4ac>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1f0      	bne.n	80052a4 <HAL_RCC_OscConfig+0x480>
 80052c2:	e045      	b.n	8005350 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d107      	bne.n	80052dc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e040      	b.n	8005352 <HAL_RCC_OscConfig+0x52e>
 80052d0:	40023800 	.word	0x40023800
 80052d4:	40007000 	.word	0x40007000
 80052d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80052dc:	4b1f      	ldr	r3, [pc, #124]	@ (800535c <HAL_RCC_OscConfig+0x538>)
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d030      	beq.n	800534c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d129      	bne.n	800534c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005302:	429a      	cmp	r2, r3
 8005304:	d122      	bne.n	800534c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800530c:	4013      	ands	r3, r2
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005312:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005314:	4293      	cmp	r3, r2
 8005316:	d119      	bne.n	800534c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005322:	085b      	lsrs	r3, r3, #1
 8005324:	3b01      	subs	r3, #1
 8005326:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005328:	429a      	cmp	r2, r3
 800532a:	d10f      	bne.n	800534c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005336:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005338:	429a      	cmp	r2, r3
 800533a:	d107      	bne.n	800534c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005346:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005348:	429a      	cmp	r2, r3
 800534a:	d001      	beq.n	8005350 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e000      	b.n	8005352 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3718      	adds	r7, #24
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	40023800 	.word	0x40023800

08005360 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d101      	bne.n	8005372 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e041      	b.n	80053f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005378:	b2db      	uxtb	r3, r3
 800537a:	2b00      	cmp	r3, #0
 800537c:	d106      	bne.n	800538c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f7fd fa52 	bl	8002830 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2202      	movs	r2, #2
 8005390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	3304      	adds	r3, #4
 800539c:	4619      	mov	r1, r3
 800539e:	4610      	mov	r0, r2
 80053a0:	f000 fa06 	bl	80057b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3708      	adds	r7, #8
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b082      	sub	sp, #8
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d101      	bne.n	8005410 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e041      	b.n	8005494 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005416:	b2db      	uxtb	r3, r3
 8005418:	2b00      	cmp	r3, #0
 800541a:	d106      	bne.n	800542a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f7fd f9e3 	bl	80027f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2202      	movs	r2, #2
 800542e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	3304      	adds	r3, #4
 800543a:	4619      	mov	r1, r3
 800543c:	4610      	mov	r0, r2
 800543e:	f000 f9b7 	bl	80057b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2201      	movs	r2, #1
 800544e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3708      	adds	r7, #8
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d109      	bne.n	80054c0 <HAL_TIM_PWM_Start+0x24>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	bf14      	ite	ne
 80054b8:	2301      	movne	r3, #1
 80054ba:	2300      	moveq	r3, #0
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	e022      	b.n	8005506 <HAL_TIM_PWM_Start+0x6a>
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	2b04      	cmp	r3, #4
 80054c4:	d109      	bne.n	80054da <HAL_TIM_PWM_Start+0x3e>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	bf14      	ite	ne
 80054d2:	2301      	movne	r3, #1
 80054d4:	2300      	moveq	r3, #0
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	e015      	b.n	8005506 <HAL_TIM_PWM_Start+0x6a>
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	2b08      	cmp	r3, #8
 80054de:	d109      	bne.n	80054f4 <HAL_TIM_PWM_Start+0x58>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	bf14      	ite	ne
 80054ec:	2301      	movne	r3, #1
 80054ee:	2300      	moveq	r3, #0
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	e008      	b.n	8005506 <HAL_TIM_PWM_Start+0x6a>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	bf14      	ite	ne
 8005500:	2301      	movne	r3, #1
 8005502:	2300      	moveq	r3, #0
 8005504:	b2db      	uxtb	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d001      	beq.n	800550e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e07c      	b.n	8005608 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d104      	bne.n	800551e <HAL_TIM_PWM_Start+0x82>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2202      	movs	r2, #2
 8005518:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800551c:	e013      	b.n	8005546 <HAL_TIM_PWM_Start+0xaa>
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	2b04      	cmp	r3, #4
 8005522:	d104      	bne.n	800552e <HAL_TIM_PWM_Start+0x92>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2202      	movs	r2, #2
 8005528:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800552c:	e00b      	b.n	8005546 <HAL_TIM_PWM_Start+0xaa>
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	2b08      	cmp	r3, #8
 8005532:	d104      	bne.n	800553e <HAL_TIM_PWM_Start+0xa2>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2202      	movs	r2, #2
 8005538:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800553c:	e003      	b.n	8005546 <HAL_TIM_PWM_Start+0xaa>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2202      	movs	r2, #2
 8005542:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2201      	movs	r2, #1
 800554c:	6839      	ldr	r1, [r7, #0]
 800554e:	4618      	mov	r0, r3
 8005550:	f000 fb8a 	bl	8005c68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a2d      	ldr	r2, [pc, #180]	@ (8005610 <HAL_TIM_PWM_Start+0x174>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d004      	beq.n	8005568 <HAL_TIM_PWM_Start+0xcc>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a2c      	ldr	r2, [pc, #176]	@ (8005614 <HAL_TIM_PWM_Start+0x178>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d101      	bne.n	800556c <HAL_TIM_PWM_Start+0xd0>
 8005568:	2301      	movs	r3, #1
 800556a:	e000      	b.n	800556e <HAL_TIM_PWM_Start+0xd2>
 800556c:	2300      	movs	r3, #0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d007      	beq.n	8005582 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005580:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a22      	ldr	r2, [pc, #136]	@ (8005610 <HAL_TIM_PWM_Start+0x174>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d022      	beq.n	80055d2 <HAL_TIM_PWM_Start+0x136>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005594:	d01d      	beq.n	80055d2 <HAL_TIM_PWM_Start+0x136>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a1f      	ldr	r2, [pc, #124]	@ (8005618 <HAL_TIM_PWM_Start+0x17c>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d018      	beq.n	80055d2 <HAL_TIM_PWM_Start+0x136>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a1d      	ldr	r2, [pc, #116]	@ (800561c <HAL_TIM_PWM_Start+0x180>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d013      	beq.n	80055d2 <HAL_TIM_PWM_Start+0x136>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a1c      	ldr	r2, [pc, #112]	@ (8005620 <HAL_TIM_PWM_Start+0x184>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d00e      	beq.n	80055d2 <HAL_TIM_PWM_Start+0x136>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a16      	ldr	r2, [pc, #88]	@ (8005614 <HAL_TIM_PWM_Start+0x178>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d009      	beq.n	80055d2 <HAL_TIM_PWM_Start+0x136>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a18      	ldr	r2, [pc, #96]	@ (8005624 <HAL_TIM_PWM_Start+0x188>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d004      	beq.n	80055d2 <HAL_TIM_PWM_Start+0x136>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a16      	ldr	r2, [pc, #88]	@ (8005628 <HAL_TIM_PWM_Start+0x18c>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d111      	bne.n	80055f6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f003 0307 	and.w	r3, r3, #7
 80055dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2b06      	cmp	r3, #6
 80055e2:	d010      	beq.n	8005606 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f042 0201 	orr.w	r2, r2, #1
 80055f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055f4:	e007      	b.n	8005606 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f042 0201 	orr.w	r2, r2, #1
 8005604:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3710      	adds	r7, #16
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	40010000 	.word	0x40010000
 8005614:	40010400 	.word	0x40010400
 8005618:	40000400 	.word	0x40000400
 800561c:	40000800 	.word	0x40000800
 8005620:	40000c00 	.word	0x40000c00
 8005624:	40014000 	.word	0x40014000
 8005628:	40001800 	.word	0x40001800

0800562c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005638:	2300      	movs	r3, #0
 800563a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005642:	2b01      	cmp	r3, #1
 8005644:	d101      	bne.n	800564a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005646:	2302      	movs	r3, #2
 8005648:	e0ae      	b.n	80057a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2b0c      	cmp	r3, #12
 8005656:	f200 809f 	bhi.w	8005798 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800565a:	a201      	add	r2, pc, #4	@ (adr r2, 8005660 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800565c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005660:	08005695 	.word	0x08005695
 8005664:	08005799 	.word	0x08005799
 8005668:	08005799 	.word	0x08005799
 800566c:	08005799 	.word	0x08005799
 8005670:	080056d5 	.word	0x080056d5
 8005674:	08005799 	.word	0x08005799
 8005678:	08005799 	.word	0x08005799
 800567c:	08005799 	.word	0x08005799
 8005680:	08005717 	.word	0x08005717
 8005684:	08005799 	.word	0x08005799
 8005688:	08005799 	.word	0x08005799
 800568c:	08005799 	.word	0x08005799
 8005690:	08005757 	.word	0x08005757
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68b9      	ldr	r1, [r7, #8]
 800569a:	4618      	mov	r0, r3
 800569c:	f000 f934 	bl	8005908 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	699a      	ldr	r2, [r3, #24]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f042 0208 	orr.w	r2, r2, #8
 80056ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	699a      	ldr	r2, [r3, #24]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f022 0204 	bic.w	r2, r2, #4
 80056be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6999      	ldr	r1, [r3, #24]
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	691a      	ldr	r2, [r3, #16]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	430a      	orrs	r2, r1
 80056d0:	619a      	str	r2, [r3, #24]
      break;
 80056d2:	e064      	b.n	800579e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68b9      	ldr	r1, [r7, #8]
 80056da:	4618      	mov	r0, r3
 80056dc:	f000 f984 	bl	80059e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	699a      	ldr	r2, [r3, #24]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	699a      	ldr	r2, [r3, #24]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	6999      	ldr	r1, [r3, #24]
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	021a      	lsls	r2, r3, #8
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	430a      	orrs	r2, r1
 8005712:	619a      	str	r2, [r3, #24]
      break;
 8005714:	e043      	b.n	800579e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68b9      	ldr	r1, [r7, #8]
 800571c:	4618      	mov	r0, r3
 800571e:	f000 f9d9 	bl	8005ad4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	69da      	ldr	r2, [r3, #28]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f042 0208 	orr.w	r2, r2, #8
 8005730:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	69da      	ldr	r2, [r3, #28]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f022 0204 	bic.w	r2, r2, #4
 8005740:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	69d9      	ldr	r1, [r3, #28]
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	691a      	ldr	r2, [r3, #16]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	430a      	orrs	r2, r1
 8005752:	61da      	str	r2, [r3, #28]
      break;
 8005754:	e023      	b.n	800579e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68b9      	ldr	r1, [r7, #8]
 800575c:	4618      	mov	r0, r3
 800575e:	f000 fa2d 	bl	8005bbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	69da      	ldr	r2, [r3, #28]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005770:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	69da      	ldr	r2, [r3, #28]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005780:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	69d9      	ldr	r1, [r3, #28]
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	021a      	lsls	r2, r3, #8
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	430a      	orrs	r2, r1
 8005794:	61da      	str	r2, [r3, #28]
      break;
 8005796:	e002      	b.n	800579e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	75fb      	strb	r3, [r7, #23]
      break;
 800579c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80057a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3718      	adds	r7, #24
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a46      	ldr	r2, [pc, #280]	@ (80058dc <TIM_Base_SetConfig+0x12c>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d013      	beq.n	80057f0 <TIM_Base_SetConfig+0x40>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057ce:	d00f      	beq.n	80057f0 <TIM_Base_SetConfig+0x40>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a43      	ldr	r2, [pc, #268]	@ (80058e0 <TIM_Base_SetConfig+0x130>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d00b      	beq.n	80057f0 <TIM_Base_SetConfig+0x40>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a42      	ldr	r2, [pc, #264]	@ (80058e4 <TIM_Base_SetConfig+0x134>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d007      	beq.n	80057f0 <TIM_Base_SetConfig+0x40>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a41      	ldr	r2, [pc, #260]	@ (80058e8 <TIM_Base_SetConfig+0x138>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d003      	beq.n	80057f0 <TIM_Base_SetConfig+0x40>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a40      	ldr	r2, [pc, #256]	@ (80058ec <TIM_Base_SetConfig+0x13c>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d108      	bne.n	8005802 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	4313      	orrs	r3, r2
 8005800:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a35      	ldr	r2, [pc, #212]	@ (80058dc <TIM_Base_SetConfig+0x12c>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d02b      	beq.n	8005862 <TIM_Base_SetConfig+0xb2>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005810:	d027      	beq.n	8005862 <TIM_Base_SetConfig+0xb2>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a32      	ldr	r2, [pc, #200]	@ (80058e0 <TIM_Base_SetConfig+0x130>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d023      	beq.n	8005862 <TIM_Base_SetConfig+0xb2>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a31      	ldr	r2, [pc, #196]	@ (80058e4 <TIM_Base_SetConfig+0x134>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d01f      	beq.n	8005862 <TIM_Base_SetConfig+0xb2>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a30      	ldr	r2, [pc, #192]	@ (80058e8 <TIM_Base_SetConfig+0x138>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d01b      	beq.n	8005862 <TIM_Base_SetConfig+0xb2>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a2f      	ldr	r2, [pc, #188]	@ (80058ec <TIM_Base_SetConfig+0x13c>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d017      	beq.n	8005862 <TIM_Base_SetConfig+0xb2>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a2e      	ldr	r2, [pc, #184]	@ (80058f0 <TIM_Base_SetConfig+0x140>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d013      	beq.n	8005862 <TIM_Base_SetConfig+0xb2>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a2d      	ldr	r2, [pc, #180]	@ (80058f4 <TIM_Base_SetConfig+0x144>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d00f      	beq.n	8005862 <TIM_Base_SetConfig+0xb2>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a2c      	ldr	r2, [pc, #176]	@ (80058f8 <TIM_Base_SetConfig+0x148>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d00b      	beq.n	8005862 <TIM_Base_SetConfig+0xb2>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a2b      	ldr	r2, [pc, #172]	@ (80058fc <TIM_Base_SetConfig+0x14c>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d007      	beq.n	8005862 <TIM_Base_SetConfig+0xb2>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a2a      	ldr	r2, [pc, #168]	@ (8005900 <TIM_Base_SetConfig+0x150>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d003      	beq.n	8005862 <TIM_Base_SetConfig+0xb2>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a29      	ldr	r2, [pc, #164]	@ (8005904 <TIM_Base_SetConfig+0x154>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d108      	bne.n	8005874 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005868:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	4313      	orrs	r3, r2
 8005872:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	695b      	ldr	r3, [r3, #20]
 800587e:	4313      	orrs	r3, r2
 8005880:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	689a      	ldr	r2, [r3, #8]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a10      	ldr	r2, [pc, #64]	@ (80058dc <TIM_Base_SetConfig+0x12c>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d003      	beq.n	80058a8 <TIM_Base_SetConfig+0xf8>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a12      	ldr	r2, [pc, #72]	@ (80058ec <TIM_Base_SetConfig+0x13c>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d103      	bne.n	80058b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	691a      	ldr	r2, [r3, #16]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	f003 0301 	and.w	r3, r3, #1
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d105      	bne.n	80058ce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	f023 0201 	bic.w	r2, r3, #1
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	611a      	str	r2, [r3, #16]
  }
}
 80058ce:	bf00      	nop
 80058d0:	3714      	adds	r7, #20
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	40010000 	.word	0x40010000
 80058e0:	40000400 	.word	0x40000400
 80058e4:	40000800 	.word	0x40000800
 80058e8:	40000c00 	.word	0x40000c00
 80058ec:	40010400 	.word	0x40010400
 80058f0:	40014000 	.word	0x40014000
 80058f4:	40014400 	.word	0x40014400
 80058f8:	40014800 	.word	0x40014800
 80058fc:	40001800 	.word	0x40001800
 8005900:	40001c00 	.word	0x40001c00
 8005904:	40002000 	.word	0x40002000

08005908 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005908:	b480      	push	{r7}
 800590a:	b087      	sub	sp, #28
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a1b      	ldr	r3, [r3, #32]
 800591c:	f023 0201 	bic.w	r2, r3, #1
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f023 0303 	bic.w	r3, r3, #3
 800593e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	4313      	orrs	r3, r2
 8005948:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f023 0302 	bic.w	r3, r3, #2
 8005950:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	4313      	orrs	r3, r2
 800595a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a20      	ldr	r2, [pc, #128]	@ (80059e0 <TIM_OC1_SetConfig+0xd8>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d003      	beq.n	800596c <TIM_OC1_SetConfig+0x64>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a1f      	ldr	r2, [pc, #124]	@ (80059e4 <TIM_OC1_SetConfig+0xdc>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d10c      	bne.n	8005986 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	f023 0308 	bic.w	r3, r3, #8
 8005972:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	697a      	ldr	r2, [r7, #20]
 800597a:	4313      	orrs	r3, r2
 800597c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	f023 0304 	bic.w	r3, r3, #4
 8005984:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a15      	ldr	r2, [pc, #84]	@ (80059e0 <TIM_OC1_SetConfig+0xd8>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d003      	beq.n	8005996 <TIM_OC1_SetConfig+0x8e>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a14      	ldr	r2, [pc, #80]	@ (80059e4 <TIM_OC1_SetConfig+0xdc>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d111      	bne.n	80059ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800599c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80059a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	695b      	ldr	r3, [r3, #20]
 80059aa:	693a      	ldr	r2, [r7, #16]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	693a      	ldr	r2, [r7, #16]
 80059be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	685a      	ldr	r2, [r3, #4]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	621a      	str	r2, [r3, #32]
}
 80059d4:	bf00      	nop
 80059d6:	371c      	adds	r7, #28
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr
 80059e0:	40010000 	.word	0x40010000
 80059e4:	40010400 	.word	0x40010400

080059e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b087      	sub	sp, #28
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a1b      	ldr	r3, [r3, #32]
 80059fc:	f023 0210 	bic.w	r2, r3, #16
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	021b      	lsls	r3, r3, #8
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	f023 0320 	bic.w	r3, r3, #32
 8005a32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	011b      	lsls	r3, r3, #4
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a22      	ldr	r2, [pc, #136]	@ (8005acc <TIM_OC2_SetConfig+0xe4>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d003      	beq.n	8005a50 <TIM_OC2_SetConfig+0x68>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a21      	ldr	r2, [pc, #132]	@ (8005ad0 <TIM_OC2_SetConfig+0xe8>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d10d      	bne.n	8005a6c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	011b      	lsls	r3, r3, #4
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a6a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a17      	ldr	r2, [pc, #92]	@ (8005acc <TIM_OC2_SetConfig+0xe4>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d003      	beq.n	8005a7c <TIM_OC2_SetConfig+0x94>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a16      	ldr	r2, [pc, #88]	@ (8005ad0 <TIM_OC2_SetConfig+0xe8>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d113      	bne.n	8005aa4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	695b      	ldr	r3, [r3, #20]
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	693a      	ldr	r2, [r7, #16]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	699b      	ldr	r3, [r3, #24]
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	693a      	ldr	r2, [r7, #16]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	685a      	ldr	r2, [r3, #4]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	621a      	str	r2, [r3, #32]
}
 8005abe:	bf00      	nop
 8005ac0:	371c      	adds	r7, #28
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	40010000 	.word	0x40010000
 8005ad0:	40010400 	.word	0x40010400

08005ad4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b087      	sub	sp, #28
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a1b      	ldr	r3, [r3, #32]
 8005ae2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a1b      	ldr	r3, [r3, #32]
 8005ae8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	69db      	ldr	r3, [r3, #28]
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f023 0303 	bic.w	r3, r3, #3
 8005b0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	021b      	lsls	r3, r3, #8
 8005b24:	697a      	ldr	r2, [r7, #20]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a21      	ldr	r2, [pc, #132]	@ (8005bb4 <TIM_OC3_SetConfig+0xe0>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d003      	beq.n	8005b3a <TIM_OC3_SetConfig+0x66>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a20      	ldr	r2, [pc, #128]	@ (8005bb8 <TIM_OC3_SetConfig+0xe4>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d10d      	bne.n	8005b56 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	021b      	lsls	r3, r3, #8
 8005b48:	697a      	ldr	r2, [r7, #20]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a16      	ldr	r2, [pc, #88]	@ (8005bb4 <TIM_OC3_SetConfig+0xe0>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d003      	beq.n	8005b66 <TIM_OC3_SetConfig+0x92>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a15      	ldr	r2, [pc, #84]	@ (8005bb8 <TIM_OC3_SetConfig+0xe4>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d113      	bne.n	8005b8e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005b74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	011b      	lsls	r3, r3, #4
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	011b      	lsls	r3, r3, #4
 8005b88:	693a      	ldr	r2, [r7, #16]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	685a      	ldr	r2, [r3, #4]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	621a      	str	r2, [r3, #32]
}
 8005ba8:	bf00      	nop
 8005baa:	371c      	adds	r7, #28
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr
 8005bb4:	40010000 	.word	0x40010000
 8005bb8:	40010400 	.word	0x40010400

08005bbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b087      	sub	sp, #28
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
 8005bca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a1b      	ldr	r3, [r3, #32]
 8005bd0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	69db      	ldr	r3, [r3, #28]
 8005be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	021b      	lsls	r3, r3, #8
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	031b      	lsls	r3, r3, #12
 8005c0e:	693a      	ldr	r2, [r7, #16]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a12      	ldr	r2, [pc, #72]	@ (8005c60 <TIM_OC4_SetConfig+0xa4>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d003      	beq.n	8005c24 <TIM_OC4_SetConfig+0x68>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a11      	ldr	r2, [pc, #68]	@ (8005c64 <TIM_OC4_SetConfig+0xa8>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d109      	bne.n	8005c38 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	695b      	ldr	r3, [r3, #20]
 8005c30:	019b      	lsls	r3, r3, #6
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	685a      	ldr	r2, [r3, #4]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	693a      	ldr	r2, [r7, #16]
 8005c50:	621a      	str	r2, [r3, #32]
}
 8005c52:	bf00      	nop
 8005c54:	371c      	adds	r7, #28
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	40010000 	.word	0x40010000
 8005c64:	40010400 	.word	0x40010400

08005c68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b087      	sub	sp, #28
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	f003 031f 	and.w	r3, r3, #31
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6a1a      	ldr	r2, [r3, #32]
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	43db      	mvns	r3, r3
 8005c8a:	401a      	ands	r2, r3
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6a1a      	ldr	r2, [r3, #32]
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	f003 031f 	and.w	r3, r3, #31
 8005c9a:	6879      	ldr	r1, [r7, #4]
 8005c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8005ca0:	431a      	orrs	r2, r3
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	621a      	str	r2, [r3, #32]
}
 8005ca6:	bf00      	nop
 8005ca8:	371c      	adds	r7, #28
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
	...

08005cb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d101      	bne.n	8005ccc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cc8:	2302      	movs	r3, #2
 8005cca:	e05a      	b.n	8005d82 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2202      	movs	r2, #2
 8005cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cf2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a21      	ldr	r2, [pc, #132]	@ (8005d90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d022      	beq.n	8005d56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d18:	d01d      	beq.n	8005d56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a1d      	ldr	r2, [pc, #116]	@ (8005d94 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d018      	beq.n	8005d56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a1b      	ldr	r2, [pc, #108]	@ (8005d98 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d013      	beq.n	8005d56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a1a      	ldr	r2, [pc, #104]	@ (8005d9c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d00e      	beq.n	8005d56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a18      	ldr	r2, [pc, #96]	@ (8005da0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d009      	beq.n	8005d56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a17      	ldr	r2, [pc, #92]	@ (8005da4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d004      	beq.n	8005d56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a15      	ldr	r2, [pc, #84]	@ (8005da8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d10c      	bne.n	8005d70 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68ba      	ldr	r2, [r7, #8]
 8005d6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3714      	adds	r7, #20
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop
 8005d90:	40010000 	.word	0x40010000
 8005d94:	40000400 	.word	0x40000400
 8005d98:	40000800 	.word	0x40000800
 8005d9c:	40000c00 	.word	0x40000c00
 8005da0:	40010400 	.word	0x40010400
 8005da4:	40014000 	.word	0x40014000
 8005da8:	40001800 	.word	0x40001800

08005dac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d101      	bne.n	8005dbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e042      	b.n	8005e44 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d106      	bne.n	8005dd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f7fc fdce 	bl	8002974 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2224      	movs	r2, #36	@ 0x24
 8005ddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68da      	ldr	r2, [r3, #12]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005dee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 f973 	bl	80060dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	691a      	ldr	r2, [r3, #16]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005e04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	695a      	ldr	r2, [r3, #20]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005e14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68da      	ldr	r2, [r3, #12]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005e24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2220      	movs	r2, #32
 8005e30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2220      	movs	r2, #32
 8005e38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3708      	adds	r7, #8
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b08a      	sub	sp, #40	@ 0x28
 8005e50:	af02      	add	r7, sp, #8
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	603b      	str	r3, [r7, #0]
 8005e58:	4613      	mov	r3, r2
 8005e5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	2b20      	cmp	r3, #32
 8005e6a:	d175      	bne.n	8005f58 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d002      	beq.n	8005e78 <HAL_UART_Transmit+0x2c>
 8005e72:	88fb      	ldrh	r3, [r7, #6]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d101      	bne.n	8005e7c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e06e      	b.n	8005f5a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2221      	movs	r2, #33	@ 0x21
 8005e86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e8a:	f7fc ff4b 	bl	8002d24 <HAL_GetTick>
 8005e8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	88fa      	ldrh	r2, [r7, #6]
 8005e94:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	88fa      	ldrh	r2, [r7, #6]
 8005e9a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ea4:	d108      	bne.n	8005eb8 <HAL_UART_Transmit+0x6c>
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d104      	bne.n	8005eb8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	61bb      	str	r3, [r7, #24]
 8005eb6:	e003      	b.n	8005ec0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ec0:	e02e      	b.n	8005f20 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	9300      	str	r3, [sp, #0]
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	2180      	movs	r1, #128	@ 0x80
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f000 f848 	bl	8005f62 <UART_WaitOnFlagUntilTimeout>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d005      	beq.n	8005ee4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2220      	movs	r2, #32
 8005edc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e03a      	b.n	8005f5a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d10b      	bne.n	8005f02 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	881b      	ldrh	r3, [r3, #0]
 8005eee:	461a      	mov	r2, r3
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ef8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	3302      	adds	r3, #2
 8005efe:	61bb      	str	r3, [r7, #24]
 8005f00:	e007      	b.n	8005f12 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	781a      	ldrb	r2, [r3, #0]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	3301      	adds	r3, #1
 8005f10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1cb      	bne.n	8005ec2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	9300      	str	r3, [sp, #0]
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	2200      	movs	r2, #0
 8005f32:	2140      	movs	r1, #64	@ 0x40
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f000 f814 	bl	8005f62 <UART_WaitOnFlagUntilTimeout>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d005      	beq.n	8005f4c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2220      	movs	r2, #32
 8005f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	e006      	b.n	8005f5a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2220      	movs	r2, #32
 8005f50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005f54:	2300      	movs	r3, #0
 8005f56:	e000      	b.n	8005f5a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005f58:	2302      	movs	r3, #2
  }
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3720      	adds	r7, #32
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b086      	sub	sp, #24
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	60f8      	str	r0, [r7, #12]
 8005f6a:	60b9      	str	r1, [r7, #8]
 8005f6c:	603b      	str	r3, [r7, #0]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f72:	e03b      	b.n	8005fec <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f74:	6a3b      	ldr	r3, [r7, #32]
 8005f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f7a:	d037      	beq.n	8005fec <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f7c:	f7fc fed2 	bl	8002d24 <HAL_GetTick>
 8005f80:	4602      	mov	r2, r0
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	6a3a      	ldr	r2, [r7, #32]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d302      	bcc.n	8005f92 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f8c:	6a3b      	ldr	r3, [r7, #32]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d101      	bne.n	8005f96 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e03a      	b.n	800600c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	f003 0304 	and.w	r3, r3, #4
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d023      	beq.n	8005fec <UART_WaitOnFlagUntilTimeout+0x8a>
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	2b80      	cmp	r3, #128	@ 0x80
 8005fa8:	d020      	beq.n	8005fec <UART_WaitOnFlagUntilTimeout+0x8a>
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	2b40      	cmp	r3, #64	@ 0x40
 8005fae:	d01d      	beq.n	8005fec <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 0308 	and.w	r3, r3, #8
 8005fba:	2b08      	cmp	r3, #8
 8005fbc:	d116      	bne.n	8005fec <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	617b      	str	r3, [r7, #20]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	617b      	str	r3, [r7, #20]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	617b      	str	r3, [r7, #20]
 8005fd2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f000 f81d 	bl	8006014 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2208      	movs	r2, #8
 8005fde:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e00f      	b.n	800600c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	68ba      	ldr	r2, [r7, #8]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	bf0c      	ite	eq
 8005ffc:	2301      	moveq	r3, #1
 8005ffe:	2300      	movne	r3, #0
 8006000:	b2db      	uxtb	r3, r3
 8006002:	461a      	mov	r2, r3
 8006004:	79fb      	ldrb	r3, [r7, #7]
 8006006:	429a      	cmp	r2, r3
 8006008:	d0b4      	beq.n	8005f74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	4618      	mov	r0, r3
 800600e:	3718      	adds	r7, #24
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006014:	b480      	push	{r7}
 8006016:	b095      	sub	sp, #84	@ 0x54
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	330c      	adds	r3, #12
 8006022:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006024:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006026:	e853 3f00 	ldrex	r3, [r3]
 800602a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800602c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800602e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006032:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	330c      	adds	r3, #12
 800603a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800603c:	643a      	str	r2, [r7, #64]	@ 0x40
 800603e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006040:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006042:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006044:	e841 2300 	strex	r3, r2, [r1]
 8006048:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800604a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1e5      	bne.n	800601c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	3314      	adds	r3, #20
 8006056:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006058:	6a3b      	ldr	r3, [r7, #32]
 800605a:	e853 3f00 	ldrex	r3, [r3]
 800605e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	f023 0301 	bic.w	r3, r3, #1
 8006066:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	3314      	adds	r3, #20
 800606e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006070:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006072:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006074:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006076:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006078:	e841 2300 	strex	r3, r2, [r1]
 800607c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800607e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006080:	2b00      	cmp	r3, #0
 8006082:	d1e5      	bne.n	8006050 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006088:	2b01      	cmp	r3, #1
 800608a:	d119      	bne.n	80060c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	330c      	adds	r3, #12
 8006092:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	e853 3f00 	ldrex	r3, [r3]
 800609a:	60bb      	str	r3, [r7, #8]
   return(result);
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	f023 0310 	bic.w	r3, r3, #16
 80060a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	330c      	adds	r3, #12
 80060aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060ac:	61ba      	str	r2, [r7, #24]
 80060ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b0:	6979      	ldr	r1, [r7, #20]
 80060b2:	69ba      	ldr	r2, [r7, #24]
 80060b4:	e841 2300 	strex	r3, r2, [r1]
 80060b8:	613b      	str	r3, [r7, #16]
   return(result);
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d1e5      	bne.n	800608c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2220      	movs	r2, #32
 80060c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80060ce:	bf00      	nop
 80060d0:	3754      	adds	r7, #84	@ 0x54
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
	...

080060dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060e0:	b0c0      	sub	sp, #256	@ 0x100
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80060f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060f8:	68d9      	ldr	r1, [r3, #12]
 80060fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	ea40 0301 	orr.w	r3, r0, r1
 8006104:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800610a:	689a      	ldr	r2, [r3, #8]
 800610c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	431a      	orrs	r2, r3
 8006114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006118:	695b      	ldr	r3, [r3, #20]
 800611a:	431a      	orrs	r2, r3
 800611c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006120:	69db      	ldr	r3, [r3, #28]
 8006122:	4313      	orrs	r3, r2
 8006124:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006134:	f021 010c 	bic.w	r1, r1, #12
 8006138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006142:	430b      	orrs	r3, r1
 8006144:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	695b      	ldr	r3, [r3, #20]
 800614e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006156:	6999      	ldr	r1, [r3, #24]
 8006158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	ea40 0301 	orr.w	r3, r0, r1
 8006162:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	4b8f      	ldr	r3, [pc, #572]	@ (80063a8 <UART_SetConfig+0x2cc>)
 800616c:	429a      	cmp	r2, r3
 800616e:	d005      	beq.n	800617c <UART_SetConfig+0xa0>
 8006170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	4b8d      	ldr	r3, [pc, #564]	@ (80063ac <UART_SetConfig+0x2d0>)
 8006178:	429a      	cmp	r2, r3
 800617a:	d104      	bne.n	8006186 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800617c:	f7fe fc0e 	bl	800499c <HAL_RCC_GetPCLK2Freq>
 8006180:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006184:	e003      	b.n	800618e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006186:	f7fe fbf5 	bl	8004974 <HAL_RCC_GetPCLK1Freq>
 800618a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800618e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006192:	69db      	ldr	r3, [r3, #28]
 8006194:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006198:	f040 810c 	bne.w	80063b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800619c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061a0:	2200      	movs	r2, #0
 80061a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80061a6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80061aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80061ae:	4622      	mov	r2, r4
 80061b0:	462b      	mov	r3, r5
 80061b2:	1891      	adds	r1, r2, r2
 80061b4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80061b6:	415b      	adcs	r3, r3
 80061b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80061ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80061be:	4621      	mov	r1, r4
 80061c0:	eb12 0801 	adds.w	r8, r2, r1
 80061c4:	4629      	mov	r1, r5
 80061c6:	eb43 0901 	adc.w	r9, r3, r1
 80061ca:	f04f 0200 	mov.w	r2, #0
 80061ce:	f04f 0300 	mov.w	r3, #0
 80061d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061de:	4690      	mov	r8, r2
 80061e0:	4699      	mov	r9, r3
 80061e2:	4623      	mov	r3, r4
 80061e4:	eb18 0303 	adds.w	r3, r8, r3
 80061e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80061ec:	462b      	mov	r3, r5
 80061ee:	eb49 0303 	adc.w	r3, r9, r3
 80061f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80061f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006202:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006206:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800620a:	460b      	mov	r3, r1
 800620c:	18db      	adds	r3, r3, r3
 800620e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006210:	4613      	mov	r3, r2
 8006212:	eb42 0303 	adc.w	r3, r2, r3
 8006216:	657b      	str	r3, [r7, #84]	@ 0x54
 8006218:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800621c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006220:	f7fa fde2 	bl	8000de8 <__aeabi_uldivmod>
 8006224:	4602      	mov	r2, r0
 8006226:	460b      	mov	r3, r1
 8006228:	4b61      	ldr	r3, [pc, #388]	@ (80063b0 <UART_SetConfig+0x2d4>)
 800622a:	fba3 2302 	umull	r2, r3, r3, r2
 800622e:	095b      	lsrs	r3, r3, #5
 8006230:	011c      	lsls	r4, r3, #4
 8006232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006236:	2200      	movs	r2, #0
 8006238:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800623c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006240:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006244:	4642      	mov	r2, r8
 8006246:	464b      	mov	r3, r9
 8006248:	1891      	adds	r1, r2, r2
 800624a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800624c:	415b      	adcs	r3, r3
 800624e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006250:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006254:	4641      	mov	r1, r8
 8006256:	eb12 0a01 	adds.w	sl, r2, r1
 800625a:	4649      	mov	r1, r9
 800625c:	eb43 0b01 	adc.w	fp, r3, r1
 8006260:	f04f 0200 	mov.w	r2, #0
 8006264:	f04f 0300 	mov.w	r3, #0
 8006268:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800626c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006270:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006274:	4692      	mov	sl, r2
 8006276:	469b      	mov	fp, r3
 8006278:	4643      	mov	r3, r8
 800627a:	eb1a 0303 	adds.w	r3, sl, r3
 800627e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006282:	464b      	mov	r3, r9
 8006284:	eb4b 0303 	adc.w	r3, fp, r3
 8006288:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800628c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006298:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800629c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80062a0:	460b      	mov	r3, r1
 80062a2:	18db      	adds	r3, r3, r3
 80062a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80062a6:	4613      	mov	r3, r2
 80062a8:	eb42 0303 	adc.w	r3, r2, r3
 80062ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80062ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80062b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80062b6:	f7fa fd97 	bl	8000de8 <__aeabi_uldivmod>
 80062ba:	4602      	mov	r2, r0
 80062bc:	460b      	mov	r3, r1
 80062be:	4611      	mov	r1, r2
 80062c0:	4b3b      	ldr	r3, [pc, #236]	@ (80063b0 <UART_SetConfig+0x2d4>)
 80062c2:	fba3 2301 	umull	r2, r3, r3, r1
 80062c6:	095b      	lsrs	r3, r3, #5
 80062c8:	2264      	movs	r2, #100	@ 0x64
 80062ca:	fb02 f303 	mul.w	r3, r2, r3
 80062ce:	1acb      	subs	r3, r1, r3
 80062d0:	00db      	lsls	r3, r3, #3
 80062d2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80062d6:	4b36      	ldr	r3, [pc, #216]	@ (80063b0 <UART_SetConfig+0x2d4>)
 80062d8:	fba3 2302 	umull	r2, r3, r3, r2
 80062dc:	095b      	lsrs	r3, r3, #5
 80062de:	005b      	lsls	r3, r3, #1
 80062e0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80062e4:	441c      	add	r4, r3
 80062e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062ea:	2200      	movs	r2, #0
 80062ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80062f0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80062f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80062f8:	4642      	mov	r2, r8
 80062fa:	464b      	mov	r3, r9
 80062fc:	1891      	adds	r1, r2, r2
 80062fe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006300:	415b      	adcs	r3, r3
 8006302:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006304:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006308:	4641      	mov	r1, r8
 800630a:	1851      	adds	r1, r2, r1
 800630c:	6339      	str	r1, [r7, #48]	@ 0x30
 800630e:	4649      	mov	r1, r9
 8006310:	414b      	adcs	r3, r1
 8006312:	637b      	str	r3, [r7, #52]	@ 0x34
 8006314:	f04f 0200 	mov.w	r2, #0
 8006318:	f04f 0300 	mov.w	r3, #0
 800631c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006320:	4659      	mov	r1, fp
 8006322:	00cb      	lsls	r3, r1, #3
 8006324:	4651      	mov	r1, sl
 8006326:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800632a:	4651      	mov	r1, sl
 800632c:	00ca      	lsls	r2, r1, #3
 800632e:	4610      	mov	r0, r2
 8006330:	4619      	mov	r1, r3
 8006332:	4603      	mov	r3, r0
 8006334:	4642      	mov	r2, r8
 8006336:	189b      	adds	r3, r3, r2
 8006338:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800633c:	464b      	mov	r3, r9
 800633e:	460a      	mov	r2, r1
 8006340:	eb42 0303 	adc.w	r3, r2, r3
 8006344:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006354:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006358:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800635c:	460b      	mov	r3, r1
 800635e:	18db      	adds	r3, r3, r3
 8006360:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006362:	4613      	mov	r3, r2
 8006364:	eb42 0303 	adc.w	r3, r2, r3
 8006368:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800636a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800636e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006372:	f7fa fd39 	bl	8000de8 <__aeabi_uldivmod>
 8006376:	4602      	mov	r2, r0
 8006378:	460b      	mov	r3, r1
 800637a:	4b0d      	ldr	r3, [pc, #52]	@ (80063b0 <UART_SetConfig+0x2d4>)
 800637c:	fba3 1302 	umull	r1, r3, r3, r2
 8006380:	095b      	lsrs	r3, r3, #5
 8006382:	2164      	movs	r1, #100	@ 0x64
 8006384:	fb01 f303 	mul.w	r3, r1, r3
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	00db      	lsls	r3, r3, #3
 800638c:	3332      	adds	r3, #50	@ 0x32
 800638e:	4a08      	ldr	r2, [pc, #32]	@ (80063b0 <UART_SetConfig+0x2d4>)
 8006390:	fba2 2303 	umull	r2, r3, r2, r3
 8006394:	095b      	lsrs	r3, r3, #5
 8006396:	f003 0207 	and.w	r2, r3, #7
 800639a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4422      	add	r2, r4
 80063a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80063a4:	e106      	b.n	80065b4 <UART_SetConfig+0x4d8>
 80063a6:	bf00      	nop
 80063a8:	40011000 	.word	0x40011000
 80063ac:	40011400 	.word	0x40011400
 80063b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063b8:	2200      	movs	r2, #0
 80063ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80063be:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80063c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80063c6:	4642      	mov	r2, r8
 80063c8:	464b      	mov	r3, r9
 80063ca:	1891      	adds	r1, r2, r2
 80063cc:	6239      	str	r1, [r7, #32]
 80063ce:	415b      	adcs	r3, r3
 80063d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80063d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80063d6:	4641      	mov	r1, r8
 80063d8:	1854      	adds	r4, r2, r1
 80063da:	4649      	mov	r1, r9
 80063dc:	eb43 0501 	adc.w	r5, r3, r1
 80063e0:	f04f 0200 	mov.w	r2, #0
 80063e4:	f04f 0300 	mov.w	r3, #0
 80063e8:	00eb      	lsls	r3, r5, #3
 80063ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063ee:	00e2      	lsls	r2, r4, #3
 80063f0:	4614      	mov	r4, r2
 80063f2:	461d      	mov	r5, r3
 80063f4:	4643      	mov	r3, r8
 80063f6:	18e3      	adds	r3, r4, r3
 80063f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80063fc:	464b      	mov	r3, r9
 80063fe:	eb45 0303 	adc.w	r3, r5, r3
 8006402:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006412:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006416:	f04f 0200 	mov.w	r2, #0
 800641a:	f04f 0300 	mov.w	r3, #0
 800641e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006422:	4629      	mov	r1, r5
 8006424:	008b      	lsls	r3, r1, #2
 8006426:	4621      	mov	r1, r4
 8006428:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800642c:	4621      	mov	r1, r4
 800642e:	008a      	lsls	r2, r1, #2
 8006430:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006434:	f7fa fcd8 	bl	8000de8 <__aeabi_uldivmod>
 8006438:	4602      	mov	r2, r0
 800643a:	460b      	mov	r3, r1
 800643c:	4b60      	ldr	r3, [pc, #384]	@ (80065c0 <UART_SetConfig+0x4e4>)
 800643e:	fba3 2302 	umull	r2, r3, r3, r2
 8006442:	095b      	lsrs	r3, r3, #5
 8006444:	011c      	lsls	r4, r3, #4
 8006446:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800644a:	2200      	movs	r2, #0
 800644c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006450:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006454:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006458:	4642      	mov	r2, r8
 800645a:	464b      	mov	r3, r9
 800645c:	1891      	adds	r1, r2, r2
 800645e:	61b9      	str	r1, [r7, #24]
 8006460:	415b      	adcs	r3, r3
 8006462:	61fb      	str	r3, [r7, #28]
 8006464:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006468:	4641      	mov	r1, r8
 800646a:	1851      	adds	r1, r2, r1
 800646c:	6139      	str	r1, [r7, #16]
 800646e:	4649      	mov	r1, r9
 8006470:	414b      	adcs	r3, r1
 8006472:	617b      	str	r3, [r7, #20]
 8006474:	f04f 0200 	mov.w	r2, #0
 8006478:	f04f 0300 	mov.w	r3, #0
 800647c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006480:	4659      	mov	r1, fp
 8006482:	00cb      	lsls	r3, r1, #3
 8006484:	4651      	mov	r1, sl
 8006486:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800648a:	4651      	mov	r1, sl
 800648c:	00ca      	lsls	r2, r1, #3
 800648e:	4610      	mov	r0, r2
 8006490:	4619      	mov	r1, r3
 8006492:	4603      	mov	r3, r0
 8006494:	4642      	mov	r2, r8
 8006496:	189b      	adds	r3, r3, r2
 8006498:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800649c:	464b      	mov	r3, r9
 800649e:	460a      	mov	r2, r1
 80064a0:	eb42 0303 	adc.w	r3, r2, r3
 80064a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80064a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80064b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80064b4:	f04f 0200 	mov.w	r2, #0
 80064b8:	f04f 0300 	mov.w	r3, #0
 80064bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80064c0:	4649      	mov	r1, r9
 80064c2:	008b      	lsls	r3, r1, #2
 80064c4:	4641      	mov	r1, r8
 80064c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064ca:	4641      	mov	r1, r8
 80064cc:	008a      	lsls	r2, r1, #2
 80064ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80064d2:	f7fa fc89 	bl	8000de8 <__aeabi_uldivmod>
 80064d6:	4602      	mov	r2, r0
 80064d8:	460b      	mov	r3, r1
 80064da:	4611      	mov	r1, r2
 80064dc:	4b38      	ldr	r3, [pc, #224]	@ (80065c0 <UART_SetConfig+0x4e4>)
 80064de:	fba3 2301 	umull	r2, r3, r3, r1
 80064e2:	095b      	lsrs	r3, r3, #5
 80064e4:	2264      	movs	r2, #100	@ 0x64
 80064e6:	fb02 f303 	mul.w	r3, r2, r3
 80064ea:	1acb      	subs	r3, r1, r3
 80064ec:	011b      	lsls	r3, r3, #4
 80064ee:	3332      	adds	r3, #50	@ 0x32
 80064f0:	4a33      	ldr	r2, [pc, #204]	@ (80065c0 <UART_SetConfig+0x4e4>)
 80064f2:	fba2 2303 	umull	r2, r3, r2, r3
 80064f6:	095b      	lsrs	r3, r3, #5
 80064f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80064fc:	441c      	add	r4, r3
 80064fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006502:	2200      	movs	r2, #0
 8006504:	673b      	str	r3, [r7, #112]	@ 0x70
 8006506:	677a      	str	r2, [r7, #116]	@ 0x74
 8006508:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800650c:	4642      	mov	r2, r8
 800650e:	464b      	mov	r3, r9
 8006510:	1891      	adds	r1, r2, r2
 8006512:	60b9      	str	r1, [r7, #8]
 8006514:	415b      	adcs	r3, r3
 8006516:	60fb      	str	r3, [r7, #12]
 8006518:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800651c:	4641      	mov	r1, r8
 800651e:	1851      	adds	r1, r2, r1
 8006520:	6039      	str	r1, [r7, #0]
 8006522:	4649      	mov	r1, r9
 8006524:	414b      	adcs	r3, r1
 8006526:	607b      	str	r3, [r7, #4]
 8006528:	f04f 0200 	mov.w	r2, #0
 800652c:	f04f 0300 	mov.w	r3, #0
 8006530:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006534:	4659      	mov	r1, fp
 8006536:	00cb      	lsls	r3, r1, #3
 8006538:	4651      	mov	r1, sl
 800653a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800653e:	4651      	mov	r1, sl
 8006540:	00ca      	lsls	r2, r1, #3
 8006542:	4610      	mov	r0, r2
 8006544:	4619      	mov	r1, r3
 8006546:	4603      	mov	r3, r0
 8006548:	4642      	mov	r2, r8
 800654a:	189b      	adds	r3, r3, r2
 800654c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800654e:	464b      	mov	r3, r9
 8006550:	460a      	mov	r2, r1
 8006552:	eb42 0303 	adc.w	r3, r2, r3
 8006556:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	663b      	str	r3, [r7, #96]	@ 0x60
 8006562:	667a      	str	r2, [r7, #100]	@ 0x64
 8006564:	f04f 0200 	mov.w	r2, #0
 8006568:	f04f 0300 	mov.w	r3, #0
 800656c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006570:	4649      	mov	r1, r9
 8006572:	008b      	lsls	r3, r1, #2
 8006574:	4641      	mov	r1, r8
 8006576:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800657a:	4641      	mov	r1, r8
 800657c:	008a      	lsls	r2, r1, #2
 800657e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006582:	f7fa fc31 	bl	8000de8 <__aeabi_uldivmod>
 8006586:	4602      	mov	r2, r0
 8006588:	460b      	mov	r3, r1
 800658a:	4b0d      	ldr	r3, [pc, #52]	@ (80065c0 <UART_SetConfig+0x4e4>)
 800658c:	fba3 1302 	umull	r1, r3, r3, r2
 8006590:	095b      	lsrs	r3, r3, #5
 8006592:	2164      	movs	r1, #100	@ 0x64
 8006594:	fb01 f303 	mul.w	r3, r1, r3
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	011b      	lsls	r3, r3, #4
 800659c:	3332      	adds	r3, #50	@ 0x32
 800659e:	4a08      	ldr	r2, [pc, #32]	@ (80065c0 <UART_SetConfig+0x4e4>)
 80065a0:	fba2 2303 	umull	r2, r3, r2, r3
 80065a4:	095b      	lsrs	r3, r3, #5
 80065a6:	f003 020f 	and.w	r2, r3, #15
 80065aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4422      	add	r2, r4
 80065b2:	609a      	str	r2, [r3, #8]
}
 80065b4:	bf00      	nop
 80065b6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80065ba:	46bd      	mov	sp, r7
 80065bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065c0:	51eb851f 	.word	0x51eb851f

080065c4 <arm_mean_q31>:
 80065c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065c8:	ea5f 0891 	movs.w	r8, r1, lsr #2
 80065cc:	468e      	mov	lr, r1
 80065ce:	4691      	mov	r9, r2
 80065d0:	d033      	beq.n	800663a <arm_mean_q31+0x76>
 80065d2:	f100 0110 	add.w	r1, r0, #16
 80065d6:	46c4      	mov	ip, r8
 80065d8:	2200      	movs	r2, #0
 80065da:	2300      	movs	r3, #0
 80065dc:	f851 7c10 	ldr.w	r7, [r1, #-16]
 80065e0:	f851 6c0c 	ldr.w	r6, [r1, #-12]
 80065e4:	f851 5c08 	ldr.w	r5, [r1, #-8]
 80065e8:	f851 4c04 	ldr.w	r4, [r1, #-4]
 80065ec:	19d2      	adds	r2, r2, r7
 80065ee:	eb43 73e7 	adc.w	r3, r3, r7, asr #31
 80065f2:	1992      	adds	r2, r2, r6
 80065f4:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 80065f8:	1952      	adds	r2, r2, r5
 80065fa:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 80065fe:	1912      	adds	r2, r2, r4
 8006600:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
 8006604:	f1bc 0c01 	subs.w	ip, ip, #1
 8006608:	f101 0110 	add.w	r1, r1, #16
 800660c:	d1e6      	bne.n	80065dc <arm_mean_q31+0x18>
 800660e:	eb00 1008 	add.w	r0, r0, r8, lsl #4
 8006612:	f01e 0103 	ands.w	r1, lr, #3
 8006616:	d006      	beq.n	8006626 <arm_mean_q31+0x62>
 8006618:	f850 4b04 	ldr.w	r4, [r0], #4
 800661c:	1912      	adds	r2, r2, r4
 800661e:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
 8006622:	3901      	subs	r1, #1
 8006624:	d1f8      	bne.n	8006618 <arm_mean_q31+0x54>
 8006626:	4610      	mov	r0, r2
 8006628:	4672      	mov	r2, lr
 800662a:	4619      	mov	r1, r3
 800662c:	17d3      	asrs	r3, r2, #31
 800662e:	f7fa fb8b 	bl	8000d48 <__aeabi_ldivmod>
 8006632:	f8c9 0000 	str.w	r0, [r9]
 8006636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800663a:	2200      	movs	r2, #0
 800663c:	2300      	movs	r3, #0
 800663e:	e7e8      	b.n	8006612 <arm_mean_q31+0x4e>

08006640 <arm_rfft_fast_init_f32>:
 8006640:	084b      	lsrs	r3, r1, #1
 8006642:	2b80      	cmp	r3, #128	@ 0x80
 8006644:	b410      	push	{r4}
 8006646:	8201      	strh	r1, [r0, #16]
 8006648:	8003      	strh	r3, [r0, #0]
 800664a:	d047      	beq.n	80066dc <arm_rfft_fast_init_f32+0x9c>
 800664c:	d917      	bls.n	800667e <arm_rfft_fast_init_f32+0x3e>
 800664e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006652:	d03d      	beq.n	80066d0 <arm_rfft_fast_init_f32+0x90>
 8006654:	d929      	bls.n	80066aa <arm_rfft_fast_init_f32+0x6a>
 8006656:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800665a:	d020      	beq.n	800669e <arm_rfft_fast_init_f32+0x5e>
 800665c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006660:	d113      	bne.n	800668a <arm_rfft_fast_init_f32+0x4a>
 8006662:	4921      	ldr	r1, [pc, #132]	@ (80066e8 <arm_rfft_fast_init_f32+0xa8>)
 8006664:	4a21      	ldr	r2, [pc, #132]	@ (80066ec <arm_rfft_fast_init_f32+0xac>)
 8006666:	4b22      	ldr	r3, [pc, #136]	@ (80066f0 <arm_rfft_fast_init_f32+0xb0>)
 8006668:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 800666c:	8184      	strh	r4, [r0, #12]
 800666e:	6081      	str	r1, [r0, #8]
 8006670:	6042      	str	r2, [r0, #4]
 8006672:	6143      	str	r3, [r0, #20]
 8006674:	2000      	movs	r0, #0
 8006676:	b240      	sxtb	r0, r0
 8006678:	f85d 4b04 	ldr.w	r4, [sp], #4
 800667c:	4770      	bx	lr
 800667e:	2b20      	cmp	r3, #32
 8006680:	d01c      	beq.n	80066bc <arm_rfft_fast_init_f32+0x7c>
 8006682:	2b40      	cmp	r3, #64	@ 0x40
 8006684:	d006      	beq.n	8006694 <arm_rfft_fast_init_f32+0x54>
 8006686:	2b10      	cmp	r3, #16
 8006688:	d01d      	beq.n	80066c6 <arm_rfft_fast_init_f32+0x86>
 800668a:	20ff      	movs	r0, #255	@ 0xff
 800668c:	b240      	sxtb	r0, r0
 800668e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006692:	4770      	bx	lr
 8006694:	2438      	movs	r4, #56	@ 0x38
 8006696:	4917      	ldr	r1, [pc, #92]	@ (80066f4 <arm_rfft_fast_init_f32+0xb4>)
 8006698:	4a17      	ldr	r2, [pc, #92]	@ (80066f8 <arm_rfft_fast_init_f32+0xb8>)
 800669a:	4b18      	ldr	r3, [pc, #96]	@ (80066fc <arm_rfft_fast_init_f32+0xbc>)
 800669c:	e7e6      	b.n	800666c <arm_rfft_fast_init_f32+0x2c>
 800669e:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 80066a2:	4917      	ldr	r1, [pc, #92]	@ (8006700 <arm_rfft_fast_init_f32+0xc0>)
 80066a4:	4a17      	ldr	r2, [pc, #92]	@ (8006704 <arm_rfft_fast_init_f32+0xc4>)
 80066a6:	4b18      	ldr	r3, [pc, #96]	@ (8006708 <arm_rfft_fast_init_f32+0xc8>)
 80066a8:	e7e0      	b.n	800666c <arm_rfft_fast_init_f32+0x2c>
 80066aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066ae:	d1ec      	bne.n	800668a <arm_rfft_fast_init_f32+0x4a>
 80066b0:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 80066b4:	4915      	ldr	r1, [pc, #84]	@ (800670c <arm_rfft_fast_init_f32+0xcc>)
 80066b6:	4a16      	ldr	r2, [pc, #88]	@ (8006710 <arm_rfft_fast_init_f32+0xd0>)
 80066b8:	4b16      	ldr	r3, [pc, #88]	@ (8006714 <arm_rfft_fast_init_f32+0xd4>)
 80066ba:	e7d7      	b.n	800666c <arm_rfft_fast_init_f32+0x2c>
 80066bc:	2430      	movs	r4, #48	@ 0x30
 80066be:	4916      	ldr	r1, [pc, #88]	@ (8006718 <arm_rfft_fast_init_f32+0xd8>)
 80066c0:	4a16      	ldr	r2, [pc, #88]	@ (800671c <arm_rfft_fast_init_f32+0xdc>)
 80066c2:	4b17      	ldr	r3, [pc, #92]	@ (8006720 <arm_rfft_fast_init_f32+0xe0>)
 80066c4:	e7d2      	b.n	800666c <arm_rfft_fast_init_f32+0x2c>
 80066c6:	2414      	movs	r4, #20
 80066c8:	4916      	ldr	r1, [pc, #88]	@ (8006724 <arm_rfft_fast_init_f32+0xe4>)
 80066ca:	4a17      	ldr	r2, [pc, #92]	@ (8006728 <arm_rfft_fast_init_f32+0xe8>)
 80066cc:	4b17      	ldr	r3, [pc, #92]	@ (800672c <arm_rfft_fast_init_f32+0xec>)
 80066ce:	e7cd      	b.n	800666c <arm_rfft_fast_init_f32+0x2c>
 80066d0:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 80066d4:	4916      	ldr	r1, [pc, #88]	@ (8006730 <arm_rfft_fast_init_f32+0xf0>)
 80066d6:	4a17      	ldr	r2, [pc, #92]	@ (8006734 <arm_rfft_fast_init_f32+0xf4>)
 80066d8:	4b17      	ldr	r3, [pc, #92]	@ (8006738 <arm_rfft_fast_init_f32+0xf8>)
 80066da:	e7c7      	b.n	800666c <arm_rfft_fast_init_f32+0x2c>
 80066dc:	24d0      	movs	r4, #208	@ 0xd0
 80066de:	4917      	ldr	r1, [pc, #92]	@ (800673c <arm_rfft_fast_init_f32+0xfc>)
 80066e0:	4a17      	ldr	r2, [pc, #92]	@ (8006740 <arm_rfft_fast_init_f32+0x100>)
 80066e2:	4b18      	ldr	r3, [pc, #96]	@ (8006744 <arm_rfft_fast_init_f32+0x104>)
 80066e4:	e7c2      	b.n	800666c <arm_rfft_fast_init_f32+0x2c>
 80066e6:	bf00      	nop
 80066e8:	080199d4 	.word	0x080199d4
 80066ec:	0800abcc 	.word	0x0800abcc
 80066f0:	08010d3c 	.word	0x08010d3c
 80066f4:	0800eccc 	.word	0x0800eccc
 80066f8:	0801b794 	.word	0x0801b794
 80066fc:	0801dc84 	.word	0x0801dc84
 8006700:	080176bc 	.word	0x080176bc
 8006704:	080155bc 	.word	0x080155bc
 8006708:	0800ed3c 	.word	0x0800ed3c
 800670c:	0801d914 	.word	0x0801d914
 8006710:	08014d3c 	.word	0x08014d3c
 8006714:	0801b994 	.word	0x0801b994
 8006718:	08018574 	.word	0x08018574
 800671c:	080175bc 	.word	0x080175bc
 8006720:	0800ebcc 	.word	0x0800ebcc
 8006724:	080184cc 	.word	0x080184cc
 8006728:	0801553c 	.word	0x0801553c
 800672c:	080184f4 	.word	0x080184f4
 8006730:	0801c194 	.word	0x0801c194
 8006734:	080189d4 	.word	0x080189d4
 8006738:	0801c514 	.word	0x0801c514
 800673c:	0801de84 	.word	0x0801de84
 8006740:	080185d4 	.word	0x080185d4
 8006744:	0801d514 	.word	0x0801d514

08006748 <arm_rfft_fast_f32>:
 8006748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800674c:	8a06      	ldrh	r6, [r0, #16]
 800674e:	0876      	lsrs	r6, r6, #1
 8006750:	4607      	mov	r7, r0
 8006752:	4615      	mov	r5, r2
 8006754:	8006      	strh	r6, [r0, #0]
 8006756:	460c      	mov	r4, r1
 8006758:	2b00      	cmp	r3, #0
 800675a:	d15c      	bne.n	8006816 <arm_rfft_fast_f32+0xce>
 800675c:	461a      	mov	r2, r3
 800675e:	2301      	movs	r3, #1
 8006760:	f000 fbe6 	bl	8006f30 <arm_cfft_f32>
 8006764:	edd4 7a00 	vldr	s15, [r4]
 8006768:	ed94 7a01 	vldr	s14, [r4, #4]
 800676c:	883e      	ldrh	r6, [r7, #0]
 800676e:	6978      	ldr	r0, [r7, #20]
 8006770:	ee37 7a07 	vadd.f32	s14, s14, s14
 8006774:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006778:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 800677c:	ee77 6a87 	vadd.f32	s13, s15, s14
 8006780:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006784:	3e01      	subs	r6, #1
 8006786:	ee26 7aa3 	vmul.f32	s14, s13, s7
 800678a:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800678e:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8006792:	ed85 7a00 	vstr	s14, [r5]
 8006796:	edc5 7a01 	vstr	s15, [r5, #4]
 800679a:	3010      	adds	r0, #16
 800679c:	f105 0210 	add.w	r2, r5, #16
 80067a0:	3b08      	subs	r3, #8
 80067a2:	f104 0110 	add.w	r1, r4, #16
 80067a6:	ed51 4a02 	vldr	s9, [r1, #-8]
 80067aa:	ed93 5a02 	vldr	s10, [r3, #8]
 80067ae:	ed11 7a01 	vldr	s14, [r1, #-4]
 80067b2:	ed10 6a02 	vldr	s12, [r0, #-8]
 80067b6:	edd3 5a03 	vldr	s11, [r3, #12]
 80067ba:	ed50 6a01 	vldr	s13, [r0, #-4]
 80067be:	ee75 7a64 	vsub.f32	s15, s10, s9
 80067c2:	ee35 4a87 	vadd.f32	s8, s11, s14
 80067c6:	ee35 5a24 	vadd.f32	s10, s10, s9
 80067ca:	ee77 5a65 	vsub.f32	s11, s14, s11
 80067ce:	ee66 4a27 	vmul.f32	s9, s12, s15
 80067d2:	ee26 7aa7 	vmul.f32	s14, s13, s15
 80067d6:	ee34 5a85 	vadd.f32	s10, s9, s10
 80067da:	ee26 6a04 	vmul.f32	s12, s12, s8
 80067de:	ee66 6a84 	vmul.f32	s13, s13, s8
 80067e2:	ee77 7a25 	vadd.f32	s15, s14, s11
 80067e6:	ee76 6a85 	vadd.f32	s13, s13, s10
 80067ea:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80067ee:	ee66 6aa3 	vmul.f32	s13, s13, s7
 80067f2:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80067f6:	3e01      	subs	r6, #1
 80067f8:	ed42 6a02 	vstr	s13, [r2, #-8]
 80067fc:	ed42 7a01 	vstr	s15, [r2, #-4]
 8006800:	f1a3 0308 	sub.w	r3, r3, #8
 8006804:	f101 0108 	add.w	r1, r1, #8
 8006808:	f100 0008 	add.w	r0, r0, #8
 800680c:	f102 0208 	add.w	r2, r2, #8
 8006810:	d1c9      	bne.n	80067a6 <arm_rfft_fast_f32+0x5e>
 8006812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006816:	edd1 7a00 	vldr	s15, [r1]
 800681a:	edd1 6a01 	vldr	s13, [r1, #4]
 800681e:	6941      	ldr	r1, [r0, #20]
 8006820:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8006824:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006828:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 800682c:	ee27 7a23 	vmul.f32	s14, s14, s7
 8006830:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8006834:	3e01      	subs	r6, #1
 8006836:	ed82 7a00 	vstr	s14, [r2]
 800683a:	edc2 7a01 	vstr	s15, [r2, #4]
 800683e:	00f0      	lsls	r0, r6, #3
 8006840:	b3ee      	cbz	r6, 80068be <arm_rfft_fast_f32+0x176>
 8006842:	3808      	subs	r0, #8
 8006844:	f101 0e10 	add.w	lr, r1, #16
 8006848:	4420      	add	r0, r4
 800684a:	f104 0110 	add.w	r1, r4, #16
 800684e:	f102 0c10 	add.w	ip, r2, #16
 8006852:	ed90 7a02 	vldr	s14, [r0, #8]
 8006856:	ed51 6a02 	vldr	s13, [r1, #-8]
 800685a:	ed1e 6a02 	vldr	s12, [lr, #-8]
 800685e:	ed90 4a03 	vldr	s8, [r0, #12]
 8006862:	ed11 5a01 	vldr	s10, [r1, #-4]
 8006866:	ed5e 5a01 	vldr	s11, [lr, #-4]
 800686a:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800686e:	ee74 4a05 	vadd.f32	s9, s8, s10
 8006872:	ee26 3a27 	vmul.f32	s6, s12, s15
 8006876:	ee77 6a26 	vadd.f32	s13, s14, s13
 800687a:	ee35 5a44 	vsub.f32	s10, s10, s8
 800687e:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8006882:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8006886:	ee77 7a05 	vadd.f32	s15, s14, s10
 800688a:	ee26 6a24 	vmul.f32	s12, s12, s9
 800688e:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8006892:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8006896:	ee36 7ae5 	vsub.f32	s14, s13, s11
 800689a:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800689e:	ee27 7a23 	vmul.f32	s14, s14, s7
 80068a2:	3e01      	subs	r6, #1
 80068a4:	ed0c 7a02 	vstr	s14, [ip, #-8]
 80068a8:	ed4c 7a01 	vstr	s15, [ip, #-4]
 80068ac:	f1a0 0008 	sub.w	r0, r0, #8
 80068b0:	f101 0108 	add.w	r1, r1, #8
 80068b4:	f10e 0e08 	add.w	lr, lr, #8
 80068b8:	f10c 0c08 	add.w	ip, ip, #8
 80068bc:	d1c9      	bne.n	8006852 <arm_rfft_fast_f32+0x10a>
 80068be:	4638      	mov	r0, r7
 80068c0:	4629      	mov	r1, r5
 80068c2:	461a      	mov	r2, r3
 80068c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068c8:	2301      	movs	r3, #1
 80068ca:	f000 bb31 	b.w	8006f30 <arm_cfft_f32>
 80068ce:	bf00      	nop

080068d0 <arm_cfft_radix8by2_f32>:
 80068d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068d4:	ed2d 8b08 	vpush	{d8-d11}
 80068d8:	f8b0 e000 	ldrh.w	lr, [r0]
 80068dc:	6842      	ldr	r2, [r0, #4]
 80068de:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80068e2:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 80068e6:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 80068ea:	4607      	mov	r7, r0
 80068ec:	ea4f 038c 	mov.w	r3, ip, lsl #2
 80068f0:	f000 80af 	beq.w	8006a52 <arm_cfft_radix8by2_f32+0x182>
 80068f4:	3310      	adds	r3, #16
 80068f6:	18ce      	adds	r6, r1, r3
 80068f8:	3210      	adds	r2, #16
 80068fa:	4443      	add	r3, r8
 80068fc:	f101 0510 	add.w	r5, r1, #16
 8006900:	f108 0410 	add.w	r4, r8, #16
 8006904:	ed54 1a04 	vldr	s3, [r4, #-16]
 8006908:	ed13 4a04 	vldr	s8, [r3, #-16]
 800690c:	ed53 3a03 	vldr	s7, [r3, #-12]
 8006910:	ed53 5a02 	vldr	s11, [r3, #-8]
 8006914:	ed13 5a01 	vldr	s10, [r3, #-4]
 8006918:	ed54 6a03 	vldr	s13, [r4, #-12]
 800691c:	ed14 0a02 	vldr	s0, [r4, #-8]
 8006920:	ed16 2a04 	vldr	s4, [r6, #-16]
 8006924:	ed56 2a03 	vldr	s5, [r6, #-12]
 8006928:	ed15 6a03 	vldr	s12, [r5, #-12]
 800692c:	ed15 7a01 	vldr	s14, [r5, #-4]
 8006930:	ed15 3a04 	vldr	s6, [r5, #-16]
 8006934:	ed54 7a01 	vldr	s15, [r4, #-4]
 8006938:	ed56 0a02 	vldr	s1, [r6, #-8]
 800693c:	ed16 1a01 	vldr	s2, [r6, #-4]
 8006940:	ed55 4a02 	vldr	s9, [r5, #-8]
 8006944:	ee73 ba21 	vadd.f32	s23, s6, s3
 8006948:	ee36 ba26 	vadd.f32	s22, s12, s13
 800694c:	ee37 aa27 	vadd.f32	s20, s14, s15
 8006950:	ee72 9a04 	vadd.f32	s19, s4, s8
 8006954:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8006958:	ee31 8a05 	vadd.f32	s16, s2, s10
 800695c:	ee74 aa80 	vadd.f32	s21, s9, s0
 8006960:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8006964:	ed45 ba04 	vstr	s23, [r5, #-16]
 8006968:	ed05 ba03 	vstr	s22, [r5, #-12]
 800696c:	ed45 aa02 	vstr	s21, [r5, #-8]
 8006970:	ed05 aa01 	vstr	s20, [r5, #-4]
 8006974:	ed06 8a01 	vstr	s16, [r6, #-4]
 8006978:	ed46 9a04 	vstr	s19, [r6, #-16]
 800697c:	ed06 9a03 	vstr	s18, [r6, #-12]
 8006980:	ed46 8a02 	vstr	s17, [r6, #-8]
 8006984:	ee76 6a66 	vsub.f32	s13, s12, s13
 8006988:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800698c:	ed12 6a03 	vldr	s12, [r2, #-12]
 8006990:	ed52 2a04 	vldr	s5, [r2, #-16]
 8006994:	ee33 3a61 	vsub.f32	s6, s6, s3
 8006998:	ee34 4a42 	vsub.f32	s8, s8, s4
 800699c:	ee26 8a86 	vmul.f32	s16, s13, s12
 80069a0:	ee24 2a06 	vmul.f32	s4, s8, s12
 80069a4:	ee63 1a22 	vmul.f32	s3, s6, s5
 80069a8:	ee24 4a22 	vmul.f32	s8, s8, s5
 80069ac:	ee23 3a06 	vmul.f32	s6, s6, s12
 80069b0:	ee66 6aa2 	vmul.f32	s13, s13, s5
 80069b4:	ee23 6a86 	vmul.f32	s12, s7, s12
 80069b8:	ee63 3aa2 	vmul.f32	s7, s7, s5
 80069bc:	ee36 6a04 	vadd.f32	s12, s12, s8
 80069c0:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80069c4:	ee72 3a63 	vsub.f32	s7, s4, s7
 80069c8:	ee71 2a88 	vadd.f32	s5, s3, s16
 80069cc:	ed44 6a03 	vstr	s13, [r4, #-12]
 80069d0:	ed44 2a04 	vstr	s5, [r4, #-16]
 80069d4:	ed43 3a04 	vstr	s7, [r3, #-16]
 80069d8:	ed03 6a03 	vstr	s12, [r3, #-12]
 80069dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80069e0:	ee75 6ae0 	vsub.f32	s13, s11, s1
 80069e4:	ed12 7a01 	vldr	s14, [r2, #-4]
 80069e8:	ed52 5a02 	vldr	s11, [r2, #-8]
 80069ec:	ee35 6a41 	vsub.f32	s12, s10, s2
 80069f0:	ee74 4ac0 	vsub.f32	s9, s9, s0
 80069f4:	ee67 3a87 	vmul.f32	s7, s15, s14
 80069f8:	ee26 5a87 	vmul.f32	s10, s13, s14
 80069fc:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8006a00:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006a04:	ee64 4a87 	vmul.f32	s9, s9, s14
 8006a08:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8006a0c:	ee26 7a07 	vmul.f32	s14, s12, s14
 8006a10:	ee26 6a25 	vmul.f32	s12, s12, s11
 8006a14:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8006a18:	ee74 5a23 	vadd.f32	s11, s8, s7
 8006a1c:	ee35 6a46 	vsub.f32	s12, s10, s12
 8006a20:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006a24:	f1be 0e01 	subs.w	lr, lr, #1
 8006a28:	ed44 5a02 	vstr	s11, [r4, #-8]
 8006a2c:	f105 0510 	add.w	r5, r5, #16
 8006a30:	ed44 7a01 	vstr	s15, [r4, #-4]
 8006a34:	f106 0610 	add.w	r6, r6, #16
 8006a38:	ed03 6a02 	vstr	s12, [r3, #-8]
 8006a3c:	ed03 7a01 	vstr	s14, [r3, #-4]
 8006a40:	f102 0210 	add.w	r2, r2, #16
 8006a44:	f104 0410 	add.w	r4, r4, #16
 8006a48:	f103 0310 	add.w	r3, r3, #16
 8006a4c:	f47f af5a 	bne.w	8006904 <arm_cfft_radix8by2_f32+0x34>
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	fa1f f48c 	uxth.w	r4, ip
 8006a56:	4608      	mov	r0, r1
 8006a58:	2302      	movs	r3, #2
 8006a5a:	4621      	mov	r1, r4
 8006a5c:	f000 fbca 	bl	80071f4 <arm_radix8_butterfly_f32>
 8006a60:	ecbd 8b08 	vpop	{d8-d11}
 8006a64:	4640      	mov	r0, r8
 8006a66:	4621      	mov	r1, r4
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	2302      	movs	r3, #2
 8006a6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a70:	f000 bbc0 	b.w	80071f4 <arm_radix8_butterfly_f32>

08006a74 <arm_cfft_radix8by4_f32>:
 8006a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a78:	ed2d 8b0a 	vpush	{d8-d12}
 8006a7c:	8802      	ldrh	r2, [r0, #0]
 8006a7e:	ed91 6a00 	vldr	s12, [r1]
 8006a82:	b08f      	sub	sp, #60	@ 0x3c
 8006a84:	460f      	mov	r7, r1
 8006a86:	0852      	lsrs	r2, r2, #1
 8006a88:	0093      	lsls	r3, r2, #2
 8006a8a:	900c      	str	r0, [sp, #48]	@ 0x30
 8006a8c:	9103      	str	r1, [sp, #12]
 8006a8e:	6841      	ldr	r1, [r0, #4]
 8006a90:	ed97 7a01 	vldr	s14, [r7, #4]
 8006a94:	4638      	mov	r0, r7
 8006a96:	4418      	add	r0, r3
 8006a98:	4606      	mov	r6, r0
 8006a9a:	9009      	str	r0, [sp, #36]	@ 0x24
 8006a9c:	4418      	add	r0, r3
 8006a9e:	edd0 6a00 	vldr	s13, [r0]
 8006aa2:	edd6 3a00 	vldr	s7, [r6]
 8006aa6:	edd6 2a01 	vldr	s5, [r6, #4]
 8006aaa:	edd0 7a01 	vldr	s15, [r0, #4]
 8006aae:	900a      	str	r0, [sp, #40]	@ 0x28
 8006ab0:	ee76 5a26 	vadd.f32	s11, s12, s13
 8006ab4:	4604      	mov	r4, r0
 8006ab6:	4625      	mov	r5, r4
 8006ab8:	441c      	add	r4, r3
 8006aba:	ed94 4a00 	vldr	s8, [r4]
 8006abe:	ed94 5a01 	vldr	s10, [r4, #4]
 8006ac2:	9401      	str	r4, [sp, #4]
 8006ac4:	ee75 4aa3 	vadd.f32	s9, s11, s7
 8006ac8:	4630      	mov	r0, r6
 8006aca:	ee74 4a24 	vadd.f32	s9, s8, s9
 8006ace:	463e      	mov	r6, r7
 8006ad0:	ee14 ea90 	vmov	lr, s9
 8006ad4:	ee76 6a66 	vsub.f32	s13, s12, s13
 8006ad8:	f846 eb08 	str.w	lr, [r6], #8
 8006adc:	ee37 6a27 	vadd.f32	s12, s14, s15
 8006ae0:	edd0 4a01 	vldr	s9, [r0, #4]
 8006ae4:	9604      	str	r6, [sp, #16]
 8006ae6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006aea:	9e01      	ldr	r6, [sp, #4]
 8006aec:	ee32 3aa6 	vadd.f32	s6, s5, s13
 8006af0:	ed96 2a01 	vldr	s4, [r6, #4]
 8006af4:	ee36 7a24 	vadd.f32	s14, s12, s9
 8006af8:	ee75 5ae3 	vsub.f32	s11, s11, s7
 8006afc:	ee77 4ae3 	vsub.f32	s9, s15, s7
 8006b00:	ee36 6a62 	vsub.f32	s12, s12, s5
 8006b04:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8006b08:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8006b0c:	ee73 3a45 	vsub.f32	s7, s6, s10
 8006b10:	4604      	mov	r4, r0
 8006b12:	ee36 6a45 	vsub.f32	s12, s12, s10
 8006b16:	ee75 6a26 	vadd.f32	s13, s10, s13
 8006b1a:	46a3      	mov	fp, r4
 8006b1c:	ee37 7a02 	vadd.f32	s14, s14, s4
 8006b20:	ee34 5a84 	vadd.f32	s10, s9, s8
 8006b24:	ee13 8a90 	vmov	r8, s7
 8006b28:	46a4      	mov	ip, r4
 8006b2a:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8006b2e:	ed87 7a01 	vstr	s14, [r7, #4]
 8006b32:	f84b 8b08 	str.w	r8, [fp], #8
 8006b36:	f1ac 0704 	sub.w	r7, ip, #4
 8006b3a:	ed8c 5a01 	vstr	s10, [ip, #4]
 8006b3e:	f101 0c08 	add.w	ip, r1, #8
 8006b42:	462c      	mov	r4, r5
 8006b44:	f8cd c014 	str.w	ip, [sp, #20]
 8006b48:	ee15 ca90 	vmov	ip, s11
 8006b4c:	f844 cb08 	str.w	ip, [r4], #8
 8006b50:	9407      	str	r4, [sp, #28]
 8006b52:	f101 0410 	add.w	r4, r1, #16
 8006b56:	ed85 6a01 	vstr	s12, [r5, #4]
 8006b5a:	0852      	lsrs	r2, r2, #1
 8006b5c:	9402      	str	r4, [sp, #8]
 8006b5e:	462c      	mov	r4, r5
 8006b60:	f101 0518 	add.w	r5, r1, #24
 8006b64:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006b66:	46b2      	mov	sl, r6
 8006b68:	9506      	str	r5, [sp, #24]
 8006b6a:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8006b6e:	3a02      	subs	r2, #2
 8006b70:	ee16 5a90 	vmov	r5, s13
 8006b74:	46b6      	mov	lr, r6
 8006b76:	4630      	mov	r0, r6
 8006b78:	0852      	lsrs	r2, r2, #1
 8006b7a:	f84a 5b08 	str.w	r5, [sl], #8
 8006b7e:	f1a0 0604 	sub.w	r6, r0, #4
 8006b82:	edce 7a01 	vstr	s15, [lr, #4]
 8006b86:	9208      	str	r2, [sp, #32]
 8006b88:	f000 8130 	beq.w	8006dec <arm_cfft_radix8by4_f32+0x378>
 8006b8c:	4691      	mov	r9, r2
 8006b8e:	9a03      	ldr	r2, [sp, #12]
 8006b90:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006b94:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 8006b98:	3b08      	subs	r3, #8
 8006b9a:	f102 0510 	add.w	r5, r2, #16
 8006b9e:	f101 0c20 	add.w	ip, r1, #32
 8006ba2:	f1a4 020c 	sub.w	r2, r4, #12
 8006ba6:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 8006baa:	4433      	add	r3, r6
 8006bac:	3410      	adds	r4, #16
 8006bae:	4650      	mov	r0, sl
 8006bb0:	4659      	mov	r1, fp
 8006bb2:	ed55 3a02 	vldr	s7, [r5, #-8]
 8006bb6:	ed14 5a02 	vldr	s10, [r4, #-8]
 8006bba:	ed91 7a00 	vldr	s14, [r1]
 8006bbe:	edd0 7a00 	vldr	s15, [r0]
 8006bc2:	ed15 4a01 	vldr	s8, [r5, #-4]
 8006bc6:	ed54 5a01 	vldr	s11, [r4, #-4]
 8006bca:	edd0 6a01 	vldr	s13, [r0, #4]
 8006bce:	ed91 6a01 	vldr	s12, [r1, #4]
 8006bd2:	ee33 8a85 	vadd.f32	s16, s7, s10
 8006bd6:	ee34 0a25 	vadd.f32	s0, s8, s11
 8006bda:	ee78 4a07 	vadd.f32	s9, s16, s14
 8006bde:	ee74 5a65 	vsub.f32	s11, s8, s11
 8006be2:	ee77 4aa4 	vadd.f32	s9, s15, s9
 8006be6:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8006bea:	ed45 4a02 	vstr	s9, [r5, #-8]
 8006bee:	edd1 4a01 	vldr	s9, [r1, #4]
 8006bf2:	ed90 4a01 	vldr	s8, [r0, #4]
 8006bf6:	ee70 4a24 	vadd.f32	s9, s0, s9
 8006bfa:	ee76 aa05 	vadd.f32	s21, s12, s10
 8006bfe:	ee74 4a84 	vadd.f32	s9, s9, s8
 8006c02:	ee35 aac7 	vsub.f32	s20, s11, s14
 8006c06:	ed45 4a01 	vstr	s9, [r5, #-4]
 8006c0a:	edd6 1a00 	vldr	s3, [r6]
 8006c0e:	edd7 0a00 	vldr	s1, [r7]
 8006c12:	ed92 4a02 	vldr	s8, [r2, #8]
 8006c16:	edd3 3a02 	vldr	s7, [r3, #8]
 8006c1a:	ed93 2a01 	vldr	s4, [r3, #4]
 8006c1e:	ed16 1a01 	vldr	s2, [r6, #-4]
 8006c22:	edd2 2a01 	vldr	s5, [r2, #4]
 8006c26:	ed57 9a01 	vldr	s19, [r7, #-4]
 8006c2a:	ee70 4aa1 	vadd.f32	s9, s1, s3
 8006c2e:	ee39 3a81 	vadd.f32	s6, s19, s2
 8006c32:	ee74 8a84 	vadd.f32	s17, s9, s8
 8006c36:	ee70 1ae1 	vsub.f32	s3, s1, s3
 8006c3a:	ee73 8aa8 	vadd.f32	s17, s7, s17
 8006c3e:	ee7a aae6 	vsub.f32	s21, s21, s13
 8006c42:	ee18 aa90 	vmov	sl, s17
 8006c46:	f847 a908 	str.w	sl, [r7], #-8
 8006c4a:	edd2 8a01 	vldr	s17, [r2, #4]
 8006c4e:	ed93 9a01 	vldr	s18, [r3, #4]
 8006c52:	ee73 8a28 	vadd.f32	s17, s6, s17
 8006c56:	ee3a aa27 	vadd.f32	s20, s20, s15
 8006c5a:	ee78 8a89 	vadd.f32	s17, s17, s18
 8006c5e:	ee74 0a63 	vsub.f32	s1, s8, s7
 8006c62:	edc7 8a01 	vstr	s17, [r7, #4]
 8006c66:	ed18 ba02 	vldr	s22, [r8, #-8]
 8006c6a:	ed58 8a01 	vldr	s17, [r8, #-4]
 8006c6e:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8006c72:	ee6a ba28 	vmul.f32	s23, s20, s17
 8006c76:	ee2a ca8b 	vmul.f32	s24, s21, s22
 8006c7a:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8006c7e:	ee30 9a81 	vadd.f32	s18, s1, s2
 8006c82:	ee79 9a82 	vadd.f32	s19, s19, s4
 8006c86:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8006c8a:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8006c8e:	ee69 baa8 	vmul.f32	s23, s19, s17
 8006c92:	ee2a aa0b 	vmul.f32	s20, s20, s22
 8006c96:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8006c9a:	ee69 8a28 	vmul.f32	s17, s18, s17
 8006c9e:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8006ca2:	ee1c aa10 	vmov	sl, s24
 8006ca6:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8006caa:	f841 ab08 	str.w	sl, [r1], #8
 8006cae:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8006cb2:	ee3b bacb 	vsub.f32	s22, s23, s22
 8006cb6:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8006cba:	ee33 3a62 	vsub.f32	s6, s6, s5
 8006cbe:	ed01 aa01 	vstr	s20, [r1, #-4]
 8006cc2:	edc2 8a01 	vstr	s17, [r2, #4]
 8006cc6:	ed82 ba02 	vstr	s22, [r2, #8]
 8006cca:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8006cce:	ee74 3a63 	vsub.f32	s7, s8, s7
 8006cd2:	ee38 8a47 	vsub.f32	s16, s16, s14
 8006cd6:	ed1c 4a03 	vldr	s8, [ip, #-12]
 8006cda:	ee30 0a46 	vsub.f32	s0, s0, s12
 8006cde:	ee33 3a42 	vsub.f32	s6, s6, s4
 8006ce2:	ee38 8a67 	vsub.f32	s16, s16, s15
 8006ce6:	ee30 0a66 	vsub.f32	s0, s0, s13
 8006cea:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 8006cee:	ee63 8a04 	vmul.f32	s17, s6, s8
 8006cf2:	ee28 aa24 	vmul.f32	s20, s16, s9
 8006cf6:	ee60 9a04 	vmul.f32	s19, s0, s8
 8006cfa:	ee28 8a04 	vmul.f32	s16, s16, s8
 8006cfe:	ee20 0a24 	vmul.f32	s0, s0, s9
 8006d02:	ee63 3a84 	vmul.f32	s7, s7, s8
 8006d06:	ee39 4a68 	vsub.f32	s8, s18, s17
 8006d0a:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8006d0e:	ee14 aa10 	vmov	sl, s8
 8006d12:	ee30 0a48 	vsub.f32	s0, s0, s16
 8006d16:	ee63 4a24 	vmul.f32	s9, s6, s9
 8006d1a:	ed44 9a02 	vstr	s19, [r4, #-8]
 8006d1e:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8006d22:	ed04 0a01 	vstr	s0, [r4, #-4]
 8006d26:	f846 a908 	str.w	sl, [r6], #-8
 8006d2a:	ee35 6a46 	vsub.f32	s12, s10, s12
 8006d2e:	ee35 7a87 	vadd.f32	s14, s11, s14
 8006d32:	edc6 3a01 	vstr	s7, [r6, #4]
 8006d36:	ee76 6a86 	vadd.f32	s13, s13, s12
 8006d3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d3e:	ed1e 6a05 	vldr	s12, [lr, #-20]	@ 0xffffffec
 8006d42:	ed1e 7a06 	vldr	s14, [lr, #-24]	@ 0xffffffe8
 8006d46:	ee67 5a86 	vmul.f32	s11, s15, s12
 8006d4a:	ee26 5a87 	vmul.f32	s10, s13, s14
 8006d4e:	ee72 2a62 	vsub.f32	s5, s4, s5
 8006d52:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8006d56:	ee72 2ae1 	vsub.f32	s5, s5, s3
 8006d5a:	ee75 5a25 	vadd.f32	s11, s10, s11
 8006d5e:	ee62 0a86 	vmul.f32	s1, s5, s12
 8006d62:	ee66 6a86 	vmul.f32	s13, s13, s12
 8006d66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006d6a:	ee21 6a06 	vmul.f32	s12, s2, s12
 8006d6e:	ee62 2a87 	vmul.f32	s5, s5, s14
 8006d72:	ee21 1a07 	vmul.f32	s2, s2, s14
 8006d76:	ee15 aa90 	vmov	sl, s11
 8006d7a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006d7e:	f840 ab08 	str.w	sl, [r0], #8
 8006d82:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8006d86:	ee76 2a22 	vadd.f32	s5, s12, s5
 8006d8a:	f1b9 0901 	subs.w	r9, r9, #1
 8006d8e:	ed40 7a01 	vstr	s15, [r0, #-4]
 8006d92:	f105 0508 	add.w	r5, r5, #8
 8006d96:	ed83 1a02 	vstr	s2, [r3, #8]
 8006d9a:	edc3 2a01 	vstr	s5, [r3, #4]
 8006d9e:	f108 0808 	add.w	r8, r8, #8
 8006da2:	f1a2 0208 	sub.w	r2, r2, #8
 8006da6:	f10c 0c10 	add.w	ip, ip, #16
 8006daa:	f104 0408 	add.w	r4, r4, #8
 8006dae:	f10e 0e18 	add.w	lr, lr, #24
 8006db2:	f1a3 0308 	sub.w	r3, r3, #8
 8006db6:	f47f aefc 	bne.w	8006bb2 <arm_cfft_radix8by4_f32+0x13e>
 8006dba:	9908      	ldr	r1, [sp, #32]
 8006dbc:	9802      	ldr	r0, [sp, #8]
 8006dbe:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 8006dc2:	00cb      	lsls	r3, r1, #3
 8006dc4:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8006dc8:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8006dcc:	9102      	str	r1, [sp, #8]
 8006dce:	9904      	ldr	r1, [sp, #16]
 8006dd0:	4419      	add	r1, r3
 8006dd2:	9104      	str	r1, [sp, #16]
 8006dd4:	9905      	ldr	r1, [sp, #20]
 8006dd6:	4419      	add	r1, r3
 8006dd8:	9105      	str	r1, [sp, #20]
 8006dda:	9907      	ldr	r1, [sp, #28]
 8006ddc:	449b      	add	fp, r3
 8006dde:	4419      	add	r1, r3
 8006de0:	449a      	add	sl, r3
 8006de2:	9b06      	ldr	r3, [sp, #24]
 8006de4:	9107      	str	r1, [sp, #28]
 8006de6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006dea:	9306      	str	r3, [sp, #24]
 8006dec:	9a04      	ldr	r2, [sp, #16]
 8006dee:	9807      	ldr	r0, [sp, #28]
 8006df0:	edd2 3a00 	vldr	s7, [r2]
 8006df4:	ed90 4a00 	vldr	s8, [r0]
 8006df8:	eddb 7a00 	vldr	s15, [fp]
 8006dfc:	ed9a 3a00 	vldr	s6, [sl]
 8006e00:	edd2 4a01 	vldr	s9, [r2, #4]
 8006e04:	ed90 7a01 	vldr	s14, [r0, #4]
 8006e08:	ed9b 2a01 	vldr	s4, [fp, #4]
 8006e0c:	edda 5a01 	vldr	s11, [sl, #4]
 8006e10:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8006e14:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006e16:	ee73 6a84 	vadd.f32	s13, s7, s8
 8006e1a:	ee34 6a87 	vadd.f32	s12, s9, s14
 8006e1e:	ee36 5aa7 	vadd.f32	s10, s13, s15
 8006e22:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8006e26:	ee33 5a05 	vadd.f32	s10, s6, s10
 8006e2a:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8006e2e:	ed82 5a00 	vstr	s10, [r2]
 8006e32:	ed9b 5a01 	vldr	s10, [fp, #4]
 8006e36:	edda 4a01 	vldr	s9, [sl, #4]
 8006e3a:	ee36 5a05 	vadd.f32	s10, s12, s10
 8006e3e:	ee72 3a04 	vadd.f32	s7, s4, s8
 8006e42:	ee35 5a24 	vadd.f32	s10, s10, s9
 8006e46:	ee77 4a67 	vsub.f32	s9, s14, s15
 8006e4a:	ed82 5a01 	vstr	s10, [r2, #4]
 8006e4e:	9a05      	ldr	r2, [sp, #20]
 8006e50:	ee34 5a83 	vadd.f32	s10, s9, s6
 8006e54:	edd2 1a00 	vldr	s3, [r2]
 8006e58:	edd2 2a01 	vldr	s5, [r2, #4]
 8006e5c:	9a02      	ldr	r2, [sp, #8]
 8006e5e:	ee73 3ae5 	vsub.f32	s7, s7, s11
 8006e62:	ee36 6a42 	vsub.f32	s12, s12, s4
 8006e66:	ee63 4aa1 	vmul.f32	s9, s7, s3
 8006e6a:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8006e6e:	ee65 2a22 	vmul.f32	s5, s10, s5
 8006e72:	ee25 5a21 	vmul.f32	s10, s10, s3
 8006e76:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8006e7a:	ee35 5a63 	vsub.f32	s10, s10, s7
 8006e7e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006e82:	edcb 2a00 	vstr	s5, [fp]
 8006e86:	ed8b 5a01 	vstr	s10, [fp, #4]
 8006e8a:	edd2 3a01 	vldr	s7, [r2, #4]
 8006e8e:	ed92 5a00 	vldr	s10, [r2]
 8006e92:	9a06      	ldr	r2, [sp, #24]
 8006e94:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8006e98:	ee36 6a65 	vsub.f32	s12, s12, s11
 8006e9c:	ee66 4a85 	vmul.f32	s9, s13, s10
 8006ea0:	ee26 5a05 	vmul.f32	s10, s12, s10
 8006ea4:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8006ea8:	ee26 6a23 	vmul.f32	s12, s12, s7
 8006eac:	ee75 6a66 	vsub.f32	s13, s10, s13
 8006eb0:	ee34 6a86 	vadd.f32	s12, s9, s12
 8006eb4:	ee34 4a42 	vsub.f32	s8, s8, s4
 8006eb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006ebc:	edc0 6a01 	vstr	s13, [r0, #4]
 8006ec0:	ed80 6a00 	vstr	s12, [r0]
 8006ec4:	ed92 6a01 	vldr	s12, [r2, #4]
 8006ec8:	9803      	ldr	r0, [sp, #12]
 8006eca:	ee77 7a43 	vsub.f32	s15, s14, s6
 8006ece:	ee75 5a84 	vadd.f32	s11, s11, s8
 8006ed2:	ed92 7a00 	vldr	s14, [r2]
 8006ed6:	ee65 6a87 	vmul.f32	s13, s11, s14
 8006eda:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006ede:	ee65 5a86 	vmul.f32	s11, s11, s12
 8006ee2:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006ee6:	ee77 5a65 	vsub.f32	s11, s14, s11
 8006eea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eee:	edca 5a01 	vstr	s11, [sl, #4]
 8006ef2:	edca 7a00 	vstr	s15, [sl]
 8006ef6:	6872      	ldr	r2, [r6, #4]
 8006ef8:	4621      	mov	r1, r4
 8006efa:	2304      	movs	r3, #4
 8006efc:	f000 f97a 	bl	80071f4 <arm_radix8_butterfly_f32>
 8006f00:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f02:	6872      	ldr	r2, [r6, #4]
 8006f04:	4621      	mov	r1, r4
 8006f06:	2304      	movs	r3, #4
 8006f08:	f000 f974 	bl	80071f4 <arm_radix8_butterfly_f32>
 8006f0c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006f0e:	6872      	ldr	r2, [r6, #4]
 8006f10:	4621      	mov	r1, r4
 8006f12:	2304      	movs	r3, #4
 8006f14:	f000 f96e 	bl	80071f4 <arm_radix8_butterfly_f32>
 8006f18:	9801      	ldr	r0, [sp, #4]
 8006f1a:	6872      	ldr	r2, [r6, #4]
 8006f1c:	4621      	mov	r1, r4
 8006f1e:	2304      	movs	r3, #4
 8006f20:	b00f      	add	sp, #60	@ 0x3c
 8006f22:	ecbd 8b0a 	vpop	{d8-d12}
 8006f26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f2a:	f000 b963 	b.w	80071f4 <arm_radix8_butterfly_f32>
 8006f2e:	bf00      	nop

08006f30 <arm_cfft_f32>:
 8006f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f34:	2a01      	cmp	r2, #1
 8006f36:	4606      	mov	r6, r0
 8006f38:	4617      	mov	r7, r2
 8006f3a:	460c      	mov	r4, r1
 8006f3c:	4698      	mov	r8, r3
 8006f3e:	8805      	ldrh	r5, [r0, #0]
 8006f40:	d054      	beq.n	8006fec <arm_cfft_f32+0xbc>
 8006f42:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8006f46:	d04c      	beq.n	8006fe2 <arm_cfft_f32+0xb2>
 8006f48:	d916      	bls.n	8006f78 <arm_cfft_f32+0x48>
 8006f4a:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8006f4e:	d01a      	beq.n	8006f86 <arm_cfft_f32+0x56>
 8006f50:	d95c      	bls.n	800700c <arm_cfft_f32+0xdc>
 8006f52:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8006f56:	d044      	beq.n	8006fe2 <arm_cfft_f32+0xb2>
 8006f58:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8006f5c:	d105      	bne.n	8006f6a <arm_cfft_f32+0x3a>
 8006f5e:	4620      	mov	r0, r4
 8006f60:	4629      	mov	r1, r5
 8006f62:	6872      	ldr	r2, [r6, #4]
 8006f64:	2301      	movs	r3, #1
 8006f66:	f000 f945 	bl	80071f4 <arm_radix8_butterfly_f32>
 8006f6a:	f1b8 0f00 	cmp.w	r8, #0
 8006f6e:	d111      	bne.n	8006f94 <arm_cfft_f32+0x64>
 8006f70:	2f01      	cmp	r7, #1
 8006f72:	d016      	beq.n	8006fa2 <arm_cfft_f32+0x72>
 8006f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f78:	2d20      	cmp	r5, #32
 8006f7a:	d032      	beq.n	8006fe2 <arm_cfft_f32+0xb2>
 8006f7c:	d94a      	bls.n	8007014 <arm_cfft_f32+0xe4>
 8006f7e:	2d40      	cmp	r5, #64	@ 0x40
 8006f80:	d0ed      	beq.n	8006f5e <arm_cfft_f32+0x2e>
 8006f82:	2d80      	cmp	r5, #128	@ 0x80
 8006f84:	d1f1      	bne.n	8006f6a <arm_cfft_f32+0x3a>
 8006f86:	4630      	mov	r0, r6
 8006f88:	4621      	mov	r1, r4
 8006f8a:	f7ff fca1 	bl	80068d0 <arm_cfft_radix8by2_f32>
 8006f8e:	f1b8 0f00 	cmp.w	r8, #0
 8006f92:	d0ed      	beq.n	8006f70 <arm_cfft_f32+0x40>
 8006f94:	4620      	mov	r0, r4
 8006f96:	89b1      	ldrh	r1, [r6, #12]
 8006f98:	68b2      	ldr	r2, [r6, #8]
 8006f9a:	f7f9 f939 	bl	8000210 <arm_bitreversal_32>
 8006f9e:	2f01      	cmp	r7, #1
 8006fa0:	d1e8      	bne.n	8006f74 <arm_cfft_f32+0x44>
 8006fa2:	ee07 5a90 	vmov	s15, r5
 8006fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006faa:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8006fae:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 8006fb2:	2d00      	cmp	r5, #0
 8006fb4:	d0de      	beq.n	8006f74 <arm_cfft_f32+0x44>
 8006fb6:	f104 0108 	add.w	r1, r4, #8
 8006fba:	2300      	movs	r3, #0
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	429d      	cmp	r5, r3
 8006fc0:	f101 0108 	add.w	r1, r1, #8
 8006fc4:	ed11 7a04 	vldr	s14, [r1, #-16]
 8006fc8:	ed51 7a03 	vldr	s15, [r1, #-12]
 8006fcc:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006fd0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8006fd4:	ed01 7a04 	vstr	s14, [r1, #-16]
 8006fd8:	ed41 7a03 	vstr	s15, [r1, #-12]
 8006fdc:	d1ee      	bne.n	8006fbc <arm_cfft_f32+0x8c>
 8006fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fe2:	4630      	mov	r0, r6
 8006fe4:	4621      	mov	r1, r4
 8006fe6:	f7ff fd45 	bl	8006a74 <arm_cfft_radix8by4_f32>
 8006fea:	e7be      	b.n	8006f6a <arm_cfft_f32+0x3a>
 8006fec:	b1ad      	cbz	r5, 800701a <arm_cfft_f32+0xea>
 8006fee:	f101 030c 	add.w	r3, r1, #12
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	ed53 7a02 	vldr	s15, [r3, #-8]
 8006ff8:	3201      	adds	r2, #1
 8006ffa:	eef1 7a67 	vneg.f32	s15, s15
 8006ffe:	4295      	cmp	r5, r2
 8007000:	ed43 7a02 	vstr	s15, [r3, #-8]
 8007004:	f103 0308 	add.w	r3, r3, #8
 8007008:	d1f4      	bne.n	8006ff4 <arm_cfft_f32+0xc4>
 800700a:	e79a      	b.n	8006f42 <arm_cfft_f32+0x12>
 800700c:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8007010:	d0a5      	beq.n	8006f5e <arm_cfft_f32+0x2e>
 8007012:	e7aa      	b.n	8006f6a <arm_cfft_f32+0x3a>
 8007014:	2d10      	cmp	r5, #16
 8007016:	d0b6      	beq.n	8006f86 <arm_cfft_f32+0x56>
 8007018:	e7a7      	b.n	8006f6a <arm_cfft_f32+0x3a>
 800701a:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800701e:	d894      	bhi.n	8006f4a <arm_cfft_f32+0x1a>
 8007020:	e7aa      	b.n	8006f78 <arm_cfft_f32+0x48>
 8007022:	bf00      	nop

08007024 <arm_cmplx_mag_f32>:
 8007024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007028:	ea5f 0892 	movs.w	r8, r2, lsr #2
 800702c:	b084      	sub	sp, #16
 800702e:	d07f      	beq.n	8007130 <arm_cmplx_mag_f32+0x10c>
 8007030:	2700      	movs	r7, #0
 8007032:	f100 0420 	add.w	r4, r0, #32
 8007036:	f101 0510 	add.w	r5, r1, #16
 800703a:	4646      	mov	r6, r8
 800703c:	e05a      	b.n	80070f4 <arm_cmplx_mag_f32+0xd0>
 800703e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8007042:	eeb4 0a40 	vcmp.f32	s0, s0
 8007046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800704a:	f040 80a4 	bne.w	8007196 <arm_cmplx_mag_f32+0x172>
 800704e:	ed05 0a04 	vstr	s0, [r5, #-16]
 8007052:	ed54 7a06 	vldr	s15, [r4, #-24]	@ 0xffffffe8
 8007056:	ed14 0a05 	vldr	s0, [r4, #-20]	@ 0xffffffec
 800705a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800705e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007062:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007066:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800706a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800706e:	f2c0 808f 	blt.w	8007190 <arm_cmplx_mag_f32+0x16c>
 8007072:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8007076:	eeb4 0a40 	vcmp.f32	s0, s0
 800707a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800707e:	f040 80af 	bne.w	80071e0 <arm_cmplx_mag_f32+0x1bc>
 8007082:	ed05 0a03 	vstr	s0, [r5, #-12]
 8007086:	ed54 7a04 	vldr	s15, [r4, #-16]
 800708a:	ed14 0a03 	vldr	s0, [r4, #-12]
 800708e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007092:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007096:	ee77 7a80 	vadd.f32	s15, s15, s0
 800709a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800709e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070a2:	db72      	blt.n	800718a <arm_cmplx_mag_f32+0x166>
 80070a4:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80070a8:	eeb4 0a40 	vcmp.f32	s0, s0
 80070ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070b0:	f040 808c 	bne.w	80071cc <arm_cmplx_mag_f32+0x1a8>
 80070b4:	ed05 0a02 	vstr	s0, [r5, #-8]
 80070b8:	ed54 7a02 	vldr	s15, [r4, #-8]
 80070bc:	ed14 0a01 	vldr	s0, [r4, #-4]
 80070c0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80070c4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80070c8:	ee77 7a80 	vadd.f32	s15, s15, s0
 80070cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80070d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070d4:	db20      	blt.n	8007118 <arm_cmplx_mag_f32+0xf4>
 80070d6:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80070da:	eeb4 0a40 	vcmp.f32	s0, s0
 80070de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070e2:	d169      	bne.n	80071b8 <arm_cmplx_mag_f32+0x194>
 80070e4:	3e01      	subs	r6, #1
 80070e6:	ed05 0a01 	vstr	s0, [r5, #-4]
 80070ea:	f104 0420 	add.w	r4, r4, #32
 80070ee:	f105 0510 	add.w	r5, r5, #16
 80070f2:	d019      	beq.n	8007128 <arm_cmplx_mag_f32+0x104>
 80070f4:	ed54 7a08 	vldr	s15, [r4, #-32]	@ 0xffffffe0
 80070f8:	ed14 0a07 	vldr	s0, [r4, #-28]	@ 0xffffffe4
 80070fc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007100:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007104:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007108:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800710c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007110:	da95      	bge.n	800703e <arm_cmplx_mag_f32+0x1a>
 8007112:	f845 7c10 	str.w	r7, [r5, #-16]
 8007116:	e79c      	b.n	8007052 <arm_cmplx_mag_f32+0x2e>
 8007118:	3e01      	subs	r6, #1
 800711a:	f845 7c04 	str.w	r7, [r5, #-4]
 800711e:	f104 0420 	add.w	r4, r4, #32
 8007122:	f105 0510 	add.w	r5, r5, #16
 8007126:	d1e5      	bne.n	80070f4 <arm_cmplx_mag_f32+0xd0>
 8007128:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 800712c:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 8007130:	f012 0503 	ands.w	r5, r2, #3
 8007134:	d026      	beq.n	8007184 <arm_cmplx_mag_f32+0x160>
 8007136:	2600      	movs	r6, #0
 8007138:	f100 0408 	add.w	r4, r0, #8
 800713c:	e00c      	b.n	8007158 <arm_cmplx_mag_f32+0x134>
 800713e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8007142:	eeb4 0a40 	vcmp.f32	s0, s0
 8007146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800714a:	d12e      	bne.n	80071aa <arm_cmplx_mag_f32+0x186>
 800714c:	3d01      	subs	r5, #1
 800714e:	ed01 0a01 	vstr	s0, [r1, #-4]
 8007152:	f104 0408 	add.w	r4, r4, #8
 8007156:	d015      	beq.n	8007184 <arm_cmplx_mag_f32+0x160>
 8007158:	ed54 7a02 	vldr	s15, [r4, #-8]
 800715c:	ed14 0a01 	vldr	s0, [r4, #-4]
 8007160:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007164:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007168:	3104      	adds	r1, #4
 800716a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800716e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007176:	dae2      	bge.n	800713e <arm_cmplx_mag_f32+0x11a>
 8007178:	3d01      	subs	r5, #1
 800717a:	f841 6c04 	str.w	r6, [r1, #-4]
 800717e:	f104 0408 	add.w	r4, r4, #8
 8007182:	d1e9      	bne.n	8007158 <arm_cmplx_mag_f32+0x134>
 8007184:	b004      	add	sp, #16
 8007186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800718a:	f845 7c08 	str.w	r7, [r5, #-8]
 800718e:	e793      	b.n	80070b8 <arm_cmplx_mag_f32+0x94>
 8007190:	f845 7c0c 	str.w	r7, [r5, #-12]
 8007194:	e777      	b.n	8007086 <arm_cmplx_mag_f32+0x62>
 8007196:	eeb0 0a67 	vmov.f32	s0, s15
 800719a:	9203      	str	r2, [sp, #12]
 800719c:	9102      	str	r1, [sp, #8]
 800719e:	9001      	str	r0, [sp, #4]
 80071a0:	f003 f80a 	bl	800a1b8 <sqrtf>
 80071a4:	a801      	add	r0, sp, #4
 80071a6:	c807      	ldmia	r0, {r0, r1, r2}
 80071a8:	e751      	b.n	800704e <arm_cmplx_mag_f32+0x2a>
 80071aa:	eeb0 0a67 	vmov.f32	s0, s15
 80071ae:	9101      	str	r1, [sp, #4]
 80071b0:	f003 f802 	bl	800a1b8 <sqrtf>
 80071b4:	9901      	ldr	r1, [sp, #4]
 80071b6:	e7c9      	b.n	800714c <arm_cmplx_mag_f32+0x128>
 80071b8:	eeb0 0a67 	vmov.f32	s0, s15
 80071bc:	9203      	str	r2, [sp, #12]
 80071be:	9102      	str	r1, [sp, #8]
 80071c0:	9001      	str	r0, [sp, #4]
 80071c2:	f002 fff9 	bl	800a1b8 <sqrtf>
 80071c6:	a801      	add	r0, sp, #4
 80071c8:	c807      	ldmia	r0, {r0, r1, r2}
 80071ca:	e78b      	b.n	80070e4 <arm_cmplx_mag_f32+0xc0>
 80071cc:	eeb0 0a67 	vmov.f32	s0, s15
 80071d0:	9203      	str	r2, [sp, #12]
 80071d2:	9102      	str	r1, [sp, #8]
 80071d4:	9001      	str	r0, [sp, #4]
 80071d6:	f002 ffef 	bl	800a1b8 <sqrtf>
 80071da:	a801      	add	r0, sp, #4
 80071dc:	c807      	ldmia	r0, {r0, r1, r2}
 80071de:	e769      	b.n	80070b4 <arm_cmplx_mag_f32+0x90>
 80071e0:	eeb0 0a67 	vmov.f32	s0, s15
 80071e4:	9203      	str	r2, [sp, #12]
 80071e6:	9102      	str	r1, [sp, #8]
 80071e8:	9001      	str	r0, [sp, #4]
 80071ea:	f002 ffe5 	bl	800a1b8 <sqrtf>
 80071ee:	a801      	add	r0, sp, #4
 80071f0:	c807      	ldmia	r0, {r0, r1, r2}
 80071f2:	e746      	b.n	8007082 <arm_cmplx_mag_f32+0x5e>

080071f4 <arm_radix8_butterfly_f32>:
 80071f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071f8:	ed2d 8b10 	vpush	{d8-d15}
 80071fc:	b09d      	sub	sp, #116	@ 0x74
 80071fe:	461c      	mov	r4, r3
 8007200:	ed9f bac8 	vldr	s22, [pc, #800]	@ 8007524 <arm_radix8_butterfly_f32+0x330>
 8007204:	921a      	str	r2, [sp, #104]	@ 0x68
 8007206:	1d03      	adds	r3, r0, #4
 8007208:	4682      	mov	sl, r0
 800720a:	4689      	mov	r9, r1
 800720c:	468b      	mov	fp, r1
 800720e:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007210:	9400      	str	r4, [sp, #0]
 8007212:	469e      	mov	lr, r3
 8007214:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8007218:	005a      	lsls	r2, r3, #1
 800721a:	18d6      	adds	r6, r2, r3
 800721c:	18f5      	adds	r5, r6, r3
 800721e:	9203      	str	r2, [sp, #12]
 8007220:	195a      	adds	r2, r3, r5
 8007222:	18d0      	adds	r0, r2, r3
 8007224:	00df      	lsls	r7, r3, #3
 8007226:	1819      	adds	r1, r3, r0
 8007228:	463c      	mov	r4, r7
 800722a:	9701      	str	r7, [sp, #4]
 800722c:	4457      	add	r7, sl
 800722e:	930c      	str	r3, [sp, #48]	@ 0x30
 8007230:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 8007234:	011b      	lsls	r3, r3, #4
 8007236:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 800723a:	eb07 0c04 	add.w	ip, r7, r4
 800723e:	9c00      	ldr	r4, [sp, #0]
 8007240:	9302      	str	r3, [sp, #8]
 8007242:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 8007246:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 800724a:	3204      	adds	r2, #4
 800724c:	3104      	adds	r1, #4
 800724e:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 8007252:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007256:	f04f 0800 	mov.w	r8, #0
 800725a:	eddc 7a00 	vldr	s15, [ip]
 800725e:	edd7 6a00 	vldr	s13, [r7]
 8007262:	edd6 3a00 	vldr	s7, [r6]
 8007266:	ed5e aa01 	vldr	s21, [lr, #-4]
 800726a:	edd5 4a00 	vldr	s9, [r5]
 800726e:	ed90 2a00 	vldr	s4, [r0]
 8007272:	ed12 7a01 	vldr	s14, [r2, #-4]
 8007276:	ed51 0a01 	vldr	s1, [r1, #-4]
 800727a:	ee77 8a82 	vadd.f32	s17, s15, s4
 800727e:	ee33 4aa0 	vadd.f32	s8, s7, s1
 8007282:	ee76 1a87 	vadd.f32	s3, s13, s14
 8007286:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 800728a:	ee31 6a84 	vadd.f32	s12, s3, s8
 800728e:	ee33 5a28 	vadd.f32	s10, s6, s17
 8007292:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007296:	ee75 6a06 	vadd.f32	s13, s10, s12
 800729a:	ee35 5a46 	vsub.f32	s10, s10, s12
 800729e:	ed4e 6a01 	vstr	s13, [lr, #-4]
 80072a2:	ed85 5a00 	vstr	s10, [r5]
 80072a6:	ed96 1a01 	vldr	s2, [r6, #4]
 80072aa:	edd7 5a01 	vldr	s11, [r7, #4]
 80072ae:	ed92 aa00 	vldr	s20, [r2]
 80072b2:	ed91 6a00 	vldr	s12, [r1]
 80072b6:	ed9e 9a00 	vldr	s18, [lr]
 80072ba:	ed95 5a01 	vldr	s10, [r5, #4]
 80072be:	eddc 6a01 	vldr	s13, [ip, #4]
 80072c2:	edd0 9a01 	vldr	s19, [r0, #4]
 80072c6:	ee73 0ae0 	vsub.f32	s1, s7, s1
 80072ca:	ee71 2a46 	vsub.f32	s5, s2, s12
 80072ce:	ee75 3aca 	vsub.f32	s7, s11, s20
 80072d2:	ee37 0a60 	vsub.f32	s0, s14, s1
 80072d6:	ee33 8aa2 	vadd.f32	s16, s7, s5
 80072da:	ee37 7a20 	vadd.f32	s14, s14, s1
 80072de:	ee73 2ae2 	vsub.f32	s5, s7, s5
 80072e2:	ee37 2ac2 	vsub.f32	s4, s15, s4
 80072e6:	ee79 3a05 	vadd.f32	s7, s18, s10
 80072ea:	ee60 0a0b 	vmul.f32	s1, s0, s22
 80072ee:	ee39 5a45 	vsub.f32	s10, s18, s10
 80072f2:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 80072f6:	ee36 9aa9 	vadd.f32	s18, s13, s19
 80072fa:	ee75 5a8a 	vadd.f32	s11, s11, s20
 80072fe:	ee31 6a06 	vadd.f32	s12, s2, s12
 8007302:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8007306:	ee28 8a0b 	vmul.f32	s16, s16, s22
 800730a:	ee62 2a8b 	vmul.f32	s5, s5, s22
 800730e:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8007312:	ee33 3a68 	vsub.f32	s6, s6, s17
 8007316:	ee36 0a88 	vadd.f32	s0, s13, s16
 800731a:	ee75 8a86 	vadd.f32	s17, s11, s12
 800731e:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8007322:	ee71 1ac4 	vsub.f32	s3, s3, s8
 8007326:	ee75 6a62 	vsub.f32	s13, s10, s5
 800732a:	ee33 4ac9 	vsub.f32	s8, s7, s18
 800732e:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8007332:	ee33 1a89 	vadd.f32	s2, s7, s18
 8007336:	ee74 5ae0 	vsub.f32	s11, s9, s1
 800733a:	ee74 3aa0 	vadd.f32	s7, s9, s1
 800733e:	ee75 4a22 	vadd.f32	s9, s10, s5
 8007342:	ee32 5a27 	vadd.f32	s10, s4, s15
 8007346:	ee72 7a67 	vsub.f32	s15, s4, s15
 800734a:	ee33 8a06 	vadd.f32	s16, s6, s12
 800734e:	ee75 2a87 	vadd.f32	s5, s11, s14
 8007352:	ee31 9a28 	vadd.f32	s18, s2, s17
 8007356:	ee33 6a46 	vsub.f32	s12, s6, s12
 800735a:	ee74 0a61 	vsub.f32	s1, s8, s3
 800735e:	ee33 2a80 	vadd.f32	s4, s7, s0
 8007362:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8007366:	ee34 3ac5 	vsub.f32	s6, s9, s10
 800736a:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800736e:	ee31 1a68 	vsub.f32	s2, s2, s17
 8007372:	ee34 4a21 	vadd.f32	s8, s8, s3
 8007376:	ee73 3ac0 	vsub.f32	s7, s7, s0
 800737a:	ee74 4a85 	vadd.f32	s9, s9, s10
 800737e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8007382:	44d8      	add	r8, fp
 8007384:	45c1      	cmp	r9, r8
 8007386:	ed8e 9a00 	vstr	s18, [lr]
 800738a:	ed85 1a01 	vstr	s2, [r5, #4]
 800738e:	449e      	add	lr, r3
 8007390:	ed8c 8a00 	vstr	s16, [ip]
 8007394:	441d      	add	r5, r3
 8007396:	ed80 6a00 	vstr	s12, [r0]
 800739a:	edcc 0a01 	vstr	s1, [ip, #4]
 800739e:	ed80 4a01 	vstr	s8, [r0, #4]
 80073a2:	449c      	add	ip, r3
 80073a4:	ed87 2a00 	vstr	s4, [r7]
 80073a8:	4418      	add	r0, r3
 80073aa:	ed41 3a01 	vstr	s7, [r1, #-4]
 80073ae:	ed42 2a01 	vstr	s5, [r2, #-4]
 80073b2:	ed86 7a00 	vstr	s14, [r6]
 80073b6:	ed87 3a01 	vstr	s6, [r7, #4]
 80073ba:	edc1 4a00 	vstr	s9, [r1]
 80073be:	441f      	add	r7, r3
 80073c0:	edc2 5a00 	vstr	s11, [r2]
 80073c4:	4419      	add	r1, r3
 80073c6:	edc6 6a01 	vstr	s13, [r6, #4]
 80073ca:	441a      	add	r2, r3
 80073cc:	441e      	add	r6, r3
 80073ce:	f63f af44 	bhi.w	800725a <arm_radix8_butterfly_f32+0x66>
 80073d2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80073d4:	2907      	cmp	r1, #7
 80073d6:	4620      	mov	r0, r4
 80073d8:	f240 81e9 	bls.w	80077ae <arm_radix8_butterfly_f32+0x5ba>
 80073dc:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 80073e0:	193e      	adds	r6, r7, r4
 80073e2:	1935      	adds	r5, r6, r4
 80073e4:	9c03      	ldr	r4, [sp, #12]
 80073e6:	9000      	str	r0, [sp, #0]
 80073e8:	4622      	mov	r2, r4
 80073ea:	3201      	adds	r2, #1
 80073ec:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80073f0:	9900      	ldr	r1, [sp, #0]
 80073f2:	1828      	adds	r0, r5, r0
 80073f4:	eb00 0e01 	add.w	lr, r0, r1
 80073f8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80073fa:	440a      	add	r2, r1
 80073fc:	eb04 0c01 	add.w	ip, r4, r1
 8007400:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 8007404:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 8007408:	9a00      	ldr	r2, [sp, #0]
 800740a:	940f      	str	r4, [sp, #60]	@ 0x3c
 800740c:	00ed      	lsls	r5, r5, #3
 800740e:	9511      	str	r5, [sp, #68]	@ 0x44
 8007410:	00d5      	lsls	r5, r2, #3
 8007412:	950d      	str	r5, [sp, #52]	@ 0x34
 8007414:	9d01      	ldr	r5, [sp, #4]
 8007416:	3508      	adds	r5, #8
 8007418:	9516      	str	r5, [sp, #88]	@ 0x58
 800741a:	9d02      	ldr	r5, [sp, #8]
 800741c:	3508      	adds	r5, #8
 800741e:	0114      	lsls	r4, r2, #4
 8007420:	9517      	str	r5, [sp, #92]	@ 0x5c
 8007422:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007424:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8007426:	940e      	str	r4, [sp, #56]	@ 0x38
 8007428:	00c0      	lsls	r0, r0, #3
 800742a:	9010      	str	r0, [sp, #64]	@ 0x40
 800742c:	18aa      	adds	r2, r5, r2
 800742e:	9207      	str	r2, [sp, #28]
 8007430:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8007432:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8007434:	18aa      	adds	r2, r5, r2
 8007436:	9208      	str	r2, [sp, #32]
 8007438:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800743a:	18aa      	adds	r2, r5, r2
 800743c:	9209      	str	r2, [sp, #36]	@ 0x24
 800743e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8007442:	f10e 0204 	add.w	r2, lr, #4
 8007446:	920a      	str	r2, [sp, #40]	@ 0x28
 8007448:	00c9      	lsls	r1, r1, #3
 800744a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800744c:	310c      	adds	r1, #12
 800744e:	00f6      	lsls	r6, r6, #3
 8007450:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 8007454:	9114      	str	r1, [sp, #80]	@ 0x50
 8007456:	18a9      	adds	r1, r5, r2
 8007458:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800745a:	9612      	str	r6, [sp, #72]	@ 0x48
 800745c:	00ff      	lsls	r7, r7, #3
 800745e:	19ae      	adds	r6, r5, r6
 8007460:	3008      	adds	r0, #8
 8007462:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8007466:	9606      	str	r6, [sp, #24]
 8007468:	9019      	str	r0, [sp, #100]	@ 0x64
 800746a:	18aa      	adds	r2, r5, r2
 800746c:	0164      	lsls	r4, r4, #5
 800746e:	19ee      	adds	r6, r5, r7
 8007470:	f10c 000c 	add.w	r0, ip, #12
 8007474:	9713      	str	r7, [sp, #76]	@ 0x4c
 8007476:	9604      	str	r6, [sp, #16]
 8007478:	9015      	str	r0, [sp, #84]	@ 0x54
 800747a:	9103      	str	r1, [sp, #12]
 800747c:	9205      	str	r2, [sp, #20]
 800747e:	f104 0208 	add.w	r2, r4, #8
 8007482:	9218      	str	r2, [sp, #96]	@ 0x60
 8007484:	f04f 0801 	mov.w	r8, #1
 8007488:	2200      	movs	r2, #0
 800748a:	f102 0108 	add.w	r1, r2, #8
 800748e:	460f      	mov	r7, r1
 8007490:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007492:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8007494:	188e      	adds	r6, r1, r2
 8007496:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8007498:	188d      	adds	r5, r1, r2
 800749a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800749c:	188c      	adds	r4, r1, r2
 800749e:	9919      	ldr	r1, [sp, #100]	@ 0x64
 80074a0:	1888      	adds	r0, r1, r2
 80074a2:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80074a4:	eb01 0c02 	add.w	ip, r1, r2
 80074a8:	9915      	ldr	r1, [sp, #84]	@ 0x54
 80074aa:	440a      	add	r2, r1
 80074ac:	9903      	ldr	r1, [sp, #12]
 80074ae:	edd1 fa00 	vldr	s31, [r1]
 80074b2:	9905      	ldr	r1, [sp, #20]
 80074b4:	ed91 fa00 	vldr	s30, [r1]
 80074b8:	9904      	ldr	r1, [sp, #16]
 80074ba:	edd1 ea00 	vldr	s29, [r1]
 80074be:	9906      	ldr	r1, [sp, #24]
 80074c0:	ed91 ea00 	vldr	s28, [r1]
 80074c4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80074c6:	edd1 da00 	vldr	s27, [r1]
 80074ca:	9908      	ldr	r1, [sp, #32]
 80074cc:	ed91 da00 	vldr	s26, [r1]
 80074d0:	9907      	ldr	r1, [sp, #28]
 80074d2:	edd1 ca00 	vldr	s25, [r1]
 80074d6:	9903      	ldr	r1, [sp, #12]
 80074d8:	ed91 ca01 	vldr	s24, [r1, #4]
 80074dc:	9905      	ldr	r1, [sp, #20]
 80074de:	edd1 ba01 	vldr	s23, [r1, #4]
 80074e2:	9904      	ldr	r1, [sp, #16]
 80074e4:	edd1 aa01 	vldr	s21, [r1, #4]
 80074e8:	9906      	ldr	r1, [sp, #24]
 80074ea:	ed91 aa01 	vldr	s20, [r1, #4]
 80074ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80074f0:	edd1 7a01 	vldr	s15, [r1, #4]
 80074f4:	9908      	ldr	r1, [sp, #32]
 80074f6:	edcd 7a00 	vstr	s15, [sp]
 80074fa:	edd1 7a01 	vldr	s15, [r1, #4]
 80074fe:	9907      	ldr	r1, [sp, #28]
 8007500:	edcd 7a01 	vstr	s15, [sp, #4]
 8007504:	edd1 7a01 	vldr	s15, [r1, #4]
 8007508:	eb0a 0e07 	add.w	lr, sl, r7
 800750c:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800750e:	edcd 7a02 	vstr	s15, [sp, #8]
 8007512:	eb0c 010a 	add.w	r1, ip, sl
 8007516:	4456      	add	r6, sl
 8007518:	4455      	add	r5, sl
 800751a:	4454      	add	r4, sl
 800751c:	4450      	add	r0, sl
 800751e:	4452      	add	r2, sl
 8007520:	46c4      	mov	ip, r8
 8007522:	e001      	b.n	8007528 <arm_radix8_butterfly_f32+0x334>
 8007524:	3f3504f3 	.word	0x3f3504f3
 8007528:	ed96 5a00 	vldr	s10, [r6]
 800752c:	ed52 9a01 	vldr	s19, [r2, #-4]
 8007530:	ed11 6a01 	vldr	s12, [r1, #-4]
 8007534:	edd0 7a00 	vldr	s15, [r0]
 8007538:	ed17 7a01 	vldr	s14, [r7, #-4]
 800753c:	edde 3a00 	vldr	s7, [lr]
 8007540:	ed94 3a00 	vldr	s6, [r4]
 8007544:	ed95 2a00 	vldr	s4, [r5]
 8007548:	ed9e 0a01 	vldr	s0, [lr, #4]
 800754c:	ee33 8a85 	vadd.f32	s16, s7, s10
 8007550:	ee32 1a06 	vadd.f32	s2, s4, s12
 8007554:	ee33 4a29 	vadd.f32	s8, s6, s19
 8007558:	ee77 4a87 	vadd.f32	s9, s15, s14
 800755c:	ee78 1a04 	vadd.f32	s3, s16, s8
 8007560:	ee71 6a24 	vadd.f32	s13, s2, s9
 8007564:	ee32 2a46 	vsub.f32	s4, s4, s12
 8007568:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800756c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007570:	ed8e 6a00 	vstr	s12, [lr]
 8007574:	edd0 8a01 	vldr	s17, [r0, #4]
 8007578:	ed95 9a01 	vldr	s18, [r5, #4]
 800757c:	edd1 2a00 	vldr	s5, [r1]
 8007580:	ed97 7a00 	vldr	s14, [r7]
 8007584:	edd4 0a01 	vldr	s1, [r4, #4]
 8007588:	ed96 6a01 	vldr	s12, [r6, #4]
 800758c:	edd2 5a00 	vldr	s11, [r2]
 8007590:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8007594:	ee33 3a69 	vsub.f32	s6, s6, s19
 8007598:	ee39 5a62 	vsub.f32	s10, s18, s5
 800759c:	ee78 9ac7 	vsub.f32	s19, s17, s14
 80075a0:	ee38 4a44 	vsub.f32	s8, s16, s8
 80075a4:	ee38 7a87 	vadd.f32	s14, s17, s14
 80075a8:	ee30 8aa5 	vadd.f32	s16, s1, s11
 80075ac:	ee79 2a22 	vadd.f32	s5, s18, s5
 80075b0:	ee75 8a69 	vsub.f32	s17, s10, s19
 80075b4:	ee32 9a27 	vadd.f32	s18, s4, s15
 80075b8:	ee35 5a29 	vadd.f32	s10, s10, s19
 80075bc:	ee72 7a67 	vsub.f32	s15, s4, s15
 80075c0:	ee30 2a06 	vadd.f32	s4, s0, s12
 80075c4:	ee69 9a0b 	vmul.f32	s19, s18, s22
 80075c8:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80075cc:	ee32 9a08 	vadd.f32	s18, s4, s16
 80075d0:	ee68 8a8b 	vmul.f32	s17, s17, s22
 80075d4:	ee32 2a48 	vsub.f32	s4, s4, s16
 80075d8:	ee71 4a64 	vsub.f32	s9, s2, s9
 80075dc:	ee25 5a0b 	vmul.f32	s10, s10, s22
 80075e0:	ee32 1a87 	vadd.f32	s2, s5, s14
 80075e4:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80075e8:	ee72 2ac7 	vsub.f32	s5, s5, s14
 80075ec:	ee30 6a46 	vsub.f32	s12, s0, s12
 80075f0:	ee73 0a29 	vadd.f32	s1, s6, s19
 80075f4:	ee36 0a28 	vadd.f32	s0, s12, s17
 80075f8:	ee33 3a69 	vsub.f32	s6, s6, s19
 80075fc:	ee32 7a64 	vsub.f32	s14, s4, s9
 8007600:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8007604:	ee36 6a68 	vsub.f32	s12, s12, s17
 8007608:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800760c:	ee75 8a85 	vadd.f32	s17, s11, s10
 8007610:	ee74 3a22 	vadd.f32	s7, s8, s5
 8007614:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8007618:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800761c:	ee79 1a41 	vsub.f32	s3, s18, s2
 8007620:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8007624:	ee76 5a43 	vsub.f32	s11, s12, s6
 8007628:	ee74 2a62 	vsub.f32	s5, s8, s5
 800762c:	ee72 4a24 	vadd.f32	s9, s4, s9
 8007630:	ee30 4a60 	vsub.f32	s8, s0, s1
 8007634:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8007638:	ee30 0a20 	vadd.f32	s0, s0, s1
 800763c:	ee77 9a85 	vadd.f32	s19, s15, s10
 8007640:	ee36 6a03 	vadd.f32	s12, s12, s6
 8007644:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8007648:	ee2e 2a21 	vmul.f32	s4, s28, s3
 800764c:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8007650:	ee6f 0a23 	vmul.f32	s1, s30, s7
 8007654:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8007658:	ee39 1a01 	vadd.f32	s2, s18, s2
 800765c:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8007660:	ee2b 9a87 	vmul.f32	s18, s23, s14
 8007664:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8007668:	ee2f 7a07 	vmul.f32	s14, s30, s14
 800766c:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8007670:	ee35 3a03 	vadd.f32	s6, s10, s6
 8007674:	ee72 6a66 	vsub.f32	s13, s4, s13
 8007678:	ee2c 5a04 	vmul.f32	s10, s24, s8
 800767c:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8007680:	ed9d 4a02 	vldr	s8, [sp, #8]
 8007684:	ed8e 1a01 	vstr	s2, [lr, #4]
 8007688:	ee77 3a63 	vsub.f32	s7, s14, s7
 800768c:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8007690:	ed9d 7a01 	vldr	s14, [sp, #4]
 8007694:	ed86 3a00 	vstr	s6, [r6]
 8007698:	ee30 9a89 	vadd.f32	s18, s1, s18
 800769c:	ee32 2a05 	vadd.f32	s4, s4, s10
 80076a0:	ee6d 0a22 	vmul.f32	s1, s26, s5
 80076a4:	ee31 8ac8 	vsub.f32	s16, s3, s16
 80076a8:	ee67 2a22 	vmul.f32	s5, s14, s5
 80076ac:	ee64 1a00 	vmul.f32	s3, s8, s0
 80076b0:	ee27 7a24 	vmul.f32	s14, s14, s9
 80076b4:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 80076b8:	ee6d 4a24 	vmul.f32	s9, s26, s9
 80076bc:	ee64 8a28 	vmul.f32	s17, s8, s17
 80076c0:	ed9d 4a00 	vldr	s8, [sp]
 80076c4:	edc6 6a01 	vstr	s13, [r6, #4]
 80076c8:	ee74 2ae2 	vsub.f32	s5, s9, s5
 80076cc:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 80076d0:	ee64 9a29 	vmul.f32	s19, s8, s19
 80076d4:	ee24 4a25 	vmul.f32	s8, s8, s11
 80076d8:	ee30 7a87 	vadd.f32	s14, s1, s14
 80076dc:	ee74 4a84 	vadd.f32	s9, s9, s8
 80076e0:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 80076e4:	ee2a 4a86 	vmul.f32	s8, s21, s12
 80076e8:	ee2c 0a80 	vmul.f32	s0, s25, s0
 80076ec:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 80076f0:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 80076f4:	ee2e 6a86 	vmul.f32	s12, s29, s12
 80076f8:	ee75 1a21 	vadd.f32	s3, s10, s3
 80076fc:	ee30 0a68 	vsub.f32	s0, s0, s17
 8007700:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8007704:	ee70 0a84 	vadd.f32	s1, s1, s8
 8007708:	ee36 6a67 	vsub.f32	s12, s12, s15
 800770c:	44dc      	add	ip, fp
 800770e:	45e1      	cmp	r9, ip
 8007710:	ed84 9a00 	vstr	s18, [r4]
 8007714:	edc4 3a01 	vstr	s7, [r4, #4]
 8007718:	449e      	add	lr, r3
 800771a:	ed02 7a01 	vstr	s14, [r2, #-4]
 800771e:	edc2 2a00 	vstr	s5, [r2]
 8007722:	441e      	add	r6, r3
 8007724:	ed85 2a00 	vstr	s4, [r5]
 8007728:	ed85 8a01 	vstr	s16, [r5, #4]
 800772c:	441c      	add	r4, r3
 800772e:	ed47 1a01 	vstr	s3, [r7, #-4]
 8007732:	ed87 0a00 	vstr	s0, [r7]
 8007736:	441a      	add	r2, r3
 8007738:	ed41 4a01 	vstr	s9, [r1, #-4]
 800773c:	edc1 9a00 	vstr	s19, [r1]
 8007740:	441d      	add	r5, r3
 8007742:	edc0 0a00 	vstr	s1, [r0]
 8007746:	441f      	add	r7, r3
 8007748:	ed80 6a01 	vstr	s12, [r0, #4]
 800774c:	4419      	add	r1, r3
 800774e:	4418      	add	r0, r3
 8007750:	f63f aeea 	bhi.w	8007528 <arm_radix8_butterfly_f32+0x334>
 8007754:	9a03      	ldr	r2, [sp, #12]
 8007756:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007758:	440a      	add	r2, r1
 800775a:	9203      	str	r2, [sp, #12]
 800775c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800775e:	9a05      	ldr	r2, [sp, #20]
 8007760:	440a      	add	r2, r1
 8007762:	9205      	str	r2, [sp, #20]
 8007764:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007766:	9a04      	ldr	r2, [sp, #16]
 8007768:	440a      	add	r2, r1
 800776a:	9204      	str	r2, [sp, #16]
 800776c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800776e:	9a06      	ldr	r2, [sp, #24]
 8007770:	440a      	add	r2, r1
 8007772:	9206      	str	r2, [sp, #24]
 8007774:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8007776:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007778:	440a      	add	r2, r1
 800777a:	9209      	str	r2, [sp, #36]	@ 0x24
 800777c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800777e:	9a08      	ldr	r2, [sp, #32]
 8007780:	440a      	add	r2, r1
 8007782:	9208      	str	r2, [sp, #32]
 8007784:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007786:	9a07      	ldr	r2, [sp, #28]
 8007788:	440a      	add	r2, r1
 800778a:	9207      	str	r2, [sp, #28]
 800778c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800778e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007790:	f108 0801 	add.w	r8, r8, #1
 8007794:	3208      	adds	r2, #8
 8007796:	4588      	cmp	r8, r1
 8007798:	920a      	str	r2, [sp, #40]	@ 0x28
 800779a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800779c:	f47f ae75 	bne.w	800748a <arm_radix8_butterfly_f32+0x296>
 80077a0:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 80077a4:	9300      	str	r3, [sp, #0]
 80077a6:	46c3      	mov	fp, r8
 80077a8:	f8dd e06c 	ldr.w	lr, [sp, #108]	@ 0x6c
 80077ac:	e532      	b.n	8007214 <arm_radix8_butterfly_f32+0x20>
 80077ae:	b01d      	add	sp, #116	@ 0x74
 80077b0:	ecbd 8b10 	vpop	{d8-d15}
 80077b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080077b8 <__cvt>:
 80077b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077bc:	ec57 6b10 	vmov	r6, r7, d0
 80077c0:	2f00      	cmp	r7, #0
 80077c2:	460c      	mov	r4, r1
 80077c4:	4619      	mov	r1, r3
 80077c6:	463b      	mov	r3, r7
 80077c8:	bfbb      	ittet	lt
 80077ca:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80077ce:	461f      	movlt	r7, r3
 80077d0:	2300      	movge	r3, #0
 80077d2:	232d      	movlt	r3, #45	@ 0x2d
 80077d4:	700b      	strb	r3, [r1, #0]
 80077d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80077d8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80077dc:	4691      	mov	r9, r2
 80077de:	f023 0820 	bic.w	r8, r3, #32
 80077e2:	bfbc      	itt	lt
 80077e4:	4632      	movlt	r2, r6
 80077e6:	4616      	movlt	r6, r2
 80077e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80077ec:	d005      	beq.n	80077fa <__cvt+0x42>
 80077ee:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80077f2:	d100      	bne.n	80077f6 <__cvt+0x3e>
 80077f4:	3401      	adds	r4, #1
 80077f6:	2102      	movs	r1, #2
 80077f8:	e000      	b.n	80077fc <__cvt+0x44>
 80077fa:	2103      	movs	r1, #3
 80077fc:	ab03      	add	r3, sp, #12
 80077fe:	9301      	str	r3, [sp, #4]
 8007800:	ab02      	add	r3, sp, #8
 8007802:	9300      	str	r3, [sp, #0]
 8007804:	ec47 6b10 	vmov	d0, r6, r7
 8007808:	4653      	mov	r3, sl
 800780a:	4622      	mov	r2, r4
 800780c:	f000 fe4c 	bl	80084a8 <_dtoa_r>
 8007810:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007814:	4605      	mov	r5, r0
 8007816:	d119      	bne.n	800784c <__cvt+0x94>
 8007818:	f019 0f01 	tst.w	r9, #1
 800781c:	d00e      	beq.n	800783c <__cvt+0x84>
 800781e:	eb00 0904 	add.w	r9, r0, r4
 8007822:	2200      	movs	r2, #0
 8007824:	2300      	movs	r3, #0
 8007826:	4630      	mov	r0, r6
 8007828:	4639      	mov	r1, r7
 800782a:	f7f9 f9cd 	bl	8000bc8 <__aeabi_dcmpeq>
 800782e:	b108      	cbz	r0, 8007834 <__cvt+0x7c>
 8007830:	f8cd 900c 	str.w	r9, [sp, #12]
 8007834:	2230      	movs	r2, #48	@ 0x30
 8007836:	9b03      	ldr	r3, [sp, #12]
 8007838:	454b      	cmp	r3, r9
 800783a:	d31e      	bcc.n	800787a <__cvt+0xc2>
 800783c:	9b03      	ldr	r3, [sp, #12]
 800783e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007840:	1b5b      	subs	r3, r3, r5
 8007842:	4628      	mov	r0, r5
 8007844:	6013      	str	r3, [r2, #0]
 8007846:	b004      	add	sp, #16
 8007848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800784c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007850:	eb00 0904 	add.w	r9, r0, r4
 8007854:	d1e5      	bne.n	8007822 <__cvt+0x6a>
 8007856:	7803      	ldrb	r3, [r0, #0]
 8007858:	2b30      	cmp	r3, #48	@ 0x30
 800785a:	d10a      	bne.n	8007872 <__cvt+0xba>
 800785c:	2200      	movs	r2, #0
 800785e:	2300      	movs	r3, #0
 8007860:	4630      	mov	r0, r6
 8007862:	4639      	mov	r1, r7
 8007864:	f7f9 f9b0 	bl	8000bc8 <__aeabi_dcmpeq>
 8007868:	b918      	cbnz	r0, 8007872 <__cvt+0xba>
 800786a:	f1c4 0401 	rsb	r4, r4, #1
 800786e:	f8ca 4000 	str.w	r4, [sl]
 8007872:	f8da 3000 	ldr.w	r3, [sl]
 8007876:	4499      	add	r9, r3
 8007878:	e7d3      	b.n	8007822 <__cvt+0x6a>
 800787a:	1c59      	adds	r1, r3, #1
 800787c:	9103      	str	r1, [sp, #12]
 800787e:	701a      	strb	r2, [r3, #0]
 8007880:	e7d9      	b.n	8007836 <__cvt+0x7e>

08007882 <__exponent>:
 8007882:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007884:	2900      	cmp	r1, #0
 8007886:	bfba      	itte	lt
 8007888:	4249      	neglt	r1, r1
 800788a:	232d      	movlt	r3, #45	@ 0x2d
 800788c:	232b      	movge	r3, #43	@ 0x2b
 800788e:	2909      	cmp	r1, #9
 8007890:	7002      	strb	r2, [r0, #0]
 8007892:	7043      	strb	r3, [r0, #1]
 8007894:	dd29      	ble.n	80078ea <__exponent+0x68>
 8007896:	f10d 0307 	add.w	r3, sp, #7
 800789a:	461d      	mov	r5, r3
 800789c:	270a      	movs	r7, #10
 800789e:	461a      	mov	r2, r3
 80078a0:	fbb1 f6f7 	udiv	r6, r1, r7
 80078a4:	fb07 1416 	mls	r4, r7, r6, r1
 80078a8:	3430      	adds	r4, #48	@ 0x30
 80078aa:	f802 4c01 	strb.w	r4, [r2, #-1]
 80078ae:	460c      	mov	r4, r1
 80078b0:	2c63      	cmp	r4, #99	@ 0x63
 80078b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80078b6:	4631      	mov	r1, r6
 80078b8:	dcf1      	bgt.n	800789e <__exponent+0x1c>
 80078ba:	3130      	adds	r1, #48	@ 0x30
 80078bc:	1e94      	subs	r4, r2, #2
 80078be:	f803 1c01 	strb.w	r1, [r3, #-1]
 80078c2:	1c41      	adds	r1, r0, #1
 80078c4:	4623      	mov	r3, r4
 80078c6:	42ab      	cmp	r3, r5
 80078c8:	d30a      	bcc.n	80078e0 <__exponent+0x5e>
 80078ca:	f10d 0309 	add.w	r3, sp, #9
 80078ce:	1a9b      	subs	r3, r3, r2
 80078d0:	42ac      	cmp	r4, r5
 80078d2:	bf88      	it	hi
 80078d4:	2300      	movhi	r3, #0
 80078d6:	3302      	adds	r3, #2
 80078d8:	4403      	add	r3, r0
 80078da:	1a18      	subs	r0, r3, r0
 80078dc:	b003      	add	sp, #12
 80078de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078e0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80078e4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80078e8:	e7ed      	b.n	80078c6 <__exponent+0x44>
 80078ea:	2330      	movs	r3, #48	@ 0x30
 80078ec:	3130      	adds	r1, #48	@ 0x30
 80078ee:	7083      	strb	r3, [r0, #2]
 80078f0:	70c1      	strb	r1, [r0, #3]
 80078f2:	1d03      	adds	r3, r0, #4
 80078f4:	e7f1      	b.n	80078da <__exponent+0x58>
	...

080078f8 <_printf_float>:
 80078f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078fc:	b08d      	sub	sp, #52	@ 0x34
 80078fe:	460c      	mov	r4, r1
 8007900:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007904:	4616      	mov	r6, r2
 8007906:	461f      	mov	r7, r3
 8007908:	4605      	mov	r5, r0
 800790a:	f000 fccd 	bl	80082a8 <_localeconv_r>
 800790e:	6803      	ldr	r3, [r0, #0]
 8007910:	9304      	str	r3, [sp, #16]
 8007912:	4618      	mov	r0, r3
 8007914:	f7f8 fd2c 	bl	8000370 <strlen>
 8007918:	2300      	movs	r3, #0
 800791a:	930a      	str	r3, [sp, #40]	@ 0x28
 800791c:	f8d8 3000 	ldr.w	r3, [r8]
 8007920:	9005      	str	r0, [sp, #20]
 8007922:	3307      	adds	r3, #7
 8007924:	f023 0307 	bic.w	r3, r3, #7
 8007928:	f103 0208 	add.w	r2, r3, #8
 800792c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007930:	f8d4 b000 	ldr.w	fp, [r4]
 8007934:	f8c8 2000 	str.w	r2, [r8]
 8007938:	e9d3 8900 	ldrd	r8, r9, [r3]
 800793c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007940:	9307      	str	r3, [sp, #28]
 8007942:	f8cd 8018 	str.w	r8, [sp, #24]
 8007946:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800794a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800794e:	4b9c      	ldr	r3, [pc, #624]	@ (8007bc0 <_printf_float+0x2c8>)
 8007950:	f04f 32ff 	mov.w	r2, #4294967295
 8007954:	f7f9 f96a 	bl	8000c2c <__aeabi_dcmpun>
 8007958:	bb70      	cbnz	r0, 80079b8 <_printf_float+0xc0>
 800795a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800795e:	4b98      	ldr	r3, [pc, #608]	@ (8007bc0 <_printf_float+0x2c8>)
 8007960:	f04f 32ff 	mov.w	r2, #4294967295
 8007964:	f7f9 f944 	bl	8000bf0 <__aeabi_dcmple>
 8007968:	bb30      	cbnz	r0, 80079b8 <_printf_float+0xc0>
 800796a:	2200      	movs	r2, #0
 800796c:	2300      	movs	r3, #0
 800796e:	4640      	mov	r0, r8
 8007970:	4649      	mov	r1, r9
 8007972:	f7f9 f933 	bl	8000bdc <__aeabi_dcmplt>
 8007976:	b110      	cbz	r0, 800797e <_printf_float+0x86>
 8007978:	232d      	movs	r3, #45	@ 0x2d
 800797a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800797e:	4a91      	ldr	r2, [pc, #580]	@ (8007bc4 <_printf_float+0x2cc>)
 8007980:	4b91      	ldr	r3, [pc, #580]	@ (8007bc8 <_printf_float+0x2d0>)
 8007982:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007986:	bf94      	ite	ls
 8007988:	4690      	movls	r8, r2
 800798a:	4698      	movhi	r8, r3
 800798c:	2303      	movs	r3, #3
 800798e:	6123      	str	r3, [r4, #16]
 8007990:	f02b 0304 	bic.w	r3, fp, #4
 8007994:	6023      	str	r3, [r4, #0]
 8007996:	f04f 0900 	mov.w	r9, #0
 800799a:	9700      	str	r7, [sp, #0]
 800799c:	4633      	mov	r3, r6
 800799e:	aa0b      	add	r2, sp, #44	@ 0x2c
 80079a0:	4621      	mov	r1, r4
 80079a2:	4628      	mov	r0, r5
 80079a4:	f000 f9d2 	bl	8007d4c <_printf_common>
 80079a8:	3001      	adds	r0, #1
 80079aa:	f040 808d 	bne.w	8007ac8 <_printf_float+0x1d0>
 80079ae:	f04f 30ff 	mov.w	r0, #4294967295
 80079b2:	b00d      	add	sp, #52	@ 0x34
 80079b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079b8:	4642      	mov	r2, r8
 80079ba:	464b      	mov	r3, r9
 80079bc:	4640      	mov	r0, r8
 80079be:	4649      	mov	r1, r9
 80079c0:	f7f9 f934 	bl	8000c2c <__aeabi_dcmpun>
 80079c4:	b140      	cbz	r0, 80079d8 <_printf_float+0xe0>
 80079c6:	464b      	mov	r3, r9
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	bfbc      	itt	lt
 80079cc:	232d      	movlt	r3, #45	@ 0x2d
 80079ce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80079d2:	4a7e      	ldr	r2, [pc, #504]	@ (8007bcc <_printf_float+0x2d4>)
 80079d4:	4b7e      	ldr	r3, [pc, #504]	@ (8007bd0 <_printf_float+0x2d8>)
 80079d6:	e7d4      	b.n	8007982 <_printf_float+0x8a>
 80079d8:	6863      	ldr	r3, [r4, #4]
 80079da:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80079de:	9206      	str	r2, [sp, #24]
 80079e0:	1c5a      	adds	r2, r3, #1
 80079e2:	d13b      	bne.n	8007a5c <_printf_float+0x164>
 80079e4:	2306      	movs	r3, #6
 80079e6:	6063      	str	r3, [r4, #4]
 80079e8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80079ec:	2300      	movs	r3, #0
 80079ee:	6022      	str	r2, [r4, #0]
 80079f0:	9303      	str	r3, [sp, #12]
 80079f2:	ab0a      	add	r3, sp, #40	@ 0x28
 80079f4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80079f8:	ab09      	add	r3, sp, #36	@ 0x24
 80079fa:	9300      	str	r3, [sp, #0]
 80079fc:	6861      	ldr	r1, [r4, #4]
 80079fe:	ec49 8b10 	vmov	d0, r8, r9
 8007a02:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007a06:	4628      	mov	r0, r5
 8007a08:	f7ff fed6 	bl	80077b8 <__cvt>
 8007a0c:	9b06      	ldr	r3, [sp, #24]
 8007a0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007a10:	2b47      	cmp	r3, #71	@ 0x47
 8007a12:	4680      	mov	r8, r0
 8007a14:	d129      	bne.n	8007a6a <_printf_float+0x172>
 8007a16:	1cc8      	adds	r0, r1, #3
 8007a18:	db02      	blt.n	8007a20 <_printf_float+0x128>
 8007a1a:	6863      	ldr	r3, [r4, #4]
 8007a1c:	4299      	cmp	r1, r3
 8007a1e:	dd41      	ble.n	8007aa4 <_printf_float+0x1ac>
 8007a20:	f1aa 0a02 	sub.w	sl, sl, #2
 8007a24:	fa5f fa8a 	uxtb.w	sl, sl
 8007a28:	3901      	subs	r1, #1
 8007a2a:	4652      	mov	r2, sl
 8007a2c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007a30:	9109      	str	r1, [sp, #36]	@ 0x24
 8007a32:	f7ff ff26 	bl	8007882 <__exponent>
 8007a36:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007a38:	1813      	adds	r3, r2, r0
 8007a3a:	2a01      	cmp	r2, #1
 8007a3c:	4681      	mov	r9, r0
 8007a3e:	6123      	str	r3, [r4, #16]
 8007a40:	dc02      	bgt.n	8007a48 <_printf_float+0x150>
 8007a42:	6822      	ldr	r2, [r4, #0]
 8007a44:	07d2      	lsls	r2, r2, #31
 8007a46:	d501      	bpl.n	8007a4c <_printf_float+0x154>
 8007a48:	3301      	adds	r3, #1
 8007a4a:	6123      	str	r3, [r4, #16]
 8007a4c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d0a2      	beq.n	800799a <_printf_float+0xa2>
 8007a54:	232d      	movs	r3, #45	@ 0x2d
 8007a56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a5a:	e79e      	b.n	800799a <_printf_float+0xa2>
 8007a5c:	9a06      	ldr	r2, [sp, #24]
 8007a5e:	2a47      	cmp	r2, #71	@ 0x47
 8007a60:	d1c2      	bne.n	80079e8 <_printf_float+0xf0>
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d1c0      	bne.n	80079e8 <_printf_float+0xf0>
 8007a66:	2301      	movs	r3, #1
 8007a68:	e7bd      	b.n	80079e6 <_printf_float+0xee>
 8007a6a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007a6e:	d9db      	bls.n	8007a28 <_printf_float+0x130>
 8007a70:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007a74:	d118      	bne.n	8007aa8 <_printf_float+0x1b0>
 8007a76:	2900      	cmp	r1, #0
 8007a78:	6863      	ldr	r3, [r4, #4]
 8007a7a:	dd0b      	ble.n	8007a94 <_printf_float+0x19c>
 8007a7c:	6121      	str	r1, [r4, #16]
 8007a7e:	b913      	cbnz	r3, 8007a86 <_printf_float+0x18e>
 8007a80:	6822      	ldr	r2, [r4, #0]
 8007a82:	07d0      	lsls	r0, r2, #31
 8007a84:	d502      	bpl.n	8007a8c <_printf_float+0x194>
 8007a86:	3301      	adds	r3, #1
 8007a88:	440b      	add	r3, r1
 8007a8a:	6123      	str	r3, [r4, #16]
 8007a8c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007a8e:	f04f 0900 	mov.w	r9, #0
 8007a92:	e7db      	b.n	8007a4c <_printf_float+0x154>
 8007a94:	b913      	cbnz	r3, 8007a9c <_printf_float+0x1a4>
 8007a96:	6822      	ldr	r2, [r4, #0]
 8007a98:	07d2      	lsls	r2, r2, #31
 8007a9a:	d501      	bpl.n	8007aa0 <_printf_float+0x1a8>
 8007a9c:	3302      	adds	r3, #2
 8007a9e:	e7f4      	b.n	8007a8a <_printf_float+0x192>
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	e7f2      	b.n	8007a8a <_printf_float+0x192>
 8007aa4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007aa8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007aaa:	4299      	cmp	r1, r3
 8007aac:	db05      	blt.n	8007aba <_printf_float+0x1c2>
 8007aae:	6823      	ldr	r3, [r4, #0]
 8007ab0:	6121      	str	r1, [r4, #16]
 8007ab2:	07d8      	lsls	r0, r3, #31
 8007ab4:	d5ea      	bpl.n	8007a8c <_printf_float+0x194>
 8007ab6:	1c4b      	adds	r3, r1, #1
 8007ab8:	e7e7      	b.n	8007a8a <_printf_float+0x192>
 8007aba:	2900      	cmp	r1, #0
 8007abc:	bfd4      	ite	le
 8007abe:	f1c1 0202 	rsble	r2, r1, #2
 8007ac2:	2201      	movgt	r2, #1
 8007ac4:	4413      	add	r3, r2
 8007ac6:	e7e0      	b.n	8007a8a <_printf_float+0x192>
 8007ac8:	6823      	ldr	r3, [r4, #0]
 8007aca:	055a      	lsls	r2, r3, #21
 8007acc:	d407      	bmi.n	8007ade <_printf_float+0x1e6>
 8007ace:	6923      	ldr	r3, [r4, #16]
 8007ad0:	4642      	mov	r2, r8
 8007ad2:	4631      	mov	r1, r6
 8007ad4:	4628      	mov	r0, r5
 8007ad6:	47b8      	blx	r7
 8007ad8:	3001      	adds	r0, #1
 8007ada:	d12b      	bne.n	8007b34 <_printf_float+0x23c>
 8007adc:	e767      	b.n	80079ae <_printf_float+0xb6>
 8007ade:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007ae2:	f240 80dd 	bls.w	8007ca0 <_printf_float+0x3a8>
 8007ae6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007aea:	2200      	movs	r2, #0
 8007aec:	2300      	movs	r3, #0
 8007aee:	f7f9 f86b 	bl	8000bc8 <__aeabi_dcmpeq>
 8007af2:	2800      	cmp	r0, #0
 8007af4:	d033      	beq.n	8007b5e <_printf_float+0x266>
 8007af6:	4a37      	ldr	r2, [pc, #220]	@ (8007bd4 <_printf_float+0x2dc>)
 8007af8:	2301      	movs	r3, #1
 8007afa:	4631      	mov	r1, r6
 8007afc:	4628      	mov	r0, r5
 8007afe:	47b8      	blx	r7
 8007b00:	3001      	adds	r0, #1
 8007b02:	f43f af54 	beq.w	80079ae <_printf_float+0xb6>
 8007b06:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007b0a:	4543      	cmp	r3, r8
 8007b0c:	db02      	blt.n	8007b14 <_printf_float+0x21c>
 8007b0e:	6823      	ldr	r3, [r4, #0]
 8007b10:	07d8      	lsls	r0, r3, #31
 8007b12:	d50f      	bpl.n	8007b34 <_printf_float+0x23c>
 8007b14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b18:	4631      	mov	r1, r6
 8007b1a:	4628      	mov	r0, r5
 8007b1c:	47b8      	blx	r7
 8007b1e:	3001      	adds	r0, #1
 8007b20:	f43f af45 	beq.w	80079ae <_printf_float+0xb6>
 8007b24:	f04f 0900 	mov.w	r9, #0
 8007b28:	f108 38ff 	add.w	r8, r8, #4294967295
 8007b2c:	f104 0a1a 	add.w	sl, r4, #26
 8007b30:	45c8      	cmp	r8, r9
 8007b32:	dc09      	bgt.n	8007b48 <_printf_float+0x250>
 8007b34:	6823      	ldr	r3, [r4, #0]
 8007b36:	079b      	lsls	r3, r3, #30
 8007b38:	f100 8103 	bmi.w	8007d42 <_printf_float+0x44a>
 8007b3c:	68e0      	ldr	r0, [r4, #12]
 8007b3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b40:	4298      	cmp	r0, r3
 8007b42:	bfb8      	it	lt
 8007b44:	4618      	movlt	r0, r3
 8007b46:	e734      	b.n	80079b2 <_printf_float+0xba>
 8007b48:	2301      	movs	r3, #1
 8007b4a:	4652      	mov	r2, sl
 8007b4c:	4631      	mov	r1, r6
 8007b4e:	4628      	mov	r0, r5
 8007b50:	47b8      	blx	r7
 8007b52:	3001      	adds	r0, #1
 8007b54:	f43f af2b 	beq.w	80079ae <_printf_float+0xb6>
 8007b58:	f109 0901 	add.w	r9, r9, #1
 8007b5c:	e7e8      	b.n	8007b30 <_printf_float+0x238>
 8007b5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	dc39      	bgt.n	8007bd8 <_printf_float+0x2e0>
 8007b64:	4a1b      	ldr	r2, [pc, #108]	@ (8007bd4 <_printf_float+0x2dc>)
 8007b66:	2301      	movs	r3, #1
 8007b68:	4631      	mov	r1, r6
 8007b6a:	4628      	mov	r0, r5
 8007b6c:	47b8      	blx	r7
 8007b6e:	3001      	adds	r0, #1
 8007b70:	f43f af1d 	beq.w	80079ae <_printf_float+0xb6>
 8007b74:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007b78:	ea59 0303 	orrs.w	r3, r9, r3
 8007b7c:	d102      	bne.n	8007b84 <_printf_float+0x28c>
 8007b7e:	6823      	ldr	r3, [r4, #0]
 8007b80:	07d9      	lsls	r1, r3, #31
 8007b82:	d5d7      	bpl.n	8007b34 <_printf_float+0x23c>
 8007b84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b88:	4631      	mov	r1, r6
 8007b8a:	4628      	mov	r0, r5
 8007b8c:	47b8      	blx	r7
 8007b8e:	3001      	adds	r0, #1
 8007b90:	f43f af0d 	beq.w	80079ae <_printf_float+0xb6>
 8007b94:	f04f 0a00 	mov.w	sl, #0
 8007b98:	f104 0b1a 	add.w	fp, r4, #26
 8007b9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b9e:	425b      	negs	r3, r3
 8007ba0:	4553      	cmp	r3, sl
 8007ba2:	dc01      	bgt.n	8007ba8 <_printf_float+0x2b0>
 8007ba4:	464b      	mov	r3, r9
 8007ba6:	e793      	b.n	8007ad0 <_printf_float+0x1d8>
 8007ba8:	2301      	movs	r3, #1
 8007baa:	465a      	mov	r2, fp
 8007bac:	4631      	mov	r1, r6
 8007bae:	4628      	mov	r0, r5
 8007bb0:	47b8      	blx	r7
 8007bb2:	3001      	adds	r0, #1
 8007bb4:	f43f aefb 	beq.w	80079ae <_printf_float+0xb6>
 8007bb8:	f10a 0a01 	add.w	sl, sl, #1
 8007bbc:	e7ee      	b.n	8007b9c <_printf_float+0x2a4>
 8007bbe:	bf00      	nop
 8007bc0:	7fefffff 	.word	0x7fefffff
 8007bc4:	0801e024 	.word	0x0801e024
 8007bc8:	0801e028 	.word	0x0801e028
 8007bcc:	0801e02c 	.word	0x0801e02c
 8007bd0:	0801e030 	.word	0x0801e030
 8007bd4:	0801e034 	.word	0x0801e034
 8007bd8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007bda:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007bde:	4553      	cmp	r3, sl
 8007be0:	bfa8      	it	ge
 8007be2:	4653      	movge	r3, sl
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	4699      	mov	r9, r3
 8007be8:	dc36      	bgt.n	8007c58 <_printf_float+0x360>
 8007bea:	f04f 0b00 	mov.w	fp, #0
 8007bee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007bf2:	f104 021a 	add.w	r2, r4, #26
 8007bf6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007bf8:	9306      	str	r3, [sp, #24]
 8007bfa:	eba3 0309 	sub.w	r3, r3, r9
 8007bfe:	455b      	cmp	r3, fp
 8007c00:	dc31      	bgt.n	8007c66 <_printf_float+0x36e>
 8007c02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c04:	459a      	cmp	sl, r3
 8007c06:	dc3a      	bgt.n	8007c7e <_printf_float+0x386>
 8007c08:	6823      	ldr	r3, [r4, #0]
 8007c0a:	07da      	lsls	r2, r3, #31
 8007c0c:	d437      	bmi.n	8007c7e <_printf_float+0x386>
 8007c0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c10:	ebaa 0903 	sub.w	r9, sl, r3
 8007c14:	9b06      	ldr	r3, [sp, #24]
 8007c16:	ebaa 0303 	sub.w	r3, sl, r3
 8007c1a:	4599      	cmp	r9, r3
 8007c1c:	bfa8      	it	ge
 8007c1e:	4699      	movge	r9, r3
 8007c20:	f1b9 0f00 	cmp.w	r9, #0
 8007c24:	dc33      	bgt.n	8007c8e <_printf_float+0x396>
 8007c26:	f04f 0800 	mov.w	r8, #0
 8007c2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c2e:	f104 0b1a 	add.w	fp, r4, #26
 8007c32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c34:	ebaa 0303 	sub.w	r3, sl, r3
 8007c38:	eba3 0309 	sub.w	r3, r3, r9
 8007c3c:	4543      	cmp	r3, r8
 8007c3e:	f77f af79 	ble.w	8007b34 <_printf_float+0x23c>
 8007c42:	2301      	movs	r3, #1
 8007c44:	465a      	mov	r2, fp
 8007c46:	4631      	mov	r1, r6
 8007c48:	4628      	mov	r0, r5
 8007c4a:	47b8      	blx	r7
 8007c4c:	3001      	adds	r0, #1
 8007c4e:	f43f aeae 	beq.w	80079ae <_printf_float+0xb6>
 8007c52:	f108 0801 	add.w	r8, r8, #1
 8007c56:	e7ec      	b.n	8007c32 <_printf_float+0x33a>
 8007c58:	4642      	mov	r2, r8
 8007c5a:	4631      	mov	r1, r6
 8007c5c:	4628      	mov	r0, r5
 8007c5e:	47b8      	blx	r7
 8007c60:	3001      	adds	r0, #1
 8007c62:	d1c2      	bne.n	8007bea <_printf_float+0x2f2>
 8007c64:	e6a3      	b.n	80079ae <_printf_float+0xb6>
 8007c66:	2301      	movs	r3, #1
 8007c68:	4631      	mov	r1, r6
 8007c6a:	4628      	mov	r0, r5
 8007c6c:	9206      	str	r2, [sp, #24]
 8007c6e:	47b8      	blx	r7
 8007c70:	3001      	adds	r0, #1
 8007c72:	f43f ae9c 	beq.w	80079ae <_printf_float+0xb6>
 8007c76:	9a06      	ldr	r2, [sp, #24]
 8007c78:	f10b 0b01 	add.w	fp, fp, #1
 8007c7c:	e7bb      	b.n	8007bf6 <_printf_float+0x2fe>
 8007c7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c82:	4631      	mov	r1, r6
 8007c84:	4628      	mov	r0, r5
 8007c86:	47b8      	blx	r7
 8007c88:	3001      	adds	r0, #1
 8007c8a:	d1c0      	bne.n	8007c0e <_printf_float+0x316>
 8007c8c:	e68f      	b.n	80079ae <_printf_float+0xb6>
 8007c8e:	9a06      	ldr	r2, [sp, #24]
 8007c90:	464b      	mov	r3, r9
 8007c92:	4442      	add	r2, r8
 8007c94:	4631      	mov	r1, r6
 8007c96:	4628      	mov	r0, r5
 8007c98:	47b8      	blx	r7
 8007c9a:	3001      	adds	r0, #1
 8007c9c:	d1c3      	bne.n	8007c26 <_printf_float+0x32e>
 8007c9e:	e686      	b.n	80079ae <_printf_float+0xb6>
 8007ca0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007ca4:	f1ba 0f01 	cmp.w	sl, #1
 8007ca8:	dc01      	bgt.n	8007cae <_printf_float+0x3b6>
 8007caa:	07db      	lsls	r3, r3, #31
 8007cac:	d536      	bpl.n	8007d1c <_printf_float+0x424>
 8007cae:	2301      	movs	r3, #1
 8007cb0:	4642      	mov	r2, r8
 8007cb2:	4631      	mov	r1, r6
 8007cb4:	4628      	mov	r0, r5
 8007cb6:	47b8      	blx	r7
 8007cb8:	3001      	adds	r0, #1
 8007cba:	f43f ae78 	beq.w	80079ae <_printf_float+0xb6>
 8007cbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cc2:	4631      	mov	r1, r6
 8007cc4:	4628      	mov	r0, r5
 8007cc6:	47b8      	blx	r7
 8007cc8:	3001      	adds	r0, #1
 8007cca:	f43f ae70 	beq.w	80079ae <_printf_float+0xb6>
 8007cce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007cda:	f7f8 ff75 	bl	8000bc8 <__aeabi_dcmpeq>
 8007cde:	b9c0      	cbnz	r0, 8007d12 <_printf_float+0x41a>
 8007ce0:	4653      	mov	r3, sl
 8007ce2:	f108 0201 	add.w	r2, r8, #1
 8007ce6:	4631      	mov	r1, r6
 8007ce8:	4628      	mov	r0, r5
 8007cea:	47b8      	blx	r7
 8007cec:	3001      	adds	r0, #1
 8007cee:	d10c      	bne.n	8007d0a <_printf_float+0x412>
 8007cf0:	e65d      	b.n	80079ae <_printf_float+0xb6>
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	465a      	mov	r2, fp
 8007cf6:	4631      	mov	r1, r6
 8007cf8:	4628      	mov	r0, r5
 8007cfa:	47b8      	blx	r7
 8007cfc:	3001      	adds	r0, #1
 8007cfe:	f43f ae56 	beq.w	80079ae <_printf_float+0xb6>
 8007d02:	f108 0801 	add.w	r8, r8, #1
 8007d06:	45d0      	cmp	r8, sl
 8007d08:	dbf3      	blt.n	8007cf2 <_printf_float+0x3fa>
 8007d0a:	464b      	mov	r3, r9
 8007d0c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007d10:	e6df      	b.n	8007ad2 <_printf_float+0x1da>
 8007d12:	f04f 0800 	mov.w	r8, #0
 8007d16:	f104 0b1a 	add.w	fp, r4, #26
 8007d1a:	e7f4      	b.n	8007d06 <_printf_float+0x40e>
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	4642      	mov	r2, r8
 8007d20:	e7e1      	b.n	8007ce6 <_printf_float+0x3ee>
 8007d22:	2301      	movs	r3, #1
 8007d24:	464a      	mov	r2, r9
 8007d26:	4631      	mov	r1, r6
 8007d28:	4628      	mov	r0, r5
 8007d2a:	47b8      	blx	r7
 8007d2c:	3001      	adds	r0, #1
 8007d2e:	f43f ae3e 	beq.w	80079ae <_printf_float+0xb6>
 8007d32:	f108 0801 	add.w	r8, r8, #1
 8007d36:	68e3      	ldr	r3, [r4, #12]
 8007d38:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007d3a:	1a5b      	subs	r3, r3, r1
 8007d3c:	4543      	cmp	r3, r8
 8007d3e:	dcf0      	bgt.n	8007d22 <_printf_float+0x42a>
 8007d40:	e6fc      	b.n	8007b3c <_printf_float+0x244>
 8007d42:	f04f 0800 	mov.w	r8, #0
 8007d46:	f104 0919 	add.w	r9, r4, #25
 8007d4a:	e7f4      	b.n	8007d36 <_printf_float+0x43e>

08007d4c <_printf_common>:
 8007d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d50:	4616      	mov	r6, r2
 8007d52:	4698      	mov	r8, r3
 8007d54:	688a      	ldr	r2, [r1, #8]
 8007d56:	690b      	ldr	r3, [r1, #16]
 8007d58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	bfb8      	it	lt
 8007d60:	4613      	movlt	r3, r2
 8007d62:	6033      	str	r3, [r6, #0]
 8007d64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007d68:	4607      	mov	r7, r0
 8007d6a:	460c      	mov	r4, r1
 8007d6c:	b10a      	cbz	r2, 8007d72 <_printf_common+0x26>
 8007d6e:	3301      	adds	r3, #1
 8007d70:	6033      	str	r3, [r6, #0]
 8007d72:	6823      	ldr	r3, [r4, #0]
 8007d74:	0699      	lsls	r1, r3, #26
 8007d76:	bf42      	ittt	mi
 8007d78:	6833      	ldrmi	r3, [r6, #0]
 8007d7a:	3302      	addmi	r3, #2
 8007d7c:	6033      	strmi	r3, [r6, #0]
 8007d7e:	6825      	ldr	r5, [r4, #0]
 8007d80:	f015 0506 	ands.w	r5, r5, #6
 8007d84:	d106      	bne.n	8007d94 <_printf_common+0x48>
 8007d86:	f104 0a19 	add.w	sl, r4, #25
 8007d8a:	68e3      	ldr	r3, [r4, #12]
 8007d8c:	6832      	ldr	r2, [r6, #0]
 8007d8e:	1a9b      	subs	r3, r3, r2
 8007d90:	42ab      	cmp	r3, r5
 8007d92:	dc26      	bgt.n	8007de2 <_printf_common+0x96>
 8007d94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007d98:	6822      	ldr	r2, [r4, #0]
 8007d9a:	3b00      	subs	r3, #0
 8007d9c:	bf18      	it	ne
 8007d9e:	2301      	movne	r3, #1
 8007da0:	0692      	lsls	r2, r2, #26
 8007da2:	d42b      	bmi.n	8007dfc <_printf_common+0xb0>
 8007da4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007da8:	4641      	mov	r1, r8
 8007daa:	4638      	mov	r0, r7
 8007dac:	47c8      	blx	r9
 8007dae:	3001      	adds	r0, #1
 8007db0:	d01e      	beq.n	8007df0 <_printf_common+0xa4>
 8007db2:	6823      	ldr	r3, [r4, #0]
 8007db4:	6922      	ldr	r2, [r4, #16]
 8007db6:	f003 0306 	and.w	r3, r3, #6
 8007dba:	2b04      	cmp	r3, #4
 8007dbc:	bf02      	ittt	eq
 8007dbe:	68e5      	ldreq	r5, [r4, #12]
 8007dc0:	6833      	ldreq	r3, [r6, #0]
 8007dc2:	1aed      	subeq	r5, r5, r3
 8007dc4:	68a3      	ldr	r3, [r4, #8]
 8007dc6:	bf0c      	ite	eq
 8007dc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007dcc:	2500      	movne	r5, #0
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	bfc4      	itt	gt
 8007dd2:	1a9b      	subgt	r3, r3, r2
 8007dd4:	18ed      	addgt	r5, r5, r3
 8007dd6:	2600      	movs	r6, #0
 8007dd8:	341a      	adds	r4, #26
 8007dda:	42b5      	cmp	r5, r6
 8007ddc:	d11a      	bne.n	8007e14 <_printf_common+0xc8>
 8007dde:	2000      	movs	r0, #0
 8007de0:	e008      	b.n	8007df4 <_printf_common+0xa8>
 8007de2:	2301      	movs	r3, #1
 8007de4:	4652      	mov	r2, sl
 8007de6:	4641      	mov	r1, r8
 8007de8:	4638      	mov	r0, r7
 8007dea:	47c8      	blx	r9
 8007dec:	3001      	adds	r0, #1
 8007dee:	d103      	bne.n	8007df8 <_printf_common+0xac>
 8007df0:	f04f 30ff 	mov.w	r0, #4294967295
 8007df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007df8:	3501      	adds	r5, #1
 8007dfa:	e7c6      	b.n	8007d8a <_printf_common+0x3e>
 8007dfc:	18e1      	adds	r1, r4, r3
 8007dfe:	1c5a      	adds	r2, r3, #1
 8007e00:	2030      	movs	r0, #48	@ 0x30
 8007e02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007e06:	4422      	add	r2, r4
 8007e08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007e0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007e10:	3302      	adds	r3, #2
 8007e12:	e7c7      	b.n	8007da4 <_printf_common+0x58>
 8007e14:	2301      	movs	r3, #1
 8007e16:	4622      	mov	r2, r4
 8007e18:	4641      	mov	r1, r8
 8007e1a:	4638      	mov	r0, r7
 8007e1c:	47c8      	blx	r9
 8007e1e:	3001      	adds	r0, #1
 8007e20:	d0e6      	beq.n	8007df0 <_printf_common+0xa4>
 8007e22:	3601      	adds	r6, #1
 8007e24:	e7d9      	b.n	8007dda <_printf_common+0x8e>
	...

08007e28 <_printf_i>:
 8007e28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e2c:	7e0f      	ldrb	r7, [r1, #24]
 8007e2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007e30:	2f78      	cmp	r7, #120	@ 0x78
 8007e32:	4691      	mov	r9, r2
 8007e34:	4680      	mov	r8, r0
 8007e36:	460c      	mov	r4, r1
 8007e38:	469a      	mov	sl, r3
 8007e3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007e3e:	d807      	bhi.n	8007e50 <_printf_i+0x28>
 8007e40:	2f62      	cmp	r7, #98	@ 0x62
 8007e42:	d80a      	bhi.n	8007e5a <_printf_i+0x32>
 8007e44:	2f00      	cmp	r7, #0
 8007e46:	f000 80d2 	beq.w	8007fee <_printf_i+0x1c6>
 8007e4a:	2f58      	cmp	r7, #88	@ 0x58
 8007e4c:	f000 80b9 	beq.w	8007fc2 <_printf_i+0x19a>
 8007e50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007e58:	e03a      	b.n	8007ed0 <_printf_i+0xa8>
 8007e5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007e5e:	2b15      	cmp	r3, #21
 8007e60:	d8f6      	bhi.n	8007e50 <_printf_i+0x28>
 8007e62:	a101      	add	r1, pc, #4	@ (adr r1, 8007e68 <_printf_i+0x40>)
 8007e64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e68:	08007ec1 	.word	0x08007ec1
 8007e6c:	08007ed5 	.word	0x08007ed5
 8007e70:	08007e51 	.word	0x08007e51
 8007e74:	08007e51 	.word	0x08007e51
 8007e78:	08007e51 	.word	0x08007e51
 8007e7c:	08007e51 	.word	0x08007e51
 8007e80:	08007ed5 	.word	0x08007ed5
 8007e84:	08007e51 	.word	0x08007e51
 8007e88:	08007e51 	.word	0x08007e51
 8007e8c:	08007e51 	.word	0x08007e51
 8007e90:	08007e51 	.word	0x08007e51
 8007e94:	08007fd5 	.word	0x08007fd5
 8007e98:	08007eff 	.word	0x08007eff
 8007e9c:	08007f8f 	.word	0x08007f8f
 8007ea0:	08007e51 	.word	0x08007e51
 8007ea4:	08007e51 	.word	0x08007e51
 8007ea8:	08007ff7 	.word	0x08007ff7
 8007eac:	08007e51 	.word	0x08007e51
 8007eb0:	08007eff 	.word	0x08007eff
 8007eb4:	08007e51 	.word	0x08007e51
 8007eb8:	08007e51 	.word	0x08007e51
 8007ebc:	08007f97 	.word	0x08007f97
 8007ec0:	6833      	ldr	r3, [r6, #0]
 8007ec2:	1d1a      	adds	r2, r3, #4
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	6032      	str	r2, [r6, #0]
 8007ec8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ecc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	e09d      	b.n	8008010 <_printf_i+0x1e8>
 8007ed4:	6833      	ldr	r3, [r6, #0]
 8007ed6:	6820      	ldr	r0, [r4, #0]
 8007ed8:	1d19      	adds	r1, r3, #4
 8007eda:	6031      	str	r1, [r6, #0]
 8007edc:	0606      	lsls	r6, r0, #24
 8007ede:	d501      	bpl.n	8007ee4 <_printf_i+0xbc>
 8007ee0:	681d      	ldr	r5, [r3, #0]
 8007ee2:	e003      	b.n	8007eec <_printf_i+0xc4>
 8007ee4:	0645      	lsls	r5, r0, #25
 8007ee6:	d5fb      	bpl.n	8007ee0 <_printf_i+0xb8>
 8007ee8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007eec:	2d00      	cmp	r5, #0
 8007eee:	da03      	bge.n	8007ef8 <_printf_i+0xd0>
 8007ef0:	232d      	movs	r3, #45	@ 0x2d
 8007ef2:	426d      	negs	r5, r5
 8007ef4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ef8:	4859      	ldr	r0, [pc, #356]	@ (8008060 <_printf_i+0x238>)
 8007efa:	230a      	movs	r3, #10
 8007efc:	e011      	b.n	8007f22 <_printf_i+0xfa>
 8007efe:	6821      	ldr	r1, [r4, #0]
 8007f00:	6833      	ldr	r3, [r6, #0]
 8007f02:	0608      	lsls	r0, r1, #24
 8007f04:	f853 5b04 	ldr.w	r5, [r3], #4
 8007f08:	d402      	bmi.n	8007f10 <_printf_i+0xe8>
 8007f0a:	0649      	lsls	r1, r1, #25
 8007f0c:	bf48      	it	mi
 8007f0e:	b2ad      	uxthmi	r5, r5
 8007f10:	2f6f      	cmp	r7, #111	@ 0x6f
 8007f12:	4853      	ldr	r0, [pc, #332]	@ (8008060 <_printf_i+0x238>)
 8007f14:	6033      	str	r3, [r6, #0]
 8007f16:	bf14      	ite	ne
 8007f18:	230a      	movne	r3, #10
 8007f1a:	2308      	moveq	r3, #8
 8007f1c:	2100      	movs	r1, #0
 8007f1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007f22:	6866      	ldr	r6, [r4, #4]
 8007f24:	60a6      	str	r6, [r4, #8]
 8007f26:	2e00      	cmp	r6, #0
 8007f28:	bfa2      	ittt	ge
 8007f2a:	6821      	ldrge	r1, [r4, #0]
 8007f2c:	f021 0104 	bicge.w	r1, r1, #4
 8007f30:	6021      	strge	r1, [r4, #0]
 8007f32:	b90d      	cbnz	r5, 8007f38 <_printf_i+0x110>
 8007f34:	2e00      	cmp	r6, #0
 8007f36:	d04b      	beq.n	8007fd0 <_printf_i+0x1a8>
 8007f38:	4616      	mov	r6, r2
 8007f3a:	fbb5 f1f3 	udiv	r1, r5, r3
 8007f3e:	fb03 5711 	mls	r7, r3, r1, r5
 8007f42:	5dc7      	ldrb	r7, [r0, r7]
 8007f44:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007f48:	462f      	mov	r7, r5
 8007f4a:	42bb      	cmp	r3, r7
 8007f4c:	460d      	mov	r5, r1
 8007f4e:	d9f4      	bls.n	8007f3a <_printf_i+0x112>
 8007f50:	2b08      	cmp	r3, #8
 8007f52:	d10b      	bne.n	8007f6c <_printf_i+0x144>
 8007f54:	6823      	ldr	r3, [r4, #0]
 8007f56:	07df      	lsls	r7, r3, #31
 8007f58:	d508      	bpl.n	8007f6c <_printf_i+0x144>
 8007f5a:	6923      	ldr	r3, [r4, #16]
 8007f5c:	6861      	ldr	r1, [r4, #4]
 8007f5e:	4299      	cmp	r1, r3
 8007f60:	bfde      	ittt	le
 8007f62:	2330      	movle	r3, #48	@ 0x30
 8007f64:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007f68:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007f6c:	1b92      	subs	r2, r2, r6
 8007f6e:	6122      	str	r2, [r4, #16]
 8007f70:	f8cd a000 	str.w	sl, [sp]
 8007f74:	464b      	mov	r3, r9
 8007f76:	aa03      	add	r2, sp, #12
 8007f78:	4621      	mov	r1, r4
 8007f7a:	4640      	mov	r0, r8
 8007f7c:	f7ff fee6 	bl	8007d4c <_printf_common>
 8007f80:	3001      	adds	r0, #1
 8007f82:	d14a      	bne.n	800801a <_printf_i+0x1f2>
 8007f84:	f04f 30ff 	mov.w	r0, #4294967295
 8007f88:	b004      	add	sp, #16
 8007f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f8e:	6823      	ldr	r3, [r4, #0]
 8007f90:	f043 0320 	orr.w	r3, r3, #32
 8007f94:	6023      	str	r3, [r4, #0]
 8007f96:	4833      	ldr	r0, [pc, #204]	@ (8008064 <_printf_i+0x23c>)
 8007f98:	2778      	movs	r7, #120	@ 0x78
 8007f9a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007f9e:	6823      	ldr	r3, [r4, #0]
 8007fa0:	6831      	ldr	r1, [r6, #0]
 8007fa2:	061f      	lsls	r7, r3, #24
 8007fa4:	f851 5b04 	ldr.w	r5, [r1], #4
 8007fa8:	d402      	bmi.n	8007fb0 <_printf_i+0x188>
 8007faa:	065f      	lsls	r7, r3, #25
 8007fac:	bf48      	it	mi
 8007fae:	b2ad      	uxthmi	r5, r5
 8007fb0:	6031      	str	r1, [r6, #0]
 8007fb2:	07d9      	lsls	r1, r3, #31
 8007fb4:	bf44      	itt	mi
 8007fb6:	f043 0320 	orrmi.w	r3, r3, #32
 8007fba:	6023      	strmi	r3, [r4, #0]
 8007fbc:	b11d      	cbz	r5, 8007fc6 <_printf_i+0x19e>
 8007fbe:	2310      	movs	r3, #16
 8007fc0:	e7ac      	b.n	8007f1c <_printf_i+0xf4>
 8007fc2:	4827      	ldr	r0, [pc, #156]	@ (8008060 <_printf_i+0x238>)
 8007fc4:	e7e9      	b.n	8007f9a <_printf_i+0x172>
 8007fc6:	6823      	ldr	r3, [r4, #0]
 8007fc8:	f023 0320 	bic.w	r3, r3, #32
 8007fcc:	6023      	str	r3, [r4, #0]
 8007fce:	e7f6      	b.n	8007fbe <_printf_i+0x196>
 8007fd0:	4616      	mov	r6, r2
 8007fd2:	e7bd      	b.n	8007f50 <_printf_i+0x128>
 8007fd4:	6833      	ldr	r3, [r6, #0]
 8007fd6:	6825      	ldr	r5, [r4, #0]
 8007fd8:	6961      	ldr	r1, [r4, #20]
 8007fda:	1d18      	adds	r0, r3, #4
 8007fdc:	6030      	str	r0, [r6, #0]
 8007fde:	062e      	lsls	r6, r5, #24
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	d501      	bpl.n	8007fe8 <_printf_i+0x1c0>
 8007fe4:	6019      	str	r1, [r3, #0]
 8007fe6:	e002      	b.n	8007fee <_printf_i+0x1c6>
 8007fe8:	0668      	lsls	r0, r5, #25
 8007fea:	d5fb      	bpl.n	8007fe4 <_printf_i+0x1bc>
 8007fec:	8019      	strh	r1, [r3, #0]
 8007fee:	2300      	movs	r3, #0
 8007ff0:	6123      	str	r3, [r4, #16]
 8007ff2:	4616      	mov	r6, r2
 8007ff4:	e7bc      	b.n	8007f70 <_printf_i+0x148>
 8007ff6:	6833      	ldr	r3, [r6, #0]
 8007ff8:	1d1a      	adds	r2, r3, #4
 8007ffa:	6032      	str	r2, [r6, #0]
 8007ffc:	681e      	ldr	r6, [r3, #0]
 8007ffe:	6862      	ldr	r2, [r4, #4]
 8008000:	2100      	movs	r1, #0
 8008002:	4630      	mov	r0, r6
 8008004:	f7f8 f964 	bl	80002d0 <memchr>
 8008008:	b108      	cbz	r0, 800800e <_printf_i+0x1e6>
 800800a:	1b80      	subs	r0, r0, r6
 800800c:	6060      	str	r0, [r4, #4]
 800800e:	6863      	ldr	r3, [r4, #4]
 8008010:	6123      	str	r3, [r4, #16]
 8008012:	2300      	movs	r3, #0
 8008014:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008018:	e7aa      	b.n	8007f70 <_printf_i+0x148>
 800801a:	6923      	ldr	r3, [r4, #16]
 800801c:	4632      	mov	r2, r6
 800801e:	4649      	mov	r1, r9
 8008020:	4640      	mov	r0, r8
 8008022:	47d0      	blx	sl
 8008024:	3001      	adds	r0, #1
 8008026:	d0ad      	beq.n	8007f84 <_printf_i+0x15c>
 8008028:	6823      	ldr	r3, [r4, #0]
 800802a:	079b      	lsls	r3, r3, #30
 800802c:	d413      	bmi.n	8008056 <_printf_i+0x22e>
 800802e:	68e0      	ldr	r0, [r4, #12]
 8008030:	9b03      	ldr	r3, [sp, #12]
 8008032:	4298      	cmp	r0, r3
 8008034:	bfb8      	it	lt
 8008036:	4618      	movlt	r0, r3
 8008038:	e7a6      	b.n	8007f88 <_printf_i+0x160>
 800803a:	2301      	movs	r3, #1
 800803c:	4632      	mov	r2, r6
 800803e:	4649      	mov	r1, r9
 8008040:	4640      	mov	r0, r8
 8008042:	47d0      	blx	sl
 8008044:	3001      	adds	r0, #1
 8008046:	d09d      	beq.n	8007f84 <_printf_i+0x15c>
 8008048:	3501      	adds	r5, #1
 800804a:	68e3      	ldr	r3, [r4, #12]
 800804c:	9903      	ldr	r1, [sp, #12]
 800804e:	1a5b      	subs	r3, r3, r1
 8008050:	42ab      	cmp	r3, r5
 8008052:	dcf2      	bgt.n	800803a <_printf_i+0x212>
 8008054:	e7eb      	b.n	800802e <_printf_i+0x206>
 8008056:	2500      	movs	r5, #0
 8008058:	f104 0619 	add.w	r6, r4, #25
 800805c:	e7f5      	b.n	800804a <_printf_i+0x222>
 800805e:	bf00      	nop
 8008060:	0801e036 	.word	0x0801e036
 8008064:	0801e047 	.word	0x0801e047

08008068 <std>:
 8008068:	2300      	movs	r3, #0
 800806a:	b510      	push	{r4, lr}
 800806c:	4604      	mov	r4, r0
 800806e:	e9c0 3300 	strd	r3, r3, [r0]
 8008072:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008076:	6083      	str	r3, [r0, #8]
 8008078:	8181      	strh	r1, [r0, #12]
 800807a:	6643      	str	r3, [r0, #100]	@ 0x64
 800807c:	81c2      	strh	r2, [r0, #14]
 800807e:	6183      	str	r3, [r0, #24]
 8008080:	4619      	mov	r1, r3
 8008082:	2208      	movs	r2, #8
 8008084:	305c      	adds	r0, #92	@ 0x5c
 8008086:	f000 f906 	bl	8008296 <memset>
 800808a:	4b0d      	ldr	r3, [pc, #52]	@ (80080c0 <std+0x58>)
 800808c:	6263      	str	r3, [r4, #36]	@ 0x24
 800808e:	4b0d      	ldr	r3, [pc, #52]	@ (80080c4 <std+0x5c>)
 8008090:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008092:	4b0d      	ldr	r3, [pc, #52]	@ (80080c8 <std+0x60>)
 8008094:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008096:	4b0d      	ldr	r3, [pc, #52]	@ (80080cc <std+0x64>)
 8008098:	6323      	str	r3, [r4, #48]	@ 0x30
 800809a:	4b0d      	ldr	r3, [pc, #52]	@ (80080d0 <std+0x68>)
 800809c:	6224      	str	r4, [r4, #32]
 800809e:	429c      	cmp	r4, r3
 80080a0:	d006      	beq.n	80080b0 <std+0x48>
 80080a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80080a6:	4294      	cmp	r4, r2
 80080a8:	d002      	beq.n	80080b0 <std+0x48>
 80080aa:	33d0      	adds	r3, #208	@ 0xd0
 80080ac:	429c      	cmp	r4, r3
 80080ae:	d105      	bne.n	80080bc <std+0x54>
 80080b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80080b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080b8:	f000 b96a 	b.w	8008390 <__retarget_lock_init_recursive>
 80080bc:	bd10      	pop	{r4, pc}
 80080be:	bf00      	nop
 80080c0:	08008211 	.word	0x08008211
 80080c4:	08008233 	.word	0x08008233
 80080c8:	0800826b 	.word	0x0800826b
 80080cc:	0800828f 	.word	0x0800828f
 80080d0:	20002190 	.word	0x20002190

080080d4 <stdio_exit_handler>:
 80080d4:	4a02      	ldr	r2, [pc, #8]	@ (80080e0 <stdio_exit_handler+0xc>)
 80080d6:	4903      	ldr	r1, [pc, #12]	@ (80080e4 <stdio_exit_handler+0x10>)
 80080d8:	4803      	ldr	r0, [pc, #12]	@ (80080e8 <stdio_exit_handler+0x14>)
 80080da:	f000 b869 	b.w	80081b0 <_fwalk_sglue>
 80080de:	bf00      	nop
 80080e0:	2000000c 	.word	0x2000000c
 80080e4:	08009cc1 	.word	0x08009cc1
 80080e8:	2000001c 	.word	0x2000001c

080080ec <cleanup_stdio>:
 80080ec:	6841      	ldr	r1, [r0, #4]
 80080ee:	4b0c      	ldr	r3, [pc, #48]	@ (8008120 <cleanup_stdio+0x34>)
 80080f0:	4299      	cmp	r1, r3
 80080f2:	b510      	push	{r4, lr}
 80080f4:	4604      	mov	r4, r0
 80080f6:	d001      	beq.n	80080fc <cleanup_stdio+0x10>
 80080f8:	f001 fde2 	bl	8009cc0 <_fflush_r>
 80080fc:	68a1      	ldr	r1, [r4, #8]
 80080fe:	4b09      	ldr	r3, [pc, #36]	@ (8008124 <cleanup_stdio+0x38>)
 8008100:	4299      	cmp	r1, r3
 8008102:	d002      	beq.n	800810a <cleanup_stdio+0x1e>
 8008104:	4620      	mov	r0, r4
 8008106:	f001 fddb 	bl	8009cc0 <_fflush_r>
 800810a:	68e1      	ldr	r1, [r4, #12]
 800810c:	4b06      	ldr	r3, [pc, #24]	@ (8008128 <cleanup_stdio+0x3c>)
 800810e:	4299      	cmp	r1, r3
 8008110:	d004      	beq.n	800811c <cleanup_stdio+0x30>
 8008112:	4620      	mov	r0, r4
 8008114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008118:	f001 bdd2 	b.w	8009cc0 <_fflush_r>
 800811c:	bd10      	pop	{r4, pc}
 800811e:	bf00      	nop
 8008120:	20002190 	.word	0x20002190
 8008124:	200021f8 	.word	0x200021f8
 8008128:	20002260 	.word	0x20002260

0800812c <global_stdio_init.part.0>:
 800812c:	b510      	push	{r4, lr}
 800812e:	4b0b      	ldr	r3, [pc, #44]	@ (800815c <global_stdio_init.part.0+0x30>)
 8008130:	4c0b      	ldr	r4, [pc, #44]	@ (8008160 <global_stdio_init.part.0+0x34>)
 8008132:	4a0c      	ldr	r2, [pc, #48]	@ (8008164 <global_stdio_init.part.0+0x38>)
 8008134:	601a      	str	r2, [r3, #0]
 8008136:	4620      	mov	r0, r4
 8008138:	2200      	movs	r2, #0
 800813a:	2104      	movs	r1, #4
 800813c:	f7ff ff94 	bl	8008068 <std>
 8008140:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008144:	2201      	movs	r2, #1
 8008146:	2109      	movs	r1, #9
 8008148:	f7ff ff8e 	bl	8008068 <std>
 800814c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008150:	2202      	movs	r2, #2
 8008152:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008156:	2112      	movs	r1, #18
 8008158:	f7ff bf86 	b.w	8008068 <std>
 800815c:	200022c8 	.word	0x200022c8
 8008160:	20002190 	.word	0x20002190
 8008164:	080080d5 	.word	0x080080d5

08008168 <__sfp_lock_acquire>:
 8008168:	4801      	ldr	r0, [pc, #4]	@ (8008170 <__sfp_lock_acquire+0x8>)
 800816a:	f000 b912 	b.w	8008392 <__retarget_lock_acquire_recursive>
 800816e:	bf00      	nop
 8008170:	200022d1 	.word	0x200022d1

08008174 <__sfp_lock_release>:
 8008174:	4801      	ldr	r0, [pc, #4]	@ (800817c <__sfp_lock_release+0x8>)
 8008176:	f000 b90d 	b.w	8008394 <__retarget_lock_release_recursive>
 800817a:	bf00      	nop
 800817c:	200022d1 	.word	0x200022d1

08008180 <__sinit>:
 8008180:	b510      	push	{r4, lr}
 8008182:	4604      	mov	r4, r0
 8008184:	f7ff fff0 	bl	8008168 <__sfp_lock_acquire>
 8008188:	6a23      	ldr	r3, [r4, #32]
 800818a:	b11b      	cbz	r3, 8008194 <__sinit+0x14>
 800818c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008190:	f7ff bff0 	b.w	8008174 <__sfp_lock_release>
 8008194:	4b04      	ldr	r3, [pc, #16]	@ (80081a8 <__sinit+0x28>)
 8008196:	6223      	str	r3, [r4, #32]
 8008198:	4b04      	ldr	r3, [pc, #16]	@ (80081ac <__sinit+0x2c>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d1f5      	bne.n	800818c <__sinit+0xc>
 80081a0:	f7ff ffc4 	bl	800812c <global_stdio_init.part.0>
 80081a4:	e7f2      	b.n	800818c <__sinit+0xc>
 80081a6:	bf00      	nop
 80081a8:	080080ed 	.word	0x080080ed
 80081ac:	200022c8 	.word	0x200022c8

080081b0 <_fwalk_sglue>:
 80081b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081b4:	4607      	mov	r7, r0
 80081b6:	4688      	mov	r8, r1
 80081b8:	4614      	mov	r4, r2
 80081ba:	2600      	movs	r6, #0
 80081bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80081c0:	f1b9 0901 	subs.w	r9, r9, #1
 80081c4:	d505      	bpl.n	80081d2 <_fwalk_sglue+0x22>
 80081c6:	6824      	ldr	r4, [r4, #0]
 80081c8:	2c00      	cmp	r4, #0
 80081ca:	d1f7      	bne.n	80081bc <_fwalk_sglue+0xc>
 80081cc:	4630      	mov	r0, r6
 80081ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081d2:	89ab      	ldrh	r3, [r5, #12]
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d907      	bls.n	80081e8 <_fwalk_sglue+0x38>
 80081d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80081dc:	3301      	adds	r3, #1
 80081de:	d003      	beq.n	80081e8 <_fwalk_sglue+0x38>
 80081e0:	4629      	mov	r1, r5
 80081e2:	4638      	mov	r0, r7
 80081e4:	47c0      	blx	r8
 80081e6:	4306      	orrs	r6, r0
 80081e8:	3568      	adds	r5, #104	@ 0x68
 80081ea:	e7e9      	b.n	80081c0 <_fwalk_sglue+0x10>

080081ec <iprintf>:
 80081ec:	b40f      	push	{r0, r1, r2, r3}
 80081ee:	b507      	push	{r0, r1, r2, lr}
 80081f0:	4906      	ldr	r1, [pc, #24]	@ (800820c <iprintf+0x20>)
 80081f2:	ab04      	add	r3, sp, #16
 80081f4:	6808      	ldr	r0, [r1, #0]
 80081f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80081fa:	6881      	ldr	r1, [r0, #8]
 80081fc:	9301      	str	r3, [sp, #4]
 80081fe:	f001 fbc3 	bl	8009988 <_vfiprintf_r>
 8008202:	b003      	add	sp, #12
 8008204:	f85d eb04 	ldr.w	lr, [sp], #4
 8008208:	b004      	add	sp, #16
 800820a:	4770      	bx	lr
 800820c:	20000018 	.word	0x20000018

08008210 <__sread>:
 8008210:	b510      	push	{r4, lr}
 8008212:	460c      	mov	r4, r1
 8008214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008218:	f000 f86c 	bl	80082f4 <_read_r>
 800821c:	2800      	cmp	r0, #0
 800821e:	bfab      	itete	ge
 8008220:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008222:	89a3      	ldrhlt	r3, [r4, #12]
 8008224:	181b      	addge	r3, r3, r0
 8008226:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800822a:	bfac      	ite	ge
 800822c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800822e:	81a3      	strhlt	r3, [r4, #12]
 8008230:	bd10      	pop	{r4, pc}

08008232 <__swrite>:
 8008232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008236:	461f      	mov	r7, r3
 8008238:	898b      	ldrh	r3, [r1, #12]
 800823a:	05db      	lsls	r3, r3, #23
 800823c:	4605      	mov	r5, r0
 800823e:	460c      	mov	r4, r1
 8008240:	4616      	mov	r6, r2
 8008242:	d505      	bpl.n	8008250 <__swrite+0x1e>
 8008244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008248:	2302      	movs	r3, #2
 800824a:	2200      	movs	r2, #0
 800824c:	f000 f840 	bl	80082d0 <_lseek_r>
 8008250:	89a3      	ldrh	r3, [r4, #12]
 8008252:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008256:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800825a:	81a3      	strh	r3, [r4, #12]
 800825c:	4632      	mov	r2, r6
 800825e:	463b      	mov	r3, r7
 8008260:	4628      	mov	r0, r5
 8008262:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008266:	f000 b857 	b.w	8008318 <_write_r>

0800826a <__sseek>:
 800826a:	b510      	push	{r4, lr}
 800826c:	460c      	mov	r4, r1
 800826e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008272:	f000 f82d 	bl	80082d0 <_lseek_r>
 8008276:	1c43      	adds	r3, r0, #1
 8008278:	89a3      	ldrh	r3, [r4, #12]
 800827a:	bf15      	itete	ne
 800827c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800827e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008282:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008286:	81a3      	strheq	r3, [r4, #12]
 8008288:	bf18      	it	ne
 800828a:	81a3      	strhne	r3, [r4, #12]
 800828c:	bd10      	pop	{r4, pc}

0800828e <__sclose>:
 800828e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008292:	f000 b80d 	b.w	80082b0 <_close_r>

08008296 <memset>:
 8008296:	4402      	add	r2, r0
 8008298:	4603      	mov	r3, r0
 800829a:	4293      	cmp	r3, r2
 800829c:	d100      	bne.n	80082a0 <memset+0xa>
 800829e:	4770      	bx	lr
 80082a0:	f803 1b01 	strb.w	r1, [r3], #1
 80082a4:	e7f9      	b.n	800829a <memset+0x4>
	...

080082a8 <_localeconv_r>:
 80082a8:	4800      	ldr	r0, [pc, #0]	@ (80082ac <_localeconv_r+0x4>)
 80082aa:	4770      	bx	lr
 80082ac:	20000158 	.word	0x20000158

080082b0 <_close_r>:
 80082b0:	b538      	push	{r3, r4, r5, lr}
 80082b2:	4d06      	ldr	r5, [pc, #24]	@ (80082cc <_close_r+0x1c>)
 80082b4:	2300      	movs	r3, #0
 80082b6:	4604      	mov	r4, r0
 80082b8:	4608      	mov	r0, r1
 80082ba:	602b      	str	r3, [r5, #0]
 80082bc:	f7fa fc26 	bl	8002b0c <_close>
 80082c0:	1c43      	adds	r3, r0, #1
 80082c2:	d102      	bne.n	80082ca <_close_r+0x1a>
 80082c4:	682b      	ldr	r3, [r5, #0]
 80082c6:	b103      	cbz	r3, 80082ca <_close_r+0x1a>
 80082c8:	6023      	str	r3, [r4, #0]
 80082ca:	bd38      	pop	{r3, r4, r5, pc}
 80082cc:	200022cc 	.word	0x200022cc

080082d0 <_lseek_r>:
 80082d0:	b538      	push	{r3, r4, r5, lr}
 80082d2:	4d07      	ldr	r5, [pc, #28]	@ (80082f0 <_lseek_r+0x20>)
 80082d4:	4604      	mov	r4, r0
 80082d6:	4608      	mov	r0, r1
 80082d8:	4611      	mov	r1, r2
 80082da:	2200      	movs	r2, #0
 80082dc:	602a      	str	r2, [r5, #0]
 80082de:	461a      	mov	r2, r3
 80082e0:	f7fa fc3b 	bl	8002b5a <_lseek>
 80082e4:	1c43      	adds	r3, r0, #1
 80082e6:	d102      	bne.n	80082ee <_lseek_r+0x1e>
 80082e8:	682b      	ldr	r3, [r5, #0]
 80082ea:	b103      	cbz	r3, 80082ee <_lseek_r+0x1e>
 80082ec:	6023      	str	r3, [r4, #0]
 80082ee:	bd38      	pop	{r3, r4, r5, pc}
 80082f0:	200022cc 	.word	0x200022cc

080082f4 <_read_r>:
 80082f4:	b538      	push	{r3, r4, r5, lr}
 80082f6:	4d07      	ldr	r5, [pc, #28]	@ (8008314 <_read_r+0x20>)
 80082f8:	4604      	mov	r4, r0
 80082fa:	4608      	mov	r0, r1
 80082fc:	4611      	mov	r1, r2
 80082fe:	2200      	movs	r2, #0
 8008300:	602a      	str	r2, [r5, #0]
 8008302:	461a      	mov	r2, r3
 8008304:	f7fa fbe5 	bl	8002ad2 <_read>
 8008308:	1c43      	adds	r3, r0, #1
 800830a:	d102      	bne.n	8008312 <_read_r+0x1e>
 800830c:	682b      	ldr	r3, [r5, #0]
 800830e:	b103      	cbz	r3, 8008312 <_read_r+0x1e>
 8008310:	6023      	str	r3, [r4, #0]
 8008312:	bd38      	pop	{r3, r4, r5, pc}
 8008314:	200022cc 	.word	0x200022cc

08008318 <_write_r>:
 8008318:	b538      	push	{r3, r4, r5, lr}
 800831a:	4d07      	ldr	r5, [pc, #28]	@ (8008338 <_write_r+0x20>)
 800831c:	4604      	mov	r4, r0
 800831e:	4608      	mov	r0, r1
 8008320:	4611      	mov	r1, r2
 8008322:	2200      	movs	r2, #0
 8008324:	602a      	str	r2, [r5, #0]
 8008326:	461a      	mov	r2, r3
 8008328:	f7f9 f822 	bl	8001370 <_write>
 800832c:	1c43      	adds	r3, r0, #1
 800832e:	d102      	bne.n	8008336 <_write_r+0x1e>
 8008330:	682b      	ldr	r3, [r5, #0]
 8008332:	b103      	cbz	r3, 8008336 <_write_r+0x1e>
 8008334:	6023      	str	r3, [r4, #0]
 8008336:	bd38      	pop	{r3, r4, r5, pc}
 8008338:	200022cc 	.word	0x200022cc

0800833c <__errno>:
 800833c:	4b01      	ldr	r3, [pc, #4]	@ (8008344 <__errno+0x8>)
 800833e:	6818      	ldr	r0, [r3, #0]
 8008340:	4770      	bx	lr
 8008342:	bf00      	nop
 8008344:	20000018 	.word	0x20000018

08008348 <__libc_init_array>:
 8008348:	b570      	push	{r4, r5, r6, lr}
 800834a:	4d0d      	ldr	r5, [pc, #52]	@ (8008380 <__libc_init_array+0x38>)
 800834c:	4c0d      	ldr	r4, [pc, #52]	@ (8008384 <__libc_init_array+0x3c>)
 800834e:	1b64      	subs	r4, r4, r5
 8008350:	10a4      	asrs	r4, r4, #2
 8008352:	2600      	movs	r6, #0
 8008354:	42a6      	cmp	r6, r4
 8008356:	d109      	bne.n	800836c <__libc_init_array+0x24>
 8008358:	4d0b      	ldr	r5, [pc, #44]	@ (8008388 <__libc_init_array+0x40>)
 800835a:	4c0c      	ldr	r4, [pc, #48]	@ (800838c <__libc_init_array+0x44>)
 800835c:	f002 fb78 	bl	800aa50 <_init>
 8008360:	1b64      	subs	r4, r4, r5
 8008362:	10a4      	asrs	r4, r4, #2
 8008364:	2600      	movs	r6, #0
 8008366:	42a6      	cmp	r6, r4
 8008368:	d105      	bne.n	8008376 <__libc_init_array+0x2e>
 800836a:	bd70      	pop	{r4, r5, r6, pc}
 800836c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008370:	4798      	blx	r3
 8008372:	3601      	adds	r6, #1
 8008374:	e7ee      	b.n	8008354 <__libc_init_array+0xc>
 8008376:	f855 3b04 	ldr.w	r3, [r5], #4
 800837a:	4798      	blx	r3
 800837c:	3601      	adds	r6, #1
 800837e:	e7f2      	b.n	8008366 <__libc_init_array+0x1e>
 8008380:	0801e3d8 	.word	0x0801e3d8
 8008384:	0801e3d8 	.word	0x0801e3d8
 8008388:	0801e3d8 	.word	0x0801e3d8
 800838c:	0801e3dc 	.word	0x0801e3dc

08008390 <__retarget_lock_init_recursive>:
 8008390:	4770      	bx	lr

08008392 <__retarget_lock_acquire_recursive>:
 8008392:	4770      	bx	lr

08008394 <__retarget_lock_release_recursive>:
 8008394:	4770      	bx	lr

08008396 <quorem>:
 8008396:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800839a:	6903      	ldr	r3, [r0, #16]
 800839c:	690c      	ldr	r4, [r1, #16]
 800839e:	42a3      	cmp	r3, r4
 80083a0:	4607      	mov	r7, r0
 80083a2:	db7e      	blt.n	80084a2 <quorem+0x10c>
 80083a4:	3c01      	subs	r4, #1
 80083a6:	f101 0814 	add.w	r8, r1, #20
 80083aa:	00a3      	lsls	r3, r4, #2
 80083ac:	f100 0514 	add.w	r5, r0, #20
 80083b0:	9300      	str	r3, [sp, #0]
 80083b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80083b6:	9301      	str	r3, [sp, #4]
 80083b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80083bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80083c0:	3301      	adds	r3, #1
 80083c2:	429a      	cmp	r2, r3
 80083c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80083c8:	fbb2 f6f3 	udiv	r6, r2, r3
 80083cc:	d32e      	bcc.n	800842c <quorem+0x96>
 80083ce:	f04f 0a00 	mov.w	sl, #0
 80083d2:	46c4      	mov	ip, r8
 80083d4:	46ae      	mov	lr, r5
 80083d6:	46d3      	mov	fp, sl
 80083d8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80083dc:	b298      	uxth	r0, r3
 80083de:	fb06 a000 	mla	r0, r6, r0, sl
 80083e2:	0c02      	lsrs	r2, r0, #16
 80083e4:	0c1b      	lsrs	r3, r3, #16
 80083e6:	fb06 2303 	mla	r3, r6, r3, r2
 80083ea:	f8de 2000 	ldr.w	r2, [lr]
 80083ee:	b280      	uxth	r0, r0
 80083f0:	b292      	uxth	r2, r2
 80083f2:	1a12      	subs	r2, r2, r0
 80083f4:	445a      	add	r2, fp
 80083f6:	f8de 0000 	ldr.w	r0, [lr]
 80083fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80083fe:	b29b      	uxth	r3, r3
 8008400:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008404:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008408:	b292      	uxth	r2, r2
 800840a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800840e:	45e1      	cmp	r9, ip
 8008410:	f84e 2b04 	str.w	r2, [lr], #4
 8008414:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008418:	d2de      	bcs.n	80083d8 <quorem+0x42>
 800841a:	9b00      	ldr	r3, [sp, #0]
 800841c:	58eb      	ldr	r3, [r5, r3]
 800841e:	b92b      	cbnz	r3, 800842c <quorem+0x96>
 8008420:	9b01      	ldr	r3, [sp, #4]
 8008422:	3b04      	subs	r3, #4
 8008424:	429d      	cmp	r5, r3
 8008426:	461a      	mov	r2, r3
 8008428:	d32f      	bcc.n	800848a <quorem+0xf4>
 800842a:	613c      	str	r4, [r7, #16]
 800842c:	4638      	mov	r0, r7
 800842e:	f001 f979 	bl	8009724 <__mcmp>
 8008432:	2800      	cmp	r0, #0
 8008434:	db25      	blt.n	8008482 <quorem+0xec>
 8008436:	4629      	mov	r1, r5
 8008438:	2000      	movs	r0, #0
 800843a:	f858 2b04 	ldr.w	r2, [r8], #4
 800843e:	f8d1 c000 	ldr.w	ip, [r1]
 8008442:	fa1f fe82 	uxth.w	lr, r2
 8008446:	fa1f f38c 	uxth.w	r3, ip
 800844a:	eba3 030e 	sub.w	r3, r3, lr
 800844e:	4403      	add	r3, r0
 8008450:	0c12      	lsrs	r2, r2, #16
 8008452:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008456:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800845a:	b29b      	uxth	r3, r3
 800845c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008460:	45c1      	cmp	r9, r8
 8008462:	f841 3b04 	str.w	r3, [r1], #4
 8008466:	ea4f 4022 	mov.w	r0, r2, asr #16
 800846a:	d2e6      	bcs.n	800843a <quorem+0xa4>
 800846c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008470:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008474:	b922      	cbnz	r2, 8008480 <quorem+0xea>
 8008476:	3b04      	subs	r3, #4
 8008478:	429d      	cmp	r5, r3
 800847a:	461a      	mov	r2, r3
 800847c:	d30b      	bcc.n	8008496 <quorem+0x100>
 800847e:	613c      	str	r4, [r7, #16]
 8008480:	3601      	adds	r6, #1
 8008482:	4630      	mov	r0, r6
 8008484:	b003      	add	sp, #12
 8008486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800848a:	6812      	ldr	r2, [r2, #0]
 800848c:	3b04      	subs	r3, #4
 800848e:	2a00      	cmp	r2, #0
 8008490:	d1cb      	bne.n	800842a <quorem+0x94>
 8008492:	3c01      	subs	r4, #1
 8008494:	e7c6      	b.n	8008424 <quorem+0x8e>
 8008496:	6812      	ldr	r2, [r2, #0]
 8008498:	3b04      	subs	r3, #4
 800849a:	2a00      	cmp	r2, #0
 800849c:	d1ef      	bne.n	800847e <quorem+0xe8>
 800849e:	3c01      	subs	r4, #1
 80084a0:	e7ea      	b.n	8008478 <quorem+0xe2>
 80084a2:	2000      	movs	r0, #0
 80084a4:	e7ee      	b.n	8008484 <quorem+0xee>
	...

080084a8 <_dtoa_r>:
 80084a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ac:	69c7      	ldr	r7, [r0, #28]
 80084ae:	b099      	sub	sp, #100	@ 0x64
 80084b0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80084b4:	ec55 4b10 	vmov	r4, r5, d0
 80084b8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80084ba:	9109      	str	r1, [sp, #36]	@ 0x24
 80084bc:	4683      	mov	fp, r0
 80084be:	920e      	str	r2, [sp, #56]	@ 0x38
 80084c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80084c2:	b97f      	cbnz	r7, 80084e4 <_dtoa_r+0x3c>
 80084c4:	2010      	movs	r0, #16
 80084c6:	f000 fdfd 	bl	80090c4 <malloc>
 80084ca:	4602      	mov	r2, r0
 80084cc:	f8cb 001c 	str.w	r0, [fp, #28]
 80084d0:	b920      	cbnz	r0, 80084dc <_dtoa_r+0x34>
 80084d2:	4ba7      	ldr	r3, [pc, #668]	@ (8008770 <_dtoa_r+0x2c8>)
 80084d4:	21ef      	movs	r1, #239	@ 0xef
 80084d6:	48a7      	ldr	r0, [pc, #668]	@ (8008774 <_dtoa_r+0x2cc>)
 80084d8:	f001 fccc 	bl	8009e74 <__assert_func>
 80084dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80084e0:	6007      	str	r7, [r0, #0]
 80084e2:	60c7      	str	r7, [r0, #12]
 80084e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80084e8:	6819      	ldr	r1, [r3, #0]
 80084ea:	b159      	cbz	r1, 8008504 <_dtoa_r+0x5c>
 80084ec:	685a      	ldr	r2, [r3, #4]
 80084ee:	604a      	str	r2, [r1, #4]
 80084f0:	2301      	movs	r3, #1
 80084f2:	4093      	lsls	r3, r2
 80084f4:	608b      	str	r3, [r1, #8]
 80084f6:	4658      	mov	r0, fp
 80084f8:	f000 feda 	bl	80092b0 <_Bfree>
 80084fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008500:	2200      	movs	r2, #0
 8008502:	601a      	str	r2, [r3, #0]
 8008504:	1e2b      	subs	r3, r5, #0
 8008506:	bfb9      	ittee	lt
 8008508:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800850c:	9303      	strlt	r3, [sp, #12]
 800850e:	2300      	movge	r3, #0
 8008510:	6033      	strge	r3, [r6, #0]
 8008512:	9f03      	ldr	r7, [sp, #12]
 8008514:	4b98      	ldr	r3, [pc, #608]	@ (8008778 <_dtoa_r+0x2d0>)
 8008516:	bfbc      	itt	lt
 8008518:	2201      	movlt	r2, #1
 800851a:	6032      	strlt	r2, [r6, #0]
 800851c:	43bb      	bics	r3, r7
 800851e:	d112      	bne.n	8008546 <_dtoa_r+0x9e>
 8008520:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008522:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008526:	6013      	str	r3, [r2, #0]
 8008528:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800852c:	4323      	orrs	r3, r4
 800852e:	f000 854d 	beq.w	8008fcc <_dtoa_r+0xb24>
 8008532:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008534:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800878c <_dtoa_r+0x2e4>
 8008538:	2b00      	cmp	r3, #0
 800853a:	f000 854f 	beq.w	8008fdc <_dtoa_r+0xb34>
 800853e:	f10a 0303 	add.w	r3, sl, #3
 8008542:	f000 bd49 	b.w	8008fd8 <_dtoa_r+0xb30>
 8008546:	ed9d 7b02 	vldr	d7, [sp, #8]
 800854a:	2200      	movs	r2, #0
 800854c:	ec51 0b17 	vmov	r0, r1, d7
 8008550:	2300      	movs	r3, #0
 8008552:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008556:	f7f8 fb37 	bl	8000bc8 <__aeabi_dcmpeq>
 800855a:	4680      	mov	r8, r0
 800855c:	b158      	cbz	r0, 8008576 <_dtoa_r+0xce>
 800855e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008560:	2301      	movs	r3, #1
 8008562:	6013      	str	r3, [r2, #0]
 8008564:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008566:	b113      	cbz	r3, 800856e <_dtoa_r+0xc6>
 8008568:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800856a:	4b84      	ldr	r3, [pc, #528]	@ (800877c <_dtoa_r+0x2d4>)
 800856c:	6013      	str	r3, [r2, #0]
 800856e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008790 <_dtoa_r+0x2e8>
 8008572:	f000 bd33 	b.w	8008fdc <_dtoa_r+0xb34>
 8008576:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800857a:	aa16      	add	r2, sp, #88	@ 0x58
 800857c:	a917      	add	r1, sp, #92	@ 0x5c
 800857e:	4658      	mov	r0, fp
 8008580:	f001 f980 	bl	8009884 <__d2b>
 8008584:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008588:	4681      	mov	r9, r0
 800858a:	2e00      	cmp	r6, #0
 800858c:	d077      	beq.n	800867e <_dtoa_r+0x1d6>
 800858e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008590:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008594:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008598:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800859c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80085a0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80085a4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80085a8:	4619      	mov	r1, r3
 80085aa:	2200      	movs	r2, #0
 80085ac:	4b74      	ldr	r3, [pc, #464]	@ (8008780 <_dtoa_r+0x2d8>)
 80085ae:	f7f7 feeb 	bl	8000388 <__aeabi_dsub>
 80085b2:	a369      	add	r3, pc, #420	@ (adr r3, 8008758 <_dtoa_r+0x2b0>)
 80085b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b8:	f7f8 f89e 	bl	80006f8 <__aeabi_dmul>
 80085bc:	a368      	add	r3, pc, #416	@ (adr r3, 8008760 <_dtoa_r+0x2b8>)
 80085be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c2:	f7f7 fee3 	bl	800038c <__adddf3>
 80085c6:	4604      	mov	r4, r0
 80085c8:	4630      	mov	r0, r6
 80085ca:	460d      	mov	r5, r1
 80085cc:	f7f8 f82a 	bl	8000624 <__aeabi_i2d>
 80085d0:	a365      	add	r3, pc, #404	@ (adr r3, 8008768 <_dtoa_r+0x2c0>)
 80085d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d6:	f7f8 f88f 	bl	80006f8 <__aeabi_dmul>
 80085da:	4602      	mov	r2, r0
 80085dc:	460b      	mov	r3, r1
 80085de:	4620      	mov	r0, r4
 80085e0:	4629      	mov	r1, r5
 80085e2:	f7f7 fed3 	bl	800038c <__adddf3>
 80085e6:	4604      	mov	r4, r0
 80085e8:	460d      	mov	r5, r1
 80085ea:	f7f8 fb35 	bl	8000c58 <__aeabi_d2iz>
 80085ee:	2200      	movs	r2, #0
 80085f0:	4607      	mov	r7, r0
 80085f2:	2300      	movs	r3, #0
 80085f4:	4620      	mov	r0, r4
 80085f6:	4629      	mov	r1, r5
 80085f8:	f7f8 faf0 	bl	8000bdc <__aeabi_dcmplt>
 80085fc:	b140      	cbz	r0, 8008610 <_dtoa_r+0x168>
 80085fe:	4638      	mov	r0, r7
 8008600:	f7f8 f810 	bl	8000624 <__aeabi_i2d>
 8008604:	4622      	mov	r2, r4
 8008606:	462b      	mov	r3, r5
 8008608:	f7f8 fade 	bl	8000bc8 <__aeabi_dcmpeq>
 800860c:	b900      	cbnz	r0, 8008610 <_dtoa_r+0x168>
 800860e:	3f01      	subs	r7, #1
 8008610:	2f16      	cmp	r7, #22
 8008612:	d851      	bhi.n	80086b8 <_dtoa_r+0x210>
 8008614:	4b5b      	ldr	r3, [pc, #364]	@ (8008784 <_dtoa_r+0x2dc>)
 8008616:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800861a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800861e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008622:	f7f8 fadb 	bl	8000bdc <__aeabi_dcmplt>
 8008626:	2800      	cmp	r0, #0
 8008628:	d048      	beq.n	80086bc <_dtoa_r+0x214>
 800862a:	3f01      	subs	r7, #1
 800862c:	2300      	movs	r3, #0
 800862e:	9312      	str	r3, [sp, #72]	@ 0x48
 8008630:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008632:	1b9b      	subs	r3, r3, r6
 8008634:	1e5a      	subs	r2, r3, #1
 8008636:	bf44      	itt	mi
 8008638:	f1c3 0801 	rsbmi	r8, r3, #1
 800863c:	2300      	movmi	r3, #0
 800863e:	9208      	str	r2, [sp, #32]
 8008640:	bf54      	ite	pl
 8008642:	f04f 0800 	movpl.w	r8, #0
 8008646:	9308      	strmi	r3, [sp, #32]
 8008648:	2f00      	cmp	r7, #0
 800864a:	db39      	blt.n	80086c0 <_dtoa_r+0x218>
 800864c:	9b08      	ldr	r3, [sp, #32]
 800864e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008650:	443b      	add	r3, r7
 8008652:	9308      	str	r3, [sp, #32]
 8008654:	2300      	movs	r3, #0
 8008656:	930a      	str	r3, [sp, #40]	@ 0x28
 8008658:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800865a:	2b09      	cmp	r3, #9
 800865c:	d864      	bhi.n	8008728 <_dtoa_r+0x280>
 800865e:	2b05      	cmp	r3, #5
 8008660:	bfc4      	itt	gt
 8008662:	3b04      	subgt	r3, #4
 8008664:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008666:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008668:	f1a3 0302 	sub.w	r3, r3, #2
 800866c:	bfcc      	ite	gt
 800866e:	2400      	movgt	r4, #0
 8008670:	2401      	movle	r4, #1
 8008672:	2b03      	cmp	r3, #3
 8008674:	d863      	bhi.n	800873e <_dtoa_r+0x296>
 8008676:	e8df f003 	tbb	[pc, r3]
 800867a:	372a      	.short	0x372a
 800867c:	5535      	.short	0x5535
 800867e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008682:	441e      	add	r6, r3
 8008684:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008688:	2b20      	cmp	r3, #32
 800868a:	bfc1      	itttt	gt
 800868c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008690:	409f      	lslgt	r7, r3
 8008692:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008696:	fa24 f303 	lsrgt.w	r3, r4, r3
 800869a:	bfd6      	itet	le
 800869c:	f1c3 0320 	rsble	r3, r3, #32
 80086a0:	ea47 0003 	orrgt.w	r0, r7, r3
 80086a4:	fa04 f003 	lslle.w	r0, r4, r3
 80086a8:	f7f7 ffac 	bl	8000604 <__aeabi_ui2d>
 80086ac:	2201      	movs	r2, #1
 80086ae:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80086b2:	3e01      	subs	r6, #1
 80086b4:	9214      	str	r2, [sp, #80]	@ 0x50
 80086b6:	e777      	b.n	80085a8 <_dtoa_r+0x100>
 80086b8:	2301      	movs	r3, #1
 80086ba:	e7b8      	b.n	800862e <_dtoa_r+0x186>
 80086bc:	9012      	str	r0, [sp, #72]	@ 0x48
 80086be:	e7b7      	b.n	8008630 <_dtoa_r+0x188>
 80086c0:	427b      	negs	r3, r7
 80086c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80086c4:	2300      	movs	r3, #0
 80086c6:	eba8 0807 	sub.w	r8, r8, r7
 80086ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 80086cc:	e7c4      	b.n	8008658 <_dtoa_r+0x1b0>
 80086ce:	2300      	movs	r3, #0
 80086d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80086d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	dc35      	bgt.n	8008744 <_dtoa_r+0x29c>
 80086d8:	2301      	movs	r3, #1
 80086da:	9300      	str	r3, [sp, #0]
 80086dc:	9307      	str	r3, [sp, #28]
 80086de:	461a      	mov	r2, r3
 80086e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80086e2:	e00b      	b.n	80086fc <_dtoa_r+0x254>
 80086e4:	2301      	movs	r3, #1
 80086e6:	e7f3      	b.n	80086d0 <_dtoa_r+0x228>
 80086e8:	2300      	movs	r3, #0
 80086ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80086ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80086ee:	18fb      	adds	r3, r7, r3
 80086f0:	9300      	str	r3, [sp, #0]
 80086f2:	3301      	adds	r3, #1
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	9307      	str	r3, [sp, #28]
 80086f8:	bfb8      	it	lt
 80086fa:	2301      	movlt	r3, #1
 80086fc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008700:	2100      	movs	r1, #0
 8008702:	2204      	movs	r2, #4
 8008704:	f102 0514 	add.w	r5, r2, #20
 8008708:	429d      	cmp	r5, r3
 800870a:	d91f      	bls.n	800874c <_dtoa_r+0x2a4>
 800870c:	6041      	str	r1, [r0, #4]
 800870e:	4658      	mov	r0, fp
 8008710:	f000 fd8e 	bl	8009230 <_Balloc>
 8008714:	4682      	mov	sl, r0
 8008716:	2800      	cmp	r0, #0
 8008718:	d13c      	bne.n	8008794 <_dtoa_r+0x2ec>
 800871a:	4b1b      	ldr	r3, [pc, #108]	@ (8008788 <_dtoa_r+0x2e0>)
 800871c:	4602      	mov	r2, r0
 800871e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008722:	e6d8      	b.n	80084d6 <_dtoa_r+0x2e>
 8008724:	2301      	movs	r3, #1
 8008726:	e7e0      	b.n	80086ea <_dtoa_r+0x242>
 8008728:	2401      	movs	r4, #1
 800872a:	2300      	movs	r3, #0
 800872c:	9309      	str	r3, [sp, #36]	@ 0x24
 800872e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008730:	f04f 33ff 	mov.w	r3, #4294967295
 8008734:	9300      	str	r3, [sp, #0]
 8008736:	9307      	str	r3, [sp, #28]
 8008738:	2200      	movs	r2, #0
 800873a:	2312      	movs	r3, #18
 800873c:	e7d0      	b.n	80086e0 <_dtoa_r+0x238>
 800873e:	2301      	movs	r3, #1
 8008740:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008742:	e7f5      	b.n	8008730 <_dtoa_r+0x288>
 8008744:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008746:	9300      	str	r3, [sp, #0]
 8008748:	9307      	str	r3, [sp, #28]
 800874a:	e7d7      	b.n	80086fc <_dtoa_r+0x254>
 800874c:	3101      	adds	r1, #1
 800874e:	0052      	lsls	r2, r2, #1
 8008750:	e7d8      	b.n	8008704 <_dtoa_r+0x25c>
 8008752:	bf00      	nop
 8008754:	f3af 8000 	nop.w
 8008758:	636f4361 	.word	0x636f4361
 800875c:	3fd287a7 	.word	0x3fd287a7
 8008760:	8b60c8b3 	.word	0x8b60c8b3
 8008764:	3fc68a28 	.word	0x3fc68a28
 8008768:	509f79fb 	.word	0x509f79fb
 800876c:	3fd34413 	.word	0x3fd34413
 8008770:	0801e065 	.word	0x0801e065
 8008774:	0801e07c 	.word	0x0801e07c
 8008778:	7ff00000 	.word	0x7ff00000
 800877c:	0801e035 	.word	0x0801e035
 8008780:	3ff80000 	.word	0x3ff80000
 8008784:	0801e178 	.word	0x0801e178
 8008788:	0801e0d4 	.word	0x0801e0d4
 800878c:	0801e061 	.word	0x0801e061
 8008790:	0801e034 	.word	0x0801e034
 8008794:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008798:	6018      	str	r0, [r3, #0]
 800879a:	9b07      	ldr	r3, [sp, #28]
 800879c:	2b0e      	cmp	r3, #14
 800879e:	f200 80a4 	bhi.w	80088ea <_dtoa_r+0x442>
 80087a2:	2c00      	cmp	r4, #0
 80087a4:	f000 80a1 	beq.w	80088ea <_dtoa_r+0x442>
 80087a8:	2f00      	cmp	r7, #0
 80087aa:	dd33      	ble.n	8008814 <_dtoa_r+0x36c>
 80087ac:	4bad      	ldr	r3, [pc, #692]	@ (8008a64 <_dtoa_r+0x5bc>)
 80087ae:	f007 020f 	and.w	r2, r7, #15
 80087b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087b6:	ed93 7b00 	vldr	d7, [r3]
 80087ba:	05f8      	lsls	r0, r7, #23
 80087bc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80087c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80087c4:	d516      	bpl.n	80087f4 <_dtoa_r+0x34c>
 80087c6:	4ba8      	ldr	r3, [pc, #672]	@ (8008a68 <_dtoa_r+0x5c0>)
 80087c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80087cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80087d0:	f7f8 f8bc 	bl	800094c <__aeabi_ddiv>
 80087d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087d8:	f004 040f 	and.w	r4, r4, #15
 80087dc:	2603      	movs	r6, #3
 80087de:	4da2      	ldr	r5, [pc, #648]	@ (8008a68 <_dtoa_r+0x5c0>)
 80087e0:	b954      	cbnz	r4, 80087f8 <_dtoa_r+0x350>
 80087e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087ea:	f7f8 f8af 	bl	800094c <__aeabi_ddiv>
 80087ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087f2:	e028      	b.n	8008846 <_dtoa_r+0x39e>
 80087f4:	2602      	movs	r6, #2
 80087f6:	e7f2      	b.n	80087de <_dtoa_r+0x336>
 80087f8:	07e1      	lsls	r1, r4, #31
 80087fa:	d508      	bpl.n	800880e <_dtoa_r+0x366>
 80087fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008800:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008804:	f7f7 ff78 	bl	80006f8 <__aeabi_dmul>
 8008808:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800880c:	3601      	adds	r6, #1
 800880e:	1064      	asrs	r4, r4, #1
 8008810:	3508      	adds	r5, #8
 8008812:	e7e5      	b.n	80087e0 <_dtoa_r+0x338>
 8008814:	f000 80d2 	beq.w	80089bc <_dtoa_r+0x514>
 8008818:	427c      	negs	r4, r7
 800881a:	4b92      	ldr	r3, [pc, #584]	@ (8008a64 <_dtoa_r+0x5bc>)
 800881c:	4d92      	ldr	r5, [pc, #584]	@ (8008a68 <_dtoa_r+0x5c0>)
 800881e:	f004 020f 	and.w	r2, r4, #15
 8008822:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800882a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800882e:	f7f7 ff63 	bl	80006f8 <__aeabi_dmul>
 8008832:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008836:	1124      	asrs	r4, r4, #4
 8008838:	2300      	movs	r3, #0
 800883a:	2602      	movs	r6, #2
 800883c:	2c00      	cmp	r4, #0
 800883e:	f040 80b2 	bne.w	80089a6 <_dtoa_r+0x4fe>
 8008842:	2b00      	cmp	r3, #0
 8008844:	d1d3      	bne.n	80087ee <_dtoa_r+0x346>
 8008846:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008848:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800884c:	2b00      	cmp	r3, #0
 800884e:	f000 80b7 	beq.w	80089c0 <_dtoa_r+0x518>
 8008852:	4b86      	ldr	r3, [pc, #536]	@ (8008a6c <_dtoa_r+0x5c4>)
 8008854:	2200      	movs	r2, #0
 8008856:	4620      	mov	r0, r4
 8008858:	4629      	mov	r1, r5
 800885a:	f7f8 f9bf 	bl	8000bdc <__aeabi_dcmplt>
 800885e:	2800      	cmp	r0, #0
 8008860:	f000 80ae 	beq.w	80089c0 <_dtoa_r+0x518>
 8008864:	9b07      	ldr	r3, [sp, #28]
 8008866:	2b00      	cmp	r3, #0
 8008868:	f000 80aa 	beq.w	80089c0 <_dtoa_r+0x518>
 800886c:	9b00      	ldr	r3, [sp, #0]
 800886e:	2b00      	cmp	r3, #0
 8008870:	dd37      	ble.n	80088e2 <_dtoa_r+0x43a>
 8008872:	1e7b      	subs	r3, r7, #1
 8008874:	9304      	str	r3, [sp, #16]
 8008876:	4620      	mov	r0, r4
 8008878:	4b7d      	ldr	r3, [pc, #500]	@ (8008a70 <_dtoa_r+0x5c8>)
 800887a:	2200      	movs	r2, #0
 800887c:	4629      	mov	r1, r5
 800887e:	f7f7 ff3b 	bl	80006f8 <__aeabi_dmul>
 8008882:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008886:	9c00      	ldr	r4, [sp, #0]
 8008888:	3601      	adds	r6, #1
 800888a:	4630      	mov	r0, r6
 800888c:	f7f7 feca 	bl	8000624 <__aeabi_i2d>
 8008890:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008894:	f7f7 ff30 	bl	80006f8 <__aeabi_dmul>
 8008898:	4b76      	ldr	r3, [pc, #472]	@ (8008a74 <_dtoa_r+0x5cc>)
 800889a:	2200      	movs	r2, #0
 800889c:	f7f7 fd76 	bl	800038c <__adddf3>
 80088a0:	4605      	mov	r5, r0
 80088a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80088a6:	2c00      	cmp	r4, #0
 80088a8:	f040 808d 	bne.w	80089c6 <_dtoa_r+0x51e>
 80088ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088b0:	4b71      	ldr	r3, [pc, #452]	@ (8008a78 <_dtoa_r+0x5d0>)
 80088b2:	2200      	movs	r2, #0
 80088b4:	f7f7 fd68 	bl	8000388 <__aeabi_dsub>
 80088b8:	4602      	mov	r2, r0
 80088ba:	460b      	mov	r3, r1
 80088bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80088c0:	462a      	mov	r2, r5
 80088c2:	4633      	mov	r3, r6
 80088c4:	f7f8 f9a8 	bl	8000c18 <__aeabi_dcmpgt>
 80088c8:	2800      	cmp	r0, #0
 80088ca:	f040 828b 	bne.w	8008de4 <_dtoa_r+0x93c>
 80088ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088d2:	462a      	mov	r2, r5
 80088d4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80088d8:	f7f8 f980 	bl	8000bdc <__aeabi_dcmplt>
 80088dc:	2800      	cmp	r0, #0
 80088de:	f040 8128 	bne.w	8008b32 <_dtoa_r+0x68a>
 80088e2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80088e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80088ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	f2c0 815a 	blt.w	8008ba6 <_dtoa_r+0x6fe>
 80088f2:	2f0e      	cmp	r7, #14
 80088f4:	f300 8157 	bgt.w	8008ba6 <_dtoa_r+0x6fe>
 80088f8:	4b5a      	ldr	r3, [pc, #360]	@ (8008a64 <_dtoa_r+0x5bc>)
 80088fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80088fe:	ed93 7b00 	vldr	d7, [r3]
 8008902:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008904:	2b00      	cmp	r3, #0
 8008906:	ed8d 7b00 	vstr	d7, [sp]
 800890a:	da03      	bge.n	8008914 <_dtoa_r+0x46c>
 800890c:	9b07      	ldr	r3, [sp, #28]
 800890e:	2b00      	cmp	r3, #0
 8008910:	f340 8101 	ble.w	8008b16 <_dtoa_r+0x66e>
 8008914:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008918:	4656      	mov	r6, sl
 800891a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800891e:	4620      	mov	r0, r4
 8008920:	4629      	mov	r1, r5
 8008922:	f7f8 f813 	bl	800094c <__aeabi_ddiv>
 8008926:	f7f8 f997 	bl	8000c58 <__aeabi_d2iz>
 800892a:	4680      	mov	r8, r0
 800892c:	f7f7 fe7a 	bl	8000624 <__aeabi_i2d>
 8008930:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008934:	f7f7 fee0 	bl	80006f8 <__aeabi_dmul>
 8008938:	4602      	mov	r2, r0
 800893a:	460b      	mov	r3, r1
 800893c:	4620      	mov	r0, r4
 800893e:	4629      	mov	r1, r5
 8008940:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008944:	f7f7 fd20 	bl	8000388 <__aeabi_dsub>
 8008948:	f806 4b01 	strb.w	r4, [r6], #1
 800894c:	9d07      	ldr	r5, [sp, #28]
 800894e:	eba6 040a 	sub.w	r4, r6, sl
 8008952:	42a5      	cmp	r5, r4
 8008954:	4602      	mov	r2, r0
 8008956:	460b      	mov	r3, r1
 8008958:	f040 8117 	bne.w	8008b8a <_dtoa_r+0x6e2>
 800895c:	f7f7 fd16 	bl	800038c <__adddf3>
 8008960:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008964:	4604      	mov	r4, r0
 8008966:	460d      	mov	r5, r1
 8008968:	f7f8 f956 	bl	8000c18 <__aeabi_dcmpgt>
 800896c:	2800      	cmp	r0, #0
 800896e:	f040 80f9 	bne.w	8008b64 <_dtoa_r+0x6bc>
 8008972:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008976:	4620      	mov	r0, r4
 8008978:	4629      	mov	r1, r5
 800897a:	f7f8 f925 	bl	8000bc8 <__aeabi_dcmpeq>
 800897e:	b118      	cbz	r0, 8008988 <_dtoa_r+0x4e0>
 8008980:	f018 0f01 	tst.w	r8, #1
 8008984:	f040 80ee 	bne.w	8008b64 <_dtoa_r+0x6bc>
 8008988:	4649      	mov	r1, r9
 800898a:	4658      	mov	r0, fp
 800898c:	f000 fc90 	bl	80092b0 <_Bfree>
 8008990:	2300      	movs	r3, #0
 8008992:	7033      	strb	r3, [r6, #0]
 8008994:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008996:	3701      	adds	r7, #1
 8008998:	601f      	str	r7, [r3, #0]
 800899a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800899c:	2b00      	cmp	r3, #0
 800899e:	f000 831d 	beq.w	8008fdc <_dtoa_r+0xb34>
 80089a2:	601e      	str	r6, [r3, #0]
 80089a4:	e31a      	b.n	8008fdc <_dtoa_r+0xb34>
 80089a6:	07e2      	lsls	r2, r4, #31
 80089a8:	d505      	bpl.n	80089b6 <_dtoa_r+0x50e>
 80089aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80089ae:	f7f7 fea3 	bl	80006f8 <__aeabi_dmul>
 80089b2:	3601      	adds	r6, #1
 80089b4:	2301      	movs	r3, #1
 80089b6:	1064      	asrs	r4, r4, #1
 80089b8:	3508      	adds	r5, #8
 80089ba:	e73f      	b.n	800883c <_dtoa_r+0x394>
 80089bc:	2602      	movs	r6, #2
 80089be:	e742      	b.n	8008846 <_dtoa_r+0x39e>
 80089c0:	9c07      	ldr	r4, [sp, #28]
 80089c2:	9704      	str	r7, [sp, #16]
 80089c4:	e761      	b.n	800888a <_dtoa_r+0x3e2>
 80089c6:	4b27      	ldr	r3, [pc, #156]	@ (8008a64 <_dtoa_r+0x5bc>)
 80089c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80089ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80089ce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80089d2:	4454      	add	r4, sl
 80089d4:	2900      	cmp	r1, #0
 80089d6:	d053      	beq.n	8008a80 <_dtoa_r+0x5d8>
 80089d8:	4928      	ldr	r1, [pc, #160]	@ (8008a7c <_dtoa_r+0x5d4>)
 80089da:	2000      	movs	r0, #0
 80089dc:	f7f7 ffb6 	bl	800094c <__aeabi_ddiv>
 80089e0:	4633      	mov	r3, r6
 80089e2:	462a      	mov	r2, r5
 80089e4:	f7f7 fcd0 	bl	8000388 <__aeabi_dsub>
 80089e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80089ec:	4656      	mov	r6, sl
 80089ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089f2:	f7f8 f931 	bl	8000c58 <__aeabi_d2iz>
 80089f6:	4605      	mov	r5, r0
 80089f8:	f7f7 fe14 	bl	8000624 <__aeabi_i2d>
 80089fc:	4602      	mov	r2, r0
 80089fe:	460b      	mov	r3, r1
 8008a00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a04:	f7f7 fcc0 	bl	8000388 <__aeabi_dsub>
 8008a08:	3530      	adds	r5, #48	@ 0x30
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008a12:	f806 5b01 	strb.w	r5, [r6], #1
 8008a16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008a1a:	f7f8 f8df 	bl	8000bdc <__aeabi_dcmplt>
 8008a1e:	2800      	cmp	r0, #0
 8008a20:	d171      	bne.n	8008b06 <_dtoa_r+0x65e>
 8008a22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a26:	4911      	ldr	r1, [pc, #68]	@ (8008a6c <_dtoa_r+0x5c4>)
 8008a28:	2000      	movs	r0, #0
 8008a2a:	f7f7 fcad 	bl	8000388 <__aeabi_dsub>
 8008a2e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008a32:	f7f8 f8d3 	bl	8000bdc <__aeabi_dcmplt>
 8008a36:	2800      	cmp	r0, #0
 8008a38:	f040 8095 	bne.w	8008b66 <_dtoa_r+0x6be>
 8008a3c:	42a6      	cmp	r6, r4
 8008a3e:	f43f af50 	beq.w	80088e2 <_dtoa_r+0x43a>
 8008a42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008a46:	4b0a      	ldr	r3, [pc, #40]	@ (8008a70 <_dtoa_r+0x5c8>)
 8008a48:	2200      	movs	r2, #0
 8008a4a:	f7f7 fe55 	bl	80006f8 <__aeabi_dmul>
 8008a4e:	4b08      	ldr	r3, [pc, #32]	@ (8008a70 <_dtoa_r+0x5c8>)
 8008a50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008a54:	2200      	movs	r2, #0
 8008a56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a5a:	f7f7 fe4d 	bl	80006f8 <__aeabi_dmul>
 8008a5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a62:	e7c4      	b.n	80089ee <_dtoa_r+0x546>
 8008a64:	0801e178 	.word	0x0801e178
 8008a68:	0801e150 	.word	0x0801e150
 8008a6c:	3ff00000 	.word	0x3ff00000
 8008a70:	40240000 	.word	0x40240000
 8008a74:	401c0000 	.word	0x401c0000
 8008a78:	40140000 	.word	0x40140000
 8008a7c:	3fe00000 	.word	0x3fe00000
 8008a80:	4631      	mov	r1, r6
 8008a82:	4628      	mov	r0, r5
 8008a84:	f7f7 fe38 	bl	80006f8 <__aeabi_dmul>
 8008a88:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008a8c:	9415      	str	r4, [sp, #84]	@ 0x54
 8008a8e:	4656      	mov	r6, sl
 8008a90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a94:	f7f8 f8e0 	bl	8000c58 <__aeabi_d2iz>
 8008a98:	4605      	mov	r5, r0
 8008a9a:	f7f7 fdc3 	bl	8000624 <__aeabi_i2d>
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008aa6:	f7f7 fc6f 	bl	8000388 <__aeabi_dsub>
 8008aaa:	3530      	adds	r5, #48	@ 0x30
 8008aac:	f806 5b01 	strb.w	r5, [r6], #1
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	460b      	mov	r3, r1
 8008ab4:	42a6      	cmp	r6, r4
 8008ab6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008aba:	f04f 0200 	mov.w	r2, #0
 8008abe:	d124      	bne.n	8008b0a <_dtoa_r+0x662>
 8008ac0:	4bac      	ldr	r3, [pc, #688]	@ (8008d74 <_dtoa_r+0x8cc>)
 8008ac2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008ac6:	f7f7 fc61 	bl	800038c <__adddf3>
 8008aca:	4602      	mov	r2, r0
 8008acc:	460b      	mov	r3, r1
 8008ace:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ad2:	f7f8 f8a1 	bl	8000c18 <__aeabi_dcmpgt>
 8008ad6:	2800      	cmp	r0, #0
 8008ad8:	d145      	bne.n	8008b66 <_dtoa_r+0x6be>
 8008ada:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008ade:	49a5      	ldr	r1, [pc, #660]	@ (8008d74 <_dtoa_r+0x8cc>)
 8008ae0:	2000      	movs	r0, #0
 8008ae2:	f7f7 fc51 	bl	8000388 <__aeabi_dsub>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	460b      	mov	r3, r1
 8008aea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008aee:	f7f8 f875 	bl	8000bdc <__aeabi_dcmplt>
 8008af2:	2800      	cmp	r0, #0
 8008af4:	f43f aef5 	beq.w	80088e2 <_dtoa_r+0x43a>
 8008af8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008afa:	1e73      	subs	r3, r6, #1
 8008afc:	9315      	str	r3, [sp, #84]	@ 0x54
 8008afe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008b02:	2b30      	cmp	r3, #48	@ 0x30
 8008b04:	d0f8      	beq.n	8008af8 <_dtoa_r+0x650>
 8008b06:	9f04      	ldr	r7, [sp, #16]
 8008b08:	e73e      	b.n	8008988 <_dtoa_r+0x4e0>
 8008b0a:	4b9b      	ldr	r3, [pc, #620]	@ (8008d78 <_dtoa_r+0x8d0>)
 8008b0c:	f7f7 fdf4 	bl	80006f8 <__aeabi_dmul>
 8008b10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b14:	e7bc      	b.n	8008a90 <_dtoa_r+0x5e8>
 8008b16:	d10c      	bne.n	8008b32 <_dtoa_r+0x68a>
 8008b18:	4b98      	ldr	r3, [pc, #608]	@ (8008d7c <_dtoa_r+0x8d4>)
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b20:	f7f7 fdea 	bl	80006f8 <__aeabi_dmul>
 8008b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b28:	f7f8 f86c 	bl	8000c04 <__aeabi_dcmpge>
 8008b2c:	2800      	cmp	r0, #0
 8008b2e:	f000 8157 	beq.w	8008de0 <_dtoa_r+0x938>
 8008b32:	2400      	movs	r4, #0
 8008b34:	4625      	mov	r5, r4
 8008b36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b38:	43db      	mvns	r3, r3
 8008b3a:	9304      	str	r3, [sp, #16]
 8008b3c:	4656      	mov	r6, sl
 8008b3e:	2700      	movs	r7, #0
 8008b40:	4621      	mov	r1, r4
 8008b42:	4658      	mov	r0, fp
 8008b44:	f000 fbb4 	bl	80092b0 <_Bfree>
 8008b48:	2d00      	cmp	r5, #0
 8008b4a:	d0dc      	beq.n	8008b06 <_dtoa_r+0x65e>
 8008b4c:	b12f      	cbz	r7, 8008b5a <_dtoa_r+0x6b2>
 8008b4e:	42af      	cmp	r7, r5
 8008b50:	d003      	beq.n	8008b5a <_dtoa_r+0x6b2>
 8008b52:	4639      	mov	r1, r7
 8008b54:	4658      	mov	r0, fp
 8008b56:	f000 fbab 	bl	80092b0 <_Bfree>
 8008b5a:	4629      	mov	r1, r5
 8008b5c:	4658      	mov	r0, fp
 8008b5e:	f000 fba7 	bl	80092b0 <_Bfree>
 8008b62:	e7d0      	b.n	8008b06 <_dtoa_r+0x65e>
 8008b64:	9704      	str	r7, [sp, #16]
 8008b66:	4633      	mov	r3, r6
 8008b68:	461e      	mov	r6, r3
 8008b6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b6e:	2a39      	cmp	r2, #57	@ 0x39
 8008b70:	d107      	bne.n	8008b82 <_dtoa_r+0x6da>
 8008b72:	459a      	cmp	sl, r3
 8008b74:	d1f8      	bne.n	8008b68 <_dtoa_r+0x6c0>
 8008b76:	9a04      	ldr	r2, [sp, #16]
 8008b78:	3201      	adds	r2, #1
 8008b7a:	9204      	str	r2, [sp, #16]
 8008b7c:	2230      	movs	r2, #48	@ 0x30
 8008b7e:	f88a 2000 	strb.w	r2, [sl]
 8008b82:	781a      	ldrb	r2, [r3, #0]
 8008b84:	3201      	adds	r2, #1
 8008b86:	701a      	strb	r2, [r3, #0]
 8008b88:	e7bd      	b.n	8008b06 <_dtoa_r+0x65e>
 8008b8a:	4b7b      	ldr	r3, [pc, #492]	@ (8008d78 <_dtoa_r+0x8d0>)
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	f7f7 fdb3 	bl	80006f8 <__aeabi_dmul>
 8008b92:	2200      	movs	r2, #0
 8008b94:	2300      	movs	r3, #0
 8008b96:	4604      	mov	r4, r0
 8008b98:	460d      	mov	r5, r1
 8008b9a:	f7f8 f815 	bl	8000bc8 <__aeabi_dcmpeq>
 8008b9e:	2800      	cmp	r0, #0
 8008ba0:	f43f aebb 	beq.w	800891a <_dtoa_r+0x472>
 8008ba4:	e6f0      	b.n	8008988 <_dtoa_r+0x4e0>
 8008ba6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008ba8:	2a00      	cmp	r2, #0
 8008baa:	f000 80db 	beq.w	8008d64 <_dtoa_r+0x8bc>
 8008bae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008bb0:	2a01      	cmp	r2, #1
 8008bb2:	f300 80bf 	bgt.w	8008d34 <_dtoa_r+0x88c>
 8008bb6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008bb8:	2a00      	cmp	r2, #0
 8008bba:	f000 80b7 	beq.w	8008d2c <_dtoa_r+0x884>
 8008bbe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008bc2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008bc4:	4646      	mov	r6, r8
 8008bc6:	9a08      	ldr	r2, [sp, #32]
 8008bc8:	2101      	movs	r1, #1
 8008bca:	441a      	add	r2, r3
 8008bcc:	4658      	mov	r0, fp
 8008bce:	4498      	add	r8, r3
 8008bd0:	9208      	str	r2, [sp, #32]
 8008bd2:	f000 fc21 	bl	8009418 <__i2b>
 8008bd6:	4605      	mov	r5, r0
 8008bd8:	b15e      	cbz	r6, 8008bf2 <_dtoa_r+0x74a>
 8008bda:	9b08      	ldr	r3, [sp, #32]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	dd08      	ble.n	8008bf2 <_dtoa_r+0x74a>
 8008be0:	42b3      	cmp	r3, r6
 8008be2:	9a08      	ldr	r2, [sp, #32]
 8008be4:	bfa8      	it	ge
 8008be6:	4633      	movge	r3, r6
 8008be8:	eba8 0803 	sub.w	r8, r8, r3
 8008bec:	1af6      	subs	r6, r6, r3
 8008bee:	1ad3      	subs	r3, r2, r3
 8008bf0:	9308      	str	r3, [sp, #32]
 8008bf2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008bf4:	b1f3      	cbz	r3, 8008c34 <_dtoa_r+0x78c>
 8008bf6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	f000 80b7 	beq.w	8008d6c <_dtoa_r+0x8c4>
 8008bfe:	b18c      	cbz	r4, 8008c24 <_dtoa_r+0x77c>
 8008c00:	4629      	mov	r1, r5
 8008c02:	4622      	mov	r2, r4
 8008c04:	4658      	mov	r0, fp
 8008c06:	f000 fcc7 	bl	8009598 <__pow5mult>
 8008c0a:	464a      	mov	r2, r9
 8008c0c:	4601      	mov	r1, r0
 8008c0e:	4605      	mov	r5, r0
 8008c10:	4658      	mov	r0, fp
 8008c12:	f000 fc17 	bl	8009444 <__multiply>
 8008c16:	4649      	mov	r1, r9
 8008c18:	9004      	str	r0, [sp, #16]
 8008c1a:	4658      	mov	r0, fp
 8008c1c:	f000 fb48 	bl	80092b0 <_Bfree>
 8008c20:	9b04      	ldr	r3, [sp, #16]
 8008c22:	4699      	mov	r9, r3
 8008c24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c26:	1b1a      	subs	r2, r3, r4
 8008c28:	d004      	beq.n	8008c34 <_dtoa_r+0x78c>
 8008c2a:	4649      	mov	r1, r9
 8008c2c:	4658      	mov	r0, fp
 8008c2e:	f000 fcb3 	bl	8009598 <__pow5mult>
 8008c32:	4681      	mov	r9, r0
 8008c34:	2101      	movs	r1, #1
 8008c36:	4658      	mov	r0, fp
 8008c38:	f000 fbee 	bl	8009418 <__i2b>
 8008c3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c3e:	4604      	mov	r4, r0
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	f000 81cf 	beq.w	8008fe4 <_dtoa_r+0xb3c>
 8008c46:	461a      	mov	r2, r3
 8008c48:	4601      	mov	r1, r0
 8008c4a:	4658      	mov	r0, fp
 8008c4c:	f000 fca4 	bl	8009598 <__pow5mult>
 8008c50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	4604      	mov	r4, r0
 8008c56:	f300 8095 	bgt.w	8008d84 <_dtoa_r+0x8dc>
 8008c5a:	9b02      	ldr	r3, [sp, #8]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	f040 8087 	bne.w	8008d70 <_dtoa_r+0x8c8>
 8008c62:	9b03      	ldr	r3, [sp, #12]
 8008c64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	f040 8089 	bne.w	8008d80 <_dtoa_r+0x8d8>
 8008c6e:	9b03      	ldr	r3, [sp, #12]
 8008c70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008c74:	0d1b      	lsrs	r3, r3, #20
 8008c76:	051b      	lsls	r3, r3, #20
 8008c78:	b12b      	cbz	r3, 8008c86 <_dtoa_r+0x7de>
 8008c7a:	9b08      	ldr	r3, [sp, #32]
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	9308      	str	r3, [sp, #32]
 8008c80:	f108 0801 	add.w	r8, r8, #1
 8008c84:	2301      	movs	r3, #1
 8008c86:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	f000 81b0 	beq.w	8008ff0 <_dtoa_r+0xb48>
 8008c90:	6923      	ldr	r3, [r4, #16]
 8008c92:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008c96:	6918      	ldr	r0, [r3, #16]
 8008c98:	f000 fb72 	bl	8009380 <__hi0bits>
 8008c9c:	f1c0 0020 	rsb	r0, r0, #32
 8008ca0:	9b08      	ldr	r3, [sp, #32]
 8008ca2:	4418      	add	r0, r3
 8008ca4:	f010 001f 	ands.w	r0, r0, #31
 8008ca8:	d077      	beq.n	8008d9a <_dtoa_r+0x8f2>
 8008caa:	f1c0 0320 	rsb	r3, r0, #32
 8008cae:	2b04      	cmp	r3, #4
 8008cb0:	dd6b      	ble.n	8008d8a <_dtoa_r+0x8e2>
 8008cb2:	9b08      	ldr	r3, [sp, #32]
 8008cb4:	f1c0 001c 	rsb	r0, r0, #28
 8008cb8:	4403      	add	r3, r0
 8008cba:	4480      	add	r8, r0
 8008cbc:	4406      	add	r6, r0
 8008cbe:	9308      	str	r3, [sp, #32]
 8008cc0:	f1b8 0f00 	cmp.w	r8, #0
 8008cc4:	dd05      	ble.n	8008cd2 <_dtoa_r+0x82a>
 8008cc6:	4649      	mov	r1, r9
 8008cc8:	4642      	mov	r2, r8
 8008cca:	4658      	mov	r0, fp
 8008ccc:	f000 fcbe 	bl	800964c <__lshift>
 8008cd0:	4681      	mov	r9, r0
 8008cd2:	9b08      	ldr	r3, [sp, #32]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	dd05      	ble.n	8008ce4 <_dtoa_r+0x83c>
 8008cd8:	4621      	mov	r1, r4
 8008cda:	461a      	mov	r2, r3
 8008cdc:	4658      	mov	r0, fp
 8008cde:	f000 fcb5 	bl	800964c <__lshift>
 8008ce2:	4604      	mov	r4, r0
 8008ce4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d059      	beq.n	8008d9e <_dtoa_r+0x8f6>
 8008cea:	4621      	mov	r1, r4
 8008cec:	4648      	mov	r0, r9
 8008cee:	f000 fd19 	bl	8009724 <__mcmp>
 8008cf2:	2800      	cmp	r0, #0
 8008cf4:	da53      	bge.n	8008d9e <_dtoa_r+0x8f6>
 8008cf6:	1e7b      	subs	r3, r7, #1
 8008cf8:	9304      	str	r3, [sp, #16]
 8008cfa:	4649      	mov	r1, r9
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	220a      	movs	r2, #10
 8008d00:	4658      	mov	r0, fp
 8008d02:	f000 faf7 	bl	80092f4 <__multadd>
 8008d06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d08:	4681      	mov	r9, r0
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	f000 8172 	beq.w	8008ff4 <_dtoa_r+0xb4c>
 8008d10:	2300      	movs	r3, #0
 8008d12:	4629      	mov	r1, r5
 8008d14:	220a      	movs	r2, #10
 8008d16:	4658      	mov	r0, fp
 8008d18:	f000 faec 	bl	80092f4 <__multadd>
 8008d1c:	9b00      	ldr	r3, [sp, #0]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	4605      	mov	r5, r0
 8008d22:	dc67      	bgt.n	8008df4 <_dtoa_r+0x94c>
 8008d24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d26:	2b02      	cmp	r3, #2
 8008d28:	dc41      	bgt.n	8008dae <_dtoa_r+0x906>
 8008d2a:	e063      	b.n	8008df4 <_dtoa_r+0x94c>
 8008d2c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008d2e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008d32:	e746      	b.n	8008bc2 <_dtoa_r+0x71a>
 8008d34:	9b07      	ldr	r3, [sp, #28]
 8008d36:	1e5c      	subs	r4, r3, #1
 8008d38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d3a:	42a3      	cmp	r3, r4
 8008d3c:	bfbf      	itttt	lt
 8008d3e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008d40:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008d42:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008d44:	1ae3      	sublt	r3, r4, r3
 8008d46:	bfb4      	ite	lt
 8008d48:	18d2      	addlt	r2, r2, r3
 8008d4a:	1b1c      	subge	r4, r3, r4
 8008d4c:	9b07      	ldr	r3, [sp, #28]
 8008d4e:	bfbc      	itt	lt
 8008d50:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008d52:	2400      	movlt	r4, #0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	bfb5      	itete	lt
 8008d58:	eba8 0603 	sublt.w	r6, r8, r3
 8008d5c:	9b07      	ldrge	r3, [sp, #28]
 8008d5e:	2300      	movlt	r3, #0
 8008d60:	4646      	movge	r6, r8
 8008d62:	e730      	b.n	8008bc6 <_dtoa_r+0x71e>
 8008d64:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008d66:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008d68:	4646      	mov	r6, r8
 8008d6a:	e735      	b.n	8008bd8 <_dtoa_r+0x730>
 8008d6c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008d6e:	e75c      	b.n	8008c2a <_dtoa_r+0x782>
 8008d70:	2300      	movs	r3, #0
 8008d72:	e788      	b.n	8008c86 <_dtoa_r+0x7de>
 8008d74:	3fe00000 	.word	0x3fe00000
 8008d78:	40240000 	.word	0x40240000
 8008d7c:	40140000 	.word	0x40140000
 8008d80:	9b02      	ldr	r3, [sp, #8]
 8008d82:	e780      	b.n	8008c86 <_dtoa_r+0x7de>
 8008d84:	2300      	movs	r3, #0
 8008d86:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d88:	e782      	b.n	8008c90 <_dtoa_r+0x7e8>
 8008d8a:	d099      	beq.n	8008cc0 <_dtoa_r+0x818>
 8008d8c:	9a08      	ldr	r2, [sp, #32]
 8008d8e:	331c      	adds	r3, #28
 8008d90:	441a      	add	r2, r3
 8008d92:	4498      	add	r8, r3
 8008d94:	441e      	add	r6, r3
 8008d96:	9208      	str	r2, [sp, #32]
 8008d98:	e792      	b.n	8008cc0 <_dtoa_r+0x818>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	e7f6      	b.n	8008d8c <_dtoa_r+0x8e4>
 8008d9e:	9b07      	ldr	r3, [sp, #28]
 8008da0:	9704      	str	r7, [sp, #16]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	dc20      	bgt.n	8008de8 <_dtoa_r+0x940>
 8008da6:	9300      	str	r3, [sp, #0]
 8008da8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008daa:	2b02      	cmp	r3, #2
 8008dac:	dd1e      	ble.n	8008dec <_dtoa_r+0x944>
 8008dae:	9b00      	ldr	r3, [sp, #0]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	f47f aec0 	bne.w	8008b36 <_dtoa_r+0x68e>
 8008db6:	4621      	mov	r1, r4
 8008db8:	2205      	movs	r2, #5
 8008dba:	4658      	mov	r0, fp
 8008dbc:	f000 fa9a 	bl	80092f4 <__multadd>
 8008dc0:	4601      	mov	r1, r0
 8008dc2:	4604      	mov	r4, r0
 8008dc4:	4648      	mov	r0, r9
 8008dc6:	f000 fcad 	bl	8009724 <__mcmp>
 8008dca:	2800      	cmp	r0, #0
 8008dcc:	f77f aeb3 	ble.w	8008b36 <_dtoa_r+0x68e>
 8008dd0:	4656      	mov	r6, sl
 8008dd2:	2331      	movs	r3, #49	@ 0x31
 8008dd4:	f806 3b01 	strb.w	r3, [r6], #1
 8008dd8:	9b04      	ldr	r3, [sp, #16]
 8008dda:	3301      	adds	r3, #1
 8008ddc:	9304      	str	r3, [sp, #16]
 8008dde:	e6ae      	b.n	8008b3e <_dtoa_r+0x696>
 8008de0:	9c07      	ldr	r4, [sp, #28]
 8008de2:	9704      	str	r7, [sp, #16]
 8008de4:	4625      	mov	r5, r4
 8008de6:	e7f3      	b.n	8008dd0 <_dtoa_r+0x928>
 8008de8:	9b07      	ldr	r3, [sp, #28]
 8008dea:	9300      	str	r3, [sp, #0]
 8008dec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	f000 8104 	beq.w	8008ffc <_dtoa_r+0xb54>
 8008df4:	2e00      	cmp	r6, #0
 8008df6:	dd05      	ble.n	8008e04 <_dtoa_r+0x95c>
 8008df8:	4629      	mov	r1, r5
 8008dfa:	4632      	mov	r2, r6
 8008dfc:	4658      	mov	r0, fp
 8008dfe:	f000 fc25 	bl	800964c <__lshift>
 8008e02:	4605      	mov	r5, r0
 8008e04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d05a      	beq.n	8008ec0 <_dtoa_r+0xa18>
 8008e0a:	6869      	ldr	r1, [r5, #4]
 8008e0c:	4658      	mov	r0, fp
 8008e0e:	f000 fa0f 	bl	8009230 <_Balloc>
 8008e12:	4606      	mov	r6, r0
 8008e14:	b928      	cbnz	r0, 8008e22 <_dtoa_r+0x97a>
 8008e16:	4b84      	ldr	r3, [pc, #528]	@ (8009028 <_dtoa_r+0xb80>)
 8008e18:	4602      	mov	r2, r0
 8008e1a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008e1e:	f7ff bb5a 	b.w	80084d6 <_dtoa_r+0x2e>
 8008e22:	692a      	ldr	r2, [r5, #16]
 8008e24:	3202      	adds	r2, #2
 8008e26:	0092      	lsls	r2, r2, #2
 8008e28:	f105 010c 	add.w	r1, r5, #12
 8008e2c:	300c      	adds	r0, #12
 8008e2e:	f001 f813 	bl	8009e58 <memcpy>
 8008e32:	2201      	movs	r2, #1
 8008e34:	4631      	mov	r1, r6
 8008e36:	4658      	mov	r0, fp
 8008e38:	f000 fc08 	bl	800964c <__lshift>
 8008e3c:	f10a 0301 	add.w	r3, sl, #1
 8008e40:	9307      	str	r3, [sp, #28]
 8008e42:	9b00      	ldr	r3, [sp, #0]
 8008e44:	4453      	add	r3, sl
 8008e46:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008e48:	9b02      	ldr	r3, [sp, #8]
 8008e4a:	f003 0301 	and.w	r3, r3, #1
 8008e4e:	462f      	mov	r7, r5
 8008e50:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e52:	4605      	mov	r5, r0
 8008e54:	9b07      	ldr	r3, [sp, #28]
 8008e56:	4621      	mov	r1, r4
 8008e58:	3b01      	subs	r3, #1
 8008e5a:	4648      	mov	r0, r9
 8008e5c:	9300      	str	r3, [sp, #0]
 8008e5e:	f7ff fa9a 	bl	8008396 <quorem>
 8008e62:	4639      	mov	r1, r7
 8008e64:	9002      	str	r0, [sp, #8]
 8008e66:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008e6a:	4648      	mov	r0, r9
 8008e6c:	f000 fc5a 	bl	8009724 <__mcmp>
 8008e70:	462a      	mov	r2, r5
 8008e72:	9008      	str	r0, [sp, #32]
 8008e74:	4621      	mov	r1, r4
 8008e76:	4658      	mov	r0, fp
 8008e78:	f000 fc70 	bl	800975c <__mdiff>
 8008e7c:	68c2      	ldr	r2, [r0, #12]
 8008e7e:	4606      	mov	r6, r0
 8008e80:	bb02      	cbnz	r2, 8008ec4 <_dtoa_r+0xa1c>
 8008e82:	4601      	mov	r1, r0
 8008e84:	4648      	mov	r0, r9
 8008e86:	f000 fc4d 	bl	8009724 <__mcmp>
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	4631      	mov	r1, r6
 8008e8e:	4658      	mov	r0, fp
 8008e90:	920e      	str	r2, [sp, #56]	@ 0x38
 8008e92:	f000 fa0d 	bl	80092b0 <_Bfree>
 8008e96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e98:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008e9a:	9e07      	ldr	r6, [sp, #28]
 8008e9c:	ea43 0102 	orr.w	r1, r3, r2
 8008ea0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ea2:	4319      	orrs	r1, r3
 8008ea4:	d110      	bne.n	8008ec8 <_dtoa_r+0xa20>
 8008ea6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008eaa:	d029      	beq.n	8008f00 <_dtoa_r+0xa58>
 8008eac:	9b08      	ldr	r3, [sp, #32]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	dd02      	ble.n	8008eb8 <_dtoa_r+0xa10>
 8008eb2:	9b02      	ldr	r3, [sp, #8]
 8008eb4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008eb8:	9b00      	ldr	r3, [sp, #0]
 8008eba:	f883 8000 	strb.w	r8, [r3]
 8008ebe:	e63f      	b.n	8008b40 <_dtoa_r+0x698>
 8008ec0:	4628      	mov	r0, r5
 8008ec2:	e7bb      	b.n	8008e3c <_dtoa_r+0x994>
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	e7e1      	b.n	8008e8c <_dtoa_r+0x9e4>
 8008ec8:	9b08      	ldr	r3, [sp, #32]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	db04      	blt.n	8008ed8 <_dtoa_r+0xa30>
 8008ece:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008ed0:	430b      	orrs	r3, r1
 8008ed2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008ed4:	430b      	orrs	r3, r1
 8008ed6:	d120      	bne.n	8008f1a <_dtoa_r+0xa72>
 8008ed8:	2a00      	cmp	r2, #0
 8008eda:	dded      	ble.n	8008eb8 <_dtoa_r+0xa10>
 8008edc:	4649      	mov	r1, r9
 8008ede:	2201      	movs	r2, #1
 8008ee0:	4658      	mov	r0, fp
 8008ee2:	f000 fbb3 	bl	800964c <__lshift>
 8008ee6:	4621      	mov	r1, r4
 8008ee8:	4681      	mov	r9, r0
 8008eea:	f000 fc1b 	bl	8009724 <__mcmp>
 8008eee:	2800      	cmp	r0, #0
 8008ef0:	dc03      	bgt.n	8008efa <_dtoa_r+0xa52>
 8008ef2:	d1e1      	bne.n	8008eb8 <_dtoa_r+0xa10>
 8008ef4:	f018 0f01 	tst.w	r8, #1
 8008ef8:	d0de      	beq.n	8008eb8 <_dtoa_r+0xa10>
 8008efa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008efe:	d1d8      	bne.n	8008eb2 <_dtoa_r+0xa0a>
 8008f00:	9a00      	ldr	r2, [sp, #0]
 8008f02:	2339      	movs	r3, #57	@ 0x39
 8008f04:	7013      	strb	r3, [r2, #0]
 8008f06:	4633      	mov	r3, r6
 8008f08:	461e      	mov	r6, r3
 8008f0a:	3b01      	subs	r3, #1
 8008f0c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008f10:	2a39      	cmp	r2, #57	@ 0x39
 8008f12:	d052      	beq.n	8008fba <_dtoa_r+0xb12>
 8008f14:	3201      	adds	r2, #1
 8008f16:	701a      	strb	r2, [r3, #0]
 8008f18:	e612      	b.n	8008b40 <_dtoa_r+0x698>
 8008f1a:	2a00      	cmp	r2, #0
 8008f1c:	dd07      	ble.n	8008f2e <_dtoa_r+0xa86>
 8008f1e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008f22:	d0ed      	beq.n	8008f00 <_dtoa_r+0xa58>
 8008f24:	9a00      	ldr	r2, [sp, #0]
 8008f26:	f108 0301 	add.w	r3, r8, #1
 8008f2a:	7013      	strb	r3, [r2, #0]
 8008f2c:	e608      	b.n	8008b40 <_dtoa_r+0x698>
 8008f2e:	9b07      	ldr	r3, [sp, #28]
 8008f30:	9a07      	ldr	r2, [sp, #28]
 8008f32:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008f36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d028      	beq.n	8008f8e <_dtoa_r+0xae6>
 8008f3c:	4649      	mov	r1, r9
 8008f3e:	2300      	movs	r3, #0
 8008f40:	220a      	movs	r2, #10
 8008f42:	4658      	mov	r0, fp
 8008f44:	f000 f9d6 	bl	80092f4 <__multadd>
 8008f48:	42af      	cmp	r7, r5
 8008f4a:	4681      	mov	r9, r0
 8008f4c:	f04f 0300 	mov.w	r3, #0
 8008f50:	f04f 020a 	mov.w	r2, #10
 8008f54:	4639      	mov	r1, r7
 8008f56:	4658      	mov	r0, fp
 8008f58:	d107      	bne.n	8008f6a <_dtoa_r+0xac2>
 8008f5a:	f000 f9cb 	bl	80092f4 <__multadd>
 8008f5e:	4607      	mov	r7, r0
 8008f60:	4605      	mov	r5, r0
 8008f62:	9b07      	ldr	r3, [sp, #28]
 8008f64:	3301      	adds	r3, #1
 8008f66:	9307      	str	r3, [sp, #28]
 8008f68:	e774      	b.n	8008e54 <_dtoa_r+0x9ac>
 8008f6a:	f000 f9c3 	bl	80092f4 <__multadd>
 8008f6e:	4629      	mov	r1, r5
 8008f70:	4607      	mov	r7, r0
 8008f72:	2300      	movs	r3, #0
 8008f74:	220a      	movs	r2, #10
 8008f76:	4658      	mov	r0, fp
 8008f78:	f000 f9bc 	bl	80092f4 <__multadd>
 8008f7c:	4605      	mov	r5, r0
 8008f7e:	e7f0      	b.n	8008f62 <_dtoa_r+0xaba>
 8008f80:	9b00      	ldr	r3, [sp, #0]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	bfcc      	ite	gt
 8008f86:	461e      	movgt	r6, r3
 8008f88:	2601      	movle	r6, #1
 8008f8a:	4456      	add	r6, sl
 8008f8c:	2700      	movs	r7, #0
 8008f8e:	4649      	mov	r1, r9
 8008f90:	2201      	movs	r2, #1
 8008f92:	4658      	mov	r0, fp
 8008f94:	f000 fb5a 	bl	800964c <__lshift>
 8008f98:	4621      	mov	r1, r4
 8008f9a:	4681      	mov	r9, r0
 8008f9c:	f000 fbc2 	bl	8009724 <__mcmp>
 8008fa0:	2800      	cmp	r0, #0
 8008fa2:	dcb0      	bgt.n	8008f06 <_dtoa_r+0xa5e>
 8008fa4:	d102      	bne.n	8008fac <_dtoa_r+0xb04>
 8008fa6:	f018 0f01 	tst.w	r8, #1
 8008faa:	d1ac      	bne.n	8008f06 <_dtoa_r+0xa5e>
 8008fac:	4633      	mov	r3, r6
 8008fae:	461e      	mov	r6, r3
 8008fb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008fb4:	2a30      	cmp	r2, #48	@ 0x30
 8008fb6:	d0fa      	beq.n	8008fae <_dtoa_r+0xb06>
 8008fb8:	e5c2      	b.n	8008b40 <_dtoa_r+0x698>
 8008fba:	459a      	cmp	sl, r3
 8008fbc:	d1a4      	bne.n	8008f08 <_dtoa_r+0xa60>
 8008fbe:	9b04      	ldr	r3, [sp, #16]
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	9304      	str	r3, [sp, #16]
 8008fc4:	2331      	movs	r3, #49	@ 0x31
 8008fc6:	f88a 3000 	strb.w	r3, [sl]
 8008fca:	e5b9      	b.n	8008b40 <_dtoa_r+0x698>
 8008fcc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008fce:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800902c <_dtoa_r+0xb84>
 8008fd2:	b11b      	cbz	r3, 8008fdc <_dtoa_r+0xb34>
 8008fd4:	f10a 0308 	add.w	r3, sl, #8
 8008fd8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008fda:	6013      	str	r3, [r2, #0]
 8008fdc:	4650      	mov	r0, sl
 8008fde:	b019      	add	sp, #100	@ 0x64
 8008fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fe4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	f77f ae37 	ble.w	8008c5a <_dtoa_r+0x7b2>
 8008fec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008fee:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ff0:	2001      	movs	r0, #1
 8008ff2:	e655      	b.n	8008ca0 <_dtoa_r+0x7f8>
 8008ff4:	9b00      	ldr	r3, [sp, #0]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	f77f aed6 	ble.w	8008da8 <_dtoa_r+0x900>
 8008ffc:	4656      	mov	r6, sl
 8008ffe:	4621      	mov	r1, r4
 8009000:	4648      	mov	r0, r9
 8009002:	f7ff f9c8 	bl	8008396 <quorem>
 8009006:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800900a:	f806 8b01 	strb.w	r8, [r6], #1
 800900e:	9b00      	ldr	r3, [sp, #0]
 8009010:	eba6 020a 	sub.w	r2, r6, sl
 8009014:	4293      	cmp	r3, r2
 8009016:	ddb3      	ble.n	8008f80 <_dtoa_r+0xad8>
 8009018:	4649      	mov	r1, r9
 800901a:	2300      	movs	r3, #0
 800901c:	220a      	movs	r2, #10
 800901e:	4658      	mov	r0, fp
 8009020:	f000 f968 	bl	80092f4 <__multadd>
 8009024:	4681      	mov	r9, r0
 8009026:	e7ea      	b.n	8008ffe <_dtoa_r+0xb56>
 8009028:	0801e0d4 	.word	0x0801e0d4
 800902c:	0801e058 	.word	0x0801e058

08009030 <_free_r>:
 8009030:	b538      	push	{r3, r4, r5, lr}
 8009032:	4605      	mov	r5, r0
 8009034:	2900      	cmp	r1, #0
 8009036:	d041      	beq.n	80090bc <_free_r+0x8c>
 8009038:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800903c:	1f0c      	subs	r4, r1, #4
 800903e:	2b00      	cmp	r3, #0
 8009040:	bfb8      	it	lt
 8009042:	18e4      	addlt	r4, r4, r3
 8009044:	f000 f8e8 	bl	8009218 <__malloc_lock>
 8009048:	4a1d      	ldr	r2, [pc, #116]	@ (80090c0 <_free_r+0x90>)
 800904a:	6813      	ldr	r3, [r2, #0]
 800904c:	b933      	cbnz	r3, 800905c <_free_r+0x2c>
 800904e:	6063      	str	r3, [r4, #4]
 8009050:	6014      	str	r4, [r2, #0]
 8009052:	4628      	mov	r0, r5
 8009054:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009058:	f000 b8e4 	b.w	8009224 <__malloc_unlock>
 800905c:	42a3      	cmp	r3, r4
 800905e:	d908      	bls.n	8009072 <_free_r+0x42>
 8009060:	6820      	ldr	r0, [r4, #0]
 8009062:	1821      	adds	r1, r4, r0
 8009064:	428b      	cmp	r3, r1
 8009066:	bf01      	itttt	eq
 8009068:	6819      	ldreq	r1, [r3, #0]
 800906a:	685b      	ldreq	r3, [r3, #4]
 800906c:	1809      	addeq	r1, r1, r0
 800906e:	6021      	streq	r1, [r4, #0]
 8009070:	e7ed      	b.n	800904e <_free_r+0x1e>
 8009072:	461a      	mov	r2, r3
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	b10b      	cbz	r3, 800907c <_free_r+0x4c>
 8009078:	42a3      	cmp	r3, r4
 800907a:	d9fa      	bls.n	8009072 <_free_r+0x42>
 800907c:	6811      	ldr	r1, [r2, #0]
 800907e:	1850      	adds	r0, r2, r1
 8009080:	42a0      	cmp	r0, r4
 8009082:	d10b      	bne.n	800909c <_free_r+0x6c>
 8009084:	6820      	ldr	r0, [r4, #0]
 8009086:	4401      	add	r1, r0
 8009088:	1850      	adds	r0, r2, r1
 800908a:	4283      	cmp	r3, r0
 800908c:	6011      	str	r1, [r2, #0]
 800908e:	d1e0      	bne.n	8009052 <_free_r+0x22>
 8009090:	6818      	ldr	r0, [r3, #0]
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	6053      	str	r3, [r2, #4]
 8009096:	4408      	add	r0, r1
 8009098:	6010      	str	r0, [r2, #0]
 800909a:	e7da      	b.n	8009052 <_free_r+0x22>
 800909c:	d902      	bls.n	80090a4 <_free_r+0x74>
 800909e:	230c      	movs	r3, #12
 80090a0:	602b      	str	r3, [r5, #0]
 80090a2:	e7d6      	b.n	8009052 <_free_r+0x22>
 80090a4:	6820      	ldr	r0, [r4, #0]
 80090a6:	1821      	adds	r1, r4, r0
 80090a8:	428b      	cmp	r3, r1
 80090aa:	bf04      	itt	eq
 80090ac:	6819      	ldreq	r1, [r3, #0]
 80090ae:	685b      	ldreq	r3, [r3, #4]
 80090b0:	6063      	str	r3, [r4, #4]
 80090b2:	bf04      	itt	eq
 80090b4:	1809      	addeq	r1, r1, r0
 80090b6:	6021      	streq	r1, [r4, #0]
 80090b8:	6054      	str	r4, [r2, #4]
 80090ba:	e7ca      	b.n	8009052 <_free_r+0x22>
 80090bc:	bd38      	pop	{r3, r4, r5, pc}
 80090be:	bf00      	nop
 80090c0:	200022d8 	.word	0x200022d8

080090c4 <malloc>:
 80090c4:	4b02      	ldr	r3, [pc, #8]	@ (80090d0 <malloc+0xc>)
 80090c6:	4601      	mov	r1, r0
 80090c8:	6818      	ldr	r0, [r3, #0]
 80090ca:	f000 b825 	b.w	8009118 <_malloc_r>
 80090ce:	bf00      	nop
 80090d0:	20000018 	.word	0x20000018

080090d4 <sbrk_aligned>:
 80090d4:	b570      	push	{r4, r5, r6, lr}
 80090d6:	4e0f      	ldr	r6, [pc, #60]	@ (8009114 <sbrk_aligned+0x40>)
 80090d8:	460c      	mov	r4, r1
 80090da:	6831      	ldr	r1, [r6, #0]
 80090dc:	4605      	mov	r5, r0
 80090de:	b911      	cbnz	r1, 80090e6 <sbrk_aligned+0x12>
 80090e0:	f000 feaa 	bl	8009e38 <_sbrk_r>
 80090e4:	6030      	str	r0, [r6, #0]
 80090e6:	4621      	mov	r1, r4
 80090e8:	4628      	mov	r0, r5
 80090ea:	f000 fea5 	bl	8009e38 <_sbrk_r>
 80090ee:	1c43      	adds	r3, r0, #1
 80090f0:	d103      	bne.n	80090fa <sbrk_aligned+0x26>
 80090f2:	f04f 34ff 	mov.w	r4, #4294967295
 80090f6:	4620      	mov	r0, r4
 80090f8:	bd70      	pop	{r4, r5, r6, pc}
 80090fa:	1cc4      	adds	r4, r0, #3
 80090fc:	f024 0403 	bic.w	r4, r4, #3
 8009100:	42a0      	cmp	r0, r4
 8009102:	d0f8      	beq.n	80090f6 <sbrk_aligned+0x22>
 8009104:	1a21      	subs	r1, r4, r0
 8009106:	4628      	mov	r0, r5
 8009108:	f000 fe96 	bl	8009e38 <_sbrk_r>
 800910c:	3001      	adds	r0, #1
 800910e:	d1f2      	bne.n	80090f6 <sbrk_aligned+0x22>
 8009110:	e7ef      	b.n	80090f2 <sbrk_aligned+0x1e>
 8009112:	bf00      	nop
 8009114:	200022d4 	.word	0x200022d4

08009118 <_malloc_r>:
 8009118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800911c:	1ccd      	adds	r5, r1, #3
 800911e:	f025 0503 	bic.w	r5, r5, #3
 8009122:	3508      	adds	r5, #8
 8009124:	2d0c      	cmp	r5, #12
 8009126:	bf38      	it	cc
 8009128:	250c      	movcc	r5, #12
 800912a:	2d00      	cmp	r5, #0
 800912c:	4606      	mov	r6, r0
 800912e:	db01      	blt.n	8009134 <_malloc_r+0x1c>
 8009130:	42a9      	cmp	r1, r5
 8009132:	d904      	bls.n	800913e <_malloc_r+0x26>
 8009134:	230c      	movs	r3, #12
 8009136:	6033      	str	r3, [r6, #0]
 8009138:	2000      	movs	r0, #0
 800913a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800913e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009214 <_malloc_r+0xfc>
 8009142:	f000 f869 	bl	8009218 <__malloc_lock>
 8009146:	f8d8 3000 	ldr.w	r3, [r8]
 800914a:	461c      	mov	r4, r3
 800914c:	bb44      	cbnz	r4, 80091a0 <_malloc_r+0x88>
 800914e:	4629      	mov	r1, r5
 8009150:	4630      	mov	r0, r6
 8009152:	f7ff ffbf 	bl	80090d4 <sbrk_aligned>
 8009156:	1c43      	adds	r3, r0, #1
 8009158:	4604      	mov	r4, r0
 800915a:	d158      	bne.n	800920e <_malloc_r+0xf6>
 800915c:	f8d8 4000 	ldr.w	r4, [r8]
 8009160:	4627      	mov	r7, r4
 8009162:	2f00      	cmp	r7, #0
 8009164:	d143      	bne.n	80091ee <_malloc_r+0xd6>
 8009166:	2c00      	cmp	r4, #0
 8009168:	d04b      	beq.n	8009202 <_malloc_r+0xea>
 800916a:	6823      	ldr	r3, [r4, #0]
 800916c:	4639      	mov	r1, r7
 800916e:	4630      	mov	r0, r6
 8009170:	eb04 0903 	add.w	r9, r4, r3
 8009174:	f000 fe60 	bl	8009e38 <_sbrk_r>
 8009178:	4581      	cmp	r9, r0
 800917a:	d142      	bne.n	8009202 <_malloc_r+0xea>
 800917c:	6821      	ldr	r1, [r4, #0]
 800917e:	1a6d      	subs	r5, r5, r1
 8009180:	4629      	mov	r1, r5
 8009182:	4630      	mov	r0, r6
 8009184:	f7ff ffa6 	bl	80090d4 <sbrk_aligned>
 8009188:	3001      	adds	r0, #1
 800918a:	d03a      	beq.n	8009202 <_malloc_r+0xea>
 800918c:	6823      	ldr	r3, [r4, #0]
 800918e:	442b      	add	r3, r5
 8009190:	6023      	str	r3, [r4, #0]
 8009192:	f8d8 3000 	ldr.w	r3, [r8]
 8009196:	685a      	ldr	r2, [r3, #4]
 8009198:	bb62      	cbnz	r2, 80091f4 <_malloc_r+0xdc>
 800919a:	f8c8 7000 	str.w	r7, [r8]
 800919e:	e00f      	b.n	80091c0 <_malloc_r+0xa8>
 80091a0:	6822      	ldr	r2, [r4, #0]
 80091a2:	1b52      	subs	r2, r2, r5
 80091a4:	d420      	bmi.n	80091e8 <_malloc_r+0xd0>
 80091a6:	2a0b      	cmp	r2, #11
 80091a8:	d917      	bls.n	80091da <_malloc_r+0xc2>
 80091aa:	1961      	adds	r1, r4, r5
 80091ac:	42a3      	cmp	r3, r4
 80091ae:	6025      	str	r5, [r4, #0]
 80091b0:	bf18      	it	ne
 80091b2:	6059      	strne	r1, [r3, #4]
 80091b4:	6863      	ldr	r3, [r4, #4]
 80091b6:	bf08      	it	eq
 80091b8:	f8c8 1000 	streq.w	r1, [r8]
 80091bc:	5162      	str	r2, [r4, r5]
 80091be:	604b      	str	r3, [r1, #4]
 80091c0:	4630      	mov	r0, r6
 80091c2:	f000 f82f 	bl	8009224 <__malloc_unlock>
 80091c6:	f104 000b 	add.w	r0, r4, #11
 80091ca:	1d23      	adds	r3, r4, #4
 80091cc:	f020 0007 	bic.w	r0, r0, #7
 80091d0:	1ac2      	subs	r2, r0, r3
 80091d2:	bf1c      	itt	ne
 80091d4:	1a1b      	subne	r3, r3, r0
 80091d6:	50a3      	strne	r3, [r4, r2]
 80091d8:	e7af      	b.n	800913a <_malloc_r+0x22>
 80091da:	6862      	ldr	r2, [r4, #4]
 80091dc:	42a3      	cmp	r3, r4
 80091de:	bf0c      	ite	eq
 80091e0:	f8c8 2000 	streq.w	r2, [r8]
 80091e4:	605a      	strne	r2, [r3, #4]
 80091e6:	e7eb      	b.n	80091c0 <_malloc_r+0xa8>
 80091e8:	4623      	mov	r3, r4
 80091ea:	6864      	ldr	r4, [r4, #4]
 80091ec:	e7ae      	b.n	800914c <_malloc_r+0x34>
 80091ee:	463c      	mov	r4, r7
 80091f0:	687f      	ldr	r7, [r7, #4]
 80091f2:	e7b6      	b.n	8009162 <_malloc_r+0x4a>
 80091f4:	461a      	mov	r2, r3
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	42a3      	cmp	r3, r4
 80091fa:	d1fb      	bne.n	80091f4 <_malloc_r+0xdc>
 80091fc:	2300      	movs	r3, #0
 80091fe:	6053      	str	r3, [r2, #4]
 8009200:	e7de      	b.n	80091c0 <_malloc_r+0xa8>
 8009202:	230c      	movs	r3, #12
 8009204:	6033      	str	r3, [r6, #0]
 8009206:	4630      	mov	r0, r6
 8009208:	f000 f80c 	bl	8009224 <__malloc_unlock>
 800920c:	e794      	b.n	8009138 <_malloc_r+0x20>
 800920e:	6005      	str	r5, [r0, #0]
 8009210:	e7d6      	b.n	80091c0 <_malloc_r+0xa8>
 8009212:	bf00      	nop
 8009214:	200022d8 	.word	0x200022d8

08009218 <__malloc_lock>:
 8009218:	4801      	ldr	r0, [pc, #4]	@ (8009220 <__malloc_lock+0x8>)
 800921a:	f7ff b8ba 	b.w	8008392 <__retarget_lock_acquire_recursive>
 800921e:	bf00      	nop
 8009220:	200022d0 	.word	0x200022d0

08009224 <__malloc_unlock>:
 8009224:	4801      	ldr	r0, [pc, #4]	@ (800922c <__malloc_unlock+0x8>)
 8009226:	f7ff b8b5 	b.w	8008394 <__retarget_lock_release_recursive>
 800922a:	bf00      	nop
 800922c:	200022d0 	.word	0x200022d0

08009230 <_Balloc>:
 8009230:	b570      	push	{r4, r5, r6, lr}
 8009232:	69c6      	ldr	r6, [r0, #28]
 8009234:	4604      	mov	r4, r0
 8009236:	460d      	mov	r5, r1
 8009238:	b976      	cbnz	r6, 8009258 <_Balloc+0x28>
 800923a:	2010      	movs	r0, #16
 800923c:	f7ff ff42 	bl	80090c4 <malloc>
 8009240:	4602      	mov	r2, r0
 8009242:	61e0      	str	r0, [r4, #28]
 8009244:	b920      	cbnz	r0, 8009250 <_Balloc+0x20>
 8009246:	4b18      	ldr	r3, [pc, #96]	@ (80092a8 <_Balloc+0x78>)
 8009248:	4818      	ldr	r0, [pc, #96]	@ (80092ac <_Balloc+0x7c>)
 800924a:	216b      	movs	r1, #107	@ 0x6b
 800924c:	f000 fe12 	bl	8009e74 <__assert_func>
 8009250:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009254:	6006      	str	r6, [r0, #0]
 8009256:	60c6      	str	r6, [r0, #12]
 8009258:	69e6      	ldr	r6, [r4, #28]
 800925a:	68f3      	ldr	r3, [r6, #12]
 800925c:	b183      	cbz	r3, 8009280 <_Balloc+0x50>
 800925e:	69e3      	ldr	r3, [r4, #28]
 8009260:	68db      	ldr	r3, [r3, #12]
 8009262:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009266:	b9b8      	cbnz	r0, 8009298 <_Balloc+0x68>
 8009268:	2101      	movs	r1, #1
 800926a:	fa01 f605 	lsl.w	r6, r1, r5
 800926e:	1d72      	adds	r2, r6, #5
 8009270:	0092      	lsls	r2, r2, #2
 8009272:	4620      	mov	r0, r4
 8009274:	f000 fe1c 	bl	8009eb0 <_calloc_r>
 8009278:	b160      	cbz	r0, 8009294 <_Balloc+0x64>
 800927a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800927e:	e00e      	b.n	800929e <_Balloc+0x6e>
 8009280:	2221      	movs	r2, #33	@ 0x21
 8009282:	2104      	movs	r1, #4
 8009284:	4620      	mov	r0, r4
 8009286:	f000 fe13 	bl	8009eb0 <_calloc_r>
 800928a:	69e3      	ldr	r3, [r4, #28]
 800928c:	60f0      	str	r0, [r6, #12]
 800928e:	68db      	ldr	r3, [r3, #12]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d1e4      	bne.n	800925e <_Balloc+0x2e>
 8009294:	2000      	movs	r0, #0
 8009296:	bd70      	pop	{r4, r5, r6, pc}
 8009298:	6802      	ldr	r2, [r0, #0]
 800929a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800929e:	2300      	movs	r3, #0
 80092a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80092a4:	e7f7      	b.n	8009296 <_Balloc+0x66>
 80092a6:	bf00      	nop
 80092a8:	0801e065 	.word	0x0801e065
 80092ac:	0801e0e5 	.word	0x0801e0e5

080092b0 <_Bfree>:
 80092b0:	b570      	push	{r4, r5, r6, lr}
 80092b2:	69c6      	ldr	r6, [r0, #28]
 80092b4:	4605      	mov	r5, r0
 80092b6:	460c      	mov	r4, r1
 80092b8:	b976      	cbnz	r6, 80092d8 <_Bfree+0x28>
 80092ba:	2010      	movs	r0, #16
 80092bc:	f7ff ff02 	bl	80090c4 <malloc>
 80092c0:	4602      	mov	r2, r0
 80092c2:	61e8      	str	r0, [r5, #28]
 80092c4:	b920      	cbnz	r0, 80092d0 <_Bfree+0x20>
 80092c6:	4b09      	ldr	r3, [pc, #36]	@ (80092ec <_Bfree+0x3c>)
 80092c8:	4809      	ldr	r0, [pc, #36]	@ (80092f0 <_Bfree+0x40>)
 80092ca:	218f      	movs	r1, #143	@ 0x8f
 80092cc:	f000 fdd2 	bl	8009e74 <__assert_func>
 80092d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80092d4:	6006      	str	r6, [r0, #0]
 80092d6:	60c6      	str	r6, [r0, #12]
 80092d8:	b13c      	cbz	r4, 80092ea <_Bfree+0x3a>
 80092da:	69eb      	ldr	r3, [r5, #28]
 80092dc:	6862      	ldr	r2, [r4, #4]
 80092de:	68db      	ldr	r3, [r3, #12]
 80092e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80092e4:	6021      	str	r1, [r4, #0]
 80092e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80092ea:	bd70      	pop	{r4, r5, r6, pc}
 80092ec:	0801e065 	.word	0x0801e065
 80092f0:	0801e0e5 	.word	0x0801e0e5

080092f4 <__multadd>:
 80092f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092f8:	690d      	ldr	r5, [r1, #16]
 80092fa:	4607      	mov	r7, r0
 80092fc:	460c      	mov	r4, r1
 80092fe:	461e      	mov	r6, r3
 8009300:	f101 0c14 	add.w	ip, r1, #20
 8009304:	2000      	movs	r0, #0
 8009306:	f8dc 3000 	ldr.w	r3, [ip]
 800930a:	b299      	uxth	r1, r3
 800930c:	fb02 6101 	mla	r1, r2, r1, r6
 8009310:	0c1e      	lsrs	r6, r3, #16
 8009312:	0c0b      	lsrs	r3, r1, #16
 8009314:	fb02 3306 	mla	r3, r2, r6, r3
 8009318:	b289      	uxth	r1, r1
 800931a:	3001      	adds	r0, #1
 800931c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009320:	4285      	cmp	r5, r0
 8009322:	f84c 1b04 	str.w	r1, [ip], #4
 8009326:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800932a:	dcec      	bgt.n	8009306 <__multadd+0x12>
 800932c:	b30e      	cbz	r6, 8009372 <__multadd+0x7e>
 800932e:	68a3      	ldr	r3, [r4, #8]
 8009330:	42ab      	cmp	r3, r5
 8009332:	dc19      	bgt.n	8009368 <__multadd+0x74>
 8009334:	6861      	ldr	r1, [r4, #4]
 8009336:	4638      	mov	r0, r7
 8009338:	3101      	adds	r1, #1
 800933a:	f7ff ff79 	bl	8009230 <_Balloc>
 800933e:	4680      	mov	r8, r0
 8009340:	b928      	cbnz	r0, 800934e <__multadd+0x5a>
 8009342:	4602      	mov	r2, r0
 8009344:	4b0c      	ldr	r3, [pc, #48]	@ (8009378 <__multadd+0x84>)
 8009346:	480d      	ldr	r0, [pc, #52]	@ (800937c <__multadd+0x88>)
 8009348:	21ba      	movs	r1, #186	@ 0xba
 800934a:	f000 fd93 	bl	8009e74 <__assert_func>
 800934e:	6922      	ldr	r2, [r4, #16]
 8009350:	3202      	adds	r2, #2
 8009352:	f104 010c 	add.w	r1, r4, #12
 8009356:	0092      	lsls	r2, r2, #2
 8009358:	300c      	adds	r0, #12
 800935a:	f000 fd7d 	bl	8009e58 <memcpy>
 800935e:	4621      	mov	r1, r4
 8009360:	4638      	mov	r0, r7
 8009362:	f7ff ffa5 	bl	80092b0 <_Bfree>
 8009366:	4644      	mov	r4, r8
 8009368:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800936c:	3501      	adds	r5, #1
 800936e:	615e      	str	r6, [r3, #20]
 8009370:	6125      	str	r5, [r4, #16]
 8009372:	4620      	mov	r0, r4
 8009374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009378:	0801e0d4 	.word	0x0801e0d4
 800937c:	0801e0e5 	.word	0x0801e0e5

08009380 <__hi0bits>:
 8009380:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009384:	4603      	mov	r3, r0
 8009386:	bf36      	itet	cc
 8009388:	0403      	lslcc	r3, r0, #16
 800938a:	2000      	movcs	r0, #0
 800938c:	2010      	movcc	r0, #16
 800938e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009392:	bf3c      	itt	cc
 8009394:	021b      	lslcc	r3, r3, #8
 8009396:	3008      	addcc	r0, #8
 8009398:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800939c:	bf3c      	itt	cc
 800939e:	011b      	lslcc	r3, r3, #4
 80093a0:	3004      	addcc	r0, #4
 80093a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093a6:	bf3c      	itt	cc
 80093a8:	009b      	lslcc	r3, r3, #2
 80093aa:	3002      	addcc	r0, #2
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	db05      	blt.n	80093bc <__hi0bits+0x3c>
 80093b0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80093b4:	f100 0001 	add.w	r0, r0, #1
 80093b8:	bf08      	it	eq
 80093ba:	2020      	moveq	r0, #32
 80093bc:	4770      	bx	lr

080093be <__lo0bits>:
 80093be:	6803      	ldr	r3, [r0, #0]
 80093c0:	4602      	mov	r2, r0
 80093c2:	f013 0007 	ands.w	r0, r3, #7
 80093c6:	d00b      	beq.n	80093e0 <__lo0bits+0x22>
 80093c8:	07d9      	lsls	r1, r3, #31
 80093ca:	d421      	bmi.n	8009410 <__lo0bits+0x52>
 80093cc:	0798      	lsls	r0, r3, #30
 80093ce:	bf49      	itett	mi
 80093d0:	085b      	lsrmi	r3, r3, #1
 80093d2:	089b      	lsrpl	r3, r3, #2
 80093d4:	2001      	movmi	r0, #1
 80093d6:	6013      	strmi	r3, [r2, #0]
 80093d8:	bf5c      	itt	pl
 80093da:	6013      	strpl	r3, [r2, #0]
 80093dc:	2002      	movpl	r0, #2
 80093de:	4770      	bx	lr
 80093e0:	b299      	uxth	r1, r3
 80093e2:	b909      	cbnz	r1, 80093e8 <__lo0bits+0x2a>
 80093e4:	0c1b      	lsrs	r3, r3, #16
 80093e6:	2010      	movs	r0, #16
 80093e8:	b2d9      	uxtb	r1, r3
 80093ea:	b909      	cbnz	r1, 80093f0 <__lo0bits+0x32>
 80093ec:	3008      	adds	r0, #8
 80093ee:	0a1b      	lsrs	r3, r3, #8
 80093f0:	0719      	lsls	r1, r3, #28
 80093f2:	bf04      	itt	eq
 80093f4:	091b      	lsreq	r3, r3, #4
 80093f6:	3004      	addeq	r0, #4
 80093f8:	0799      	lsls	r1, r3, #30
 80093fa:	bf04      	itt	eq
 80093fc:	089b      	lsreq	r3, r3, #2
 80093fe:	3002      	addeq	r0, #2
 8009400:	07d9      	lsls	r1, r3, #31
 8009402:	d403      	bmi.n	800940c <__lo0bits+0x4e>
 8009404:	085b      	lsrs	r3, r3, #1
 8009406:	f100 0001 	add.w	r0, r0, #1
 800940a:	d003      	beq.n	8009414 <__lo0bits+0x56>
 800940c:	6013      	str	r3, [r2, #0]
 800940e:	4770      	bx	lr
 8009410:	2000      	movs	r0, #0
 8009412:	4770      	bx	lr
 8009414:	2020      	movs	r0, #32
 8009416:	4770      	bx	lr

08009418 <__i2b>:
 8009418:	b510      	push	{r4, lr}
 800941a:	460c      	mov	r4, r1
 800941c:	2101      	movs	r1, #1
 800941e:	f7ff ff07 	bl	8009230 <_Balloc>
 8009422:	4602      	mov	r2, r0
 8009424:	b928      	cbnz	r0, 8009432 <__i2b+0x1a>
 8009426:	4b05      	ldr	r3, [pc, #20]	@ (800943c <__i2b+0x24>)
 8009428:	4805      	ldr	r0, [pc, #20]	@ (8009440 <__i2b+0x28>)
 800942a:	f240 1145 	movw	r1, #325	@ 0x145
 800942e:	f000 fd21 	bl	8009e74 <__assert_func>
 8009432:	2301      	movs	r3, #1
 8009434:	6144      	str	r4, [r0, #20]
 8009436:	6103      	str	r3, [r0, #16]
 8009438:	bd10      	pop	{r4, pc}
 800943a:	bf00      	nop
 800943c:	0801e0d4 	.word	0x0801e0d4
 8009440:	0801e0e5 	.word	0x0801e0e5

08009444 <__multiply>:
 8009444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009448:	4614      	mov	r4, r2
 800944a:	690a      	ldr	r2, [r1, #16]
 800944c:	6923      	ldr	r3, [r4, #16]
 800944e:	429a      	cmp	r2, r3
 8009450:	bfa8      	it	ge
 8009452:	4623      	movge	r3, r4
 8009454:	460f      	mov	r7, r1
 8009456:	bfa4      	itt	ge
 8009458:	460c      	movge	r4, r1
 800945a:	461f      	movge	r7, r3
 800945c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009460:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009464:	68a3      	ldr	r3, [r4, #8]
 8009466:	6861      	ldr	r1, [r4, #4]
 8009468:	eb0a 0609 	add.w	r6, sl, r9
 800946c:	42b3      	cmp	r3, r6
 800946e:	b085      	sub	sp, #20
 8009470:	bfb8      	it	lt
 8009472:	3101      	addlt	r1, #1
 8009474:	f7ff fedc 	bl	8009230 <_Balloc>
 8009478:	b930      	cbnz	r0, 8009488 <__multiply+0x44>
 800947a:	4602      	mov	r2, r0
 800947c:	4b44      	ldr	r3, [pc, #272]	@ (8009590 <__multiply+0x14c>)
 800947e:	4845      	ldr	r0, [pc, #276]	@ (8009594 <__multiply+0x150>)
 8009480:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009484:	f000 fcf6 	bl	8009e74 <__assert_func>
 8009488:	f100 0514 	add.w	r5, r0, #20
 800948c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009490:	462b      	mov	r3, r5
 8009492:	2200      	movs	r2, #0
 8009494:	4543      	cmp	r3, r8
 8009496:	d321      	bcc.n	80094dc <__multiply+0x98>
 8009498:	f107 0114 	add.w	r1, r7, #20
 800949c:	f104 0214 	add.w	r2, r4, #20
 80094a0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80094a4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80094a8:	9302      	str	r3, [sp, #8]
 80094aa:	1b13      	subs	r3, r2, r4
 80094ac:	3b15      	subs	r3, #21
 80094ae:	f023 0303 	bic.w	r3, r3, #3
 80094b2:	3304      	adds	r3, #4
 80094b4:	f104 0715 	add.w	r7, r4, #21
 80094b8:	42ba      	cmp	r2, r7
 80094ba:	bf38      	it	cc
 80094bc:	2304      	movcc	r3, #4
 80094be:	9301      	str	r3, [sp, #4]
 80094c0:	9b02      	ldr	r3, [sp, #8]
 80094c2:	9103      	str	r1, [sp, #12]
 80094c4:	428b      	cmp	r3, r1
 80094c6:	d80c      	bhi.n	80094e2 <__multiply+0x9e>
 80094c8:	2e00      	cmp	r6, #0
 80094ca:	dd03      	ble.n	80094d4 <__multiply+0x90>
 80094cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d05b      	beq.n	800958c <__multiply+0x148>
 80094d4:	6106      	str	r6, [r0, #16]
 80094d6:	b005      	add	sp, #20
 80094d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094dc:	f843 2b04 	str.w	r2, [r3], #4
 80094e0:	e7d8      	b.n	8009494 <__multiply+0x50>
 80094e2:	f8b1 a000 	ldrh.w	sl, [r1]
 80094e6:	f1ba 0f00 	cmp.w	sl, #0
 80094ea:	d024      	beq.n	8009536 <__multiply+0xf2>
 80094ec:	f104 0e14 	add.w	lr, r4, #20
 80094f0:	46a9      	mov	r9, r5
 80094f2:	f04f 0c00 	mov.w	ip, #0
 80094f6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80094fa:	f8d9 3000 	ldr.w	r3, [r9]
 80094fe:	fa1f fb87 	uxth.w	fp, r7
 8009502:	b29b      	uxth	r3, r3
 8009504:	fb0a 330b 	mla	r3, sl, fp, r3
 8009508:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800950c:	f8d9 7000 	ldr.w	r7, [r9]
 8009510:	4463      	add	r3, ip
 8009512:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009516:	fb0a c70b 	mla	r7, sl, fp, ip
 800951a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800951e:	b29b      	uxth	r3, r3
 8009520:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009524:	4572      	cmp	r2, lr
 8009526:	f849 3b04 	str.w	r3, [r9], #4
 800952a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800952e:	d8e2      	bhi.n	80094f6 <__multiply+0xb2>
 8009530:	9b01      	ldr	r3, [sp, #4]
 8009532:	f845 c003 	str.w	ip, [r5, r3]
 8009536:	9b03      	ldr	r3, [sp, #12]
 8009538:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800953c:	3104      	adds	r1, #4
 800953e:	f1b9 0f00 	cmp.w	r9, #0
 8009542:	d021      	beq.n	8009588 <__multiply+0x144>
 8009544:	682b      	ldr	r3, [r5, #0]
 8009546:	f104 0c14 	add.w	ip, r4, #20
 800954a:	46ae      	mov	lr, r5
 800954c:	f04f 0a00 	mov.w	sl, #0
 8009550:	f8bc b000 	ldrh.w	fp, [ip]
 8009554:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009558:	fb09 770b 	mla	r7, r9, fp, r7
 800955c:	4457      	add	r7, sl
 800955e:	b29b      	uxth	r3, r3
 8009560:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009564:	f84e 3b04 	str.w	r3, [lr], #4
 8009568:	f85c 3b04 	ldr.w	r3, [ip], #4
 800956c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009570:	f8be 3000 	ldrh.w	r3, [lr]
 8009574:	fb09 330a 	mla	r3, r9, sl, r3
 8009578:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800957c:	4562      	cmp	r2, ip
 800957e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009582:	d8e5      	bhi.n	8009550 <__multiply+0x10c>
 8009584:	9f01      	ldr	r7, [sp, #4]
 8009586:	51eb      	str	r3, [r5, r7]
 8009588:	3504      	adds	r5, #4
 800958a:	e799      	b.n	80094c0 <__multiply+0x7c>
 800958c:	3e01      	subs	r6, #1
 800958e:	e79b      	b.n	80094c8 <__multiply+0x84>
 8009590:	0801e0d4 	.word	0x0801e0d4
 8009594:	0801e0e5 	.word	0x0801e0e5

08009598 <__pow5mult>:
 8009598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800959c:	4615      	mov	r5, r2
 800959e:	f012 0203 	ands.w	r2, r2, #3
 80095a2:	4607      	mov	r7, r0
 80095a4:	460e      	mov	r6, r1
 80095a6:	d007      	beq.n	80095b8 <__pow5mult+0x20>
 80095a8:	4c25      	ldr	r4, [pc, #148]	@ (8009640 <__pow5mult+0xa8>)
 80095aa:	3a01      	subs	r2, #1
 80095ac:	2300      	movs	r3, #0
 80095ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80095b2:	f7ff fe9f 	bl	80092f4 <__multadd>
 80095b6:	4606      	mov	r6, r0
 80095b8:	10ad      	asrs	r5, r5, #2
 80095ba:	d03d      	beq.n	8009638 <__pow5mult+0xa0>
 80095bc:	69fc      	ldr	r4, [r7, #28]
 80095be:	b97c      	cbnz	r4, 80095e0 <__pow5mult+0x48>
 80095c0:	2010      	movs	r0, #16
 80095c2:	f7ff fd7f 	bl	80090c4 <malloc>
 80095c6:	4602      	mov	r2, r0
 80095c8:	61f8      	str	r0, [r7, #28]
 80095ca:	b928      	cbnz	r0, 80095d8 <__pow5mult+0x40>
 80095cc:	4b1d      	ldr	r3, [pc, #116]	@ (8009644 <__pow5mult+0xac>)
 80095ce:	481e      	ldr	r0, [pc, #120]	@ (8009648 <__pow5mult+0xb0>)
 80095d0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80095d4:	f000 fc4e 	bl	8009e74 <__assert_func>
 80095d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80095dc:	6004      	str	r4, [r0, #0]
 80095de:	60c4      	str	r4, [r0, #12]
 80095e0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80095e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80095e8:	b94c      	cbnz	r4, 80095fe <__pow5mult+0x66>
 80095ea:	f240 2171 	movw	r1, #625	@ 0x271
 80095ee:	4638      	mov	r0, r7
 80095f0:	f7ff ff12 	bl	8009418 <__i2b>
 80095f4:	2300      	movs	r3, #0
 80095f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80095fa:	4604      	mov	r4, r0
 80095fc:	6003      	str	r3, [r0, #0]
 80095fe:	f04f 0900 	mov.w	r9, #0
 8009602:	07eb      	lsls	r3, r5, #31
 8009604:	d50a      	bpl.n	800961c <__pow5mult+0x84>
 8009606:	4631      	mov	r1, r6
 8009608:	4622      	mov	r2, r4
 800960a:	4638      	mov	r0, r7
 800960c:	f7ff ff1a 	bl	8009444 <__multiply>
 8009610:	4631      	mov	r1, r6
 8009612:	4680      	mov	r8, r0
 8009614:	4638      	mov	r0, r7
 8009616:	f7ff fe4b 	bl	80092b0 <_Bfree>
 800961a:	4646      	mov	r6, r8
 800961c:	106d      	asrs	r5, r5, #1
 800961e:	d00b      	beq.n	8009638 <__pow5mult+0xa0>
 8009620:	6820      	ldr	r0, [r4, #0]
 8009622:	b938      	cbnz	r0, 8009634 <__pow5mult+0x9c>
 8009624:	4622      	mov	r2, r4
 8009626:	4621      	mov	r1, r4
 8009628:	4638      	mov	r0, r7
 800962a:	f7ff ff0b 	bl	8009444 <__multiply>
 800962e:	6020      	str	r0, [r4, #0]
 8009630:	f8c0 9000 	str.w	r9, [r0]
 8009634:	4604      	mov	r4, r0
 8009636:	e7e4      	b.n	8009602 <__pow5mult+0x6a>
 8009638:	4630      	mov	r0, r6
 800963a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800963e:	bf00      	nop
 8009640:	0801e140 	.word	0x0801e140
 8009644:	0801e065 	.word	0x0801e065
 8009648:	0801e0e5 	.word	0x0801e0e5

0800964c <__lshift>:
 800964c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009650:	460c      	mov	r4, r1
 8009652:	6849      	ldr	r1, [r1, #4]
 8009654:	6923      	ldr	r3, [r4, #16]
 8009656:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800965a:	68a3      	ldr	r3, [r4, #8]
 800965c:	4607      	mov	r7, r0
 800965e:	4691      	mov	r9, r2
 8009660:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009664:	f108 0601 	add.w	r6, r8, #1
 8009668:	42b3      	cmp	r3, r6
 800966a:	db0b      	blt.n	8009684 <__lshift+0x38>
 800966c:	4638      	mov	r0, r7
 800966e:	f7ff fddf 	bl	8009230 <_Balloc>
 8009672:	4605      	mov	r5, r0
 8009674:	b948      	cbnz	r0, 800968a <__lshift+0x3e>
 8009676:	4602      	mov	r2, r0
 8009678:	4b28      	ldr	r3, [pc, #160]	@ (800971c <__lshift+0xd0>)
 800967a:	4829      	ldr	r0, [pc, #164]	@ (8009720 <__lshift+0xd4>)
 800967c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009680:	f000 fbf8 	bl	8009e74 <__assert_func>
 8009684:	3101      	adds	r1, #1
 8009686:	005b      	lsls	r3, r3, #1
 8009688:	e7ee      	b.n	8009668 <__lshift+0x1c>
 800968a:	2300      	movs	r3, #0
 800968c:	f100 0114 	add.w	r1, r0, #20
 8009690:	f100 0210 	add.w	r2, r0, #16
 8009694:	4618      	mov	r0, r3
 8009696:	4553      	cmp	r3, sl
 8009698:	db33      	blt.n	8009702 <__lshift+0xb6>
 800969a:	6920      	ldr	r0, [r4, #16]
 800969c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80096a0:	f104 0314 	add.w	r3, r4, #20
 80096a4:	f019 091f 	ands.w	r9, r9, #31
 80096a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80096ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80096b0:	d02b      	beq.n	800970a <__lshift+0xbe>
 80096b2:	f1c9 0e20 	rsb	lr, r9, #32
 80096b6:	468a      	mov	sl, r1
 80096b8:	2200      	movs	r2, #0
 80096ba:	6818      	ldr	r0, [r3, #0]
 80096bc:	fa00 f009 	lsl.w	r0, r0, r9
 80096c0:	4310      	orrs	r0, r2
 80096c2:	f84a 0b04 	str.w	r0, [sl], #4
 80096c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80096ca:	459c      	cmp	ip, r3
 80096cc:	fa22 f20e 	lsr.w	r2, r2, lr
 80096d0:	d8f3      	bhi.n	80096ba <__lshift+0x6e>
 80096d2:	ebac 0304 	sub.w	r3, ip, r4
 80096d6:	3b15      	subs	r3, #21
 80096d8:	f023 0303 	bic.w	r3, r3, #3
 80096dc:	3304      	adds	r3, #4
 80096de:	f104 0015 	add.w	r0, r4, #21
 80096e2:	4584      	cmp	ip, r0
 80096e4:	bf38      	it	cc
 80096e6:	2304      	movcc	r3, #4
 80096e8:	50ca      	str	r2, [r1, r3]
 80096ea:	b10a      	cbz	r2, 80096f0 <__lshift+0xa4>
 80096ec:	f108 0602 	add.w	r6, r8, #2
 80096f0:	3e01      	subs	r6, #1
 80096f2:	4638      	mov	r0, r7
 80096f4:	612e      	str	r6, [r5, #16]
 80096f6:	4621      	mov	r1, r4
 80096f8:	f7ff fdda 	bl	80092b0 <_Bfree>
 80096fc:	4628      	mov	r0, r5
 80096fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009702:	f842 0f04 	str.w	r0, [r2, #4]!
 8009706:	3301      	adds	r3, #1
 8009708:	e7c5      	b.n	8009696 <__lshift+0x4a>
 800970a:	3904      	subs	r1, #4
 800970c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009710:	f841 2f04 	str.w	r2, [r1, #4]!
 8009714:	459c      	cmp	ip, r3
 8009716:	d8f9      	bhi.n	800970c <__lshift+0xc0>
 8009718:	e7ea      	b.n	80096f0 <__lshift+0xa4>
 800971a:	bf00      	nop
 800971c:	0801e0d4 	.word	0x0801e0d4
 8009720:	0801e0e5 	.word	0x0801e0e5

08009724 <__mcmp>:
 8009724:	690a      	ldr	r2, [r1, #16]
 8009726:	4603      	mov	r3, r0
 8009728:	6900      	ldr	r0, [r0, #16]
 800972a:	1a80      	subs	r0, r0, r2
 800972c:	b530      	push	{r4, r5, lr}
 800972e:	d10e      	bne.n	800974e <__mcmp+0x2a>
 8009730:	3314      	adds	r3, #20
 8009732:	3114      	adds	r1, #20
 8009734:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009738:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800973c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009740:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009744:	4295      	cmp	r5, r2
 8009746:	d003      	beq.n	8009750 <__mcmp+0x2c>
 8009748:	d205      	bcs.n	8009756 <__mcmp+0x32>
 800974a:	f04f 30ff 	mov.w	r0, #4294967295
 800974e:	bd30      	pop	{r4, r5, pc}
 8009750:	42a3      	cmp	r3, r4
 8009752:	d3f3      	bcc.n	800973c <__mcmp+0x18>
 8009754:	e7fb      	b.n	800974e <__mcmp+0x2a>
 8009756:	2001      	movs	r0, #1
 8009758:	e7f9      	b.n	800974e <__mcmp+0x2a>
	...

0800975c <__mdiff>:
 800975c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009760:	4689      	mov	r9, r1
 8009762:	4606      	mov	r6, r0
 8009764:	4611      	mov	r1, r2
 8009766:	4648      	mov	r0, r9
 8009768:	4614      	mov	r4, r2
 800976a:	f7ff ffdb 	bl	8009724 <__mcmp>
 800976e:	1e05      	subs	r5, r0, #0
 8009770:	d112      	bne.n	8009798 <__mdiff+0x3c>
 8009772:	4629      	mov	r1, r5
 8009774:	4630      	mov	r0, r6
 8009776:	f7ff fd5b 	bl	8009230 <_Balloc>
 800977a:	4602      	mov	r2, r0
 800977c:	b928      	cbnz	r0, 800978a <__mdiff+0x2e>
 800977e:	4b3f      	ldr	r3, [pc, #252]	@ (800987c <__mdiff+0x120>)
 8009780:	f240 2137 	movw	r1, #567	@ 0x237
 8009784:	483e      	ldr	r0, [pc, #248]	@ (8009880 <__mdiff+0x124>)
 8009786:	f000 fb75 	bl	8009e74 <__assert_func>
 800978a:	2301      	movs	r3, #1
 800978c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009790:	4610      	mov	r0, r2
 8009792:	b003      	add	sp, #12
 8009794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009798:	bfbc      	itt	lt
 800979a:	464b      	movlt	r3, r9
 800979c:	46a1      	movlt	r9, r4
 800979e:	4630      	mov	r0, r6
 80097a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80097a4:	bfba      	itte	lt
 80097a6:	461c      	movlt	r4, r3
 80097a8:	2501      	movlt	r5, #1
 80097aa:	2500      	movge	r5, #0
 80097ac:	f7ff fd40 	bl	8009230 <_Balloc>
 80097b0:	4602      	mov	r2, r0
 80097b2:	b918      	cbnz	r0, 80097bc <__mdiff+0x60>
 80097b4:	4b31      	ldr	r3, [pc, #196]	@ (800987c <__mdiff+0x120>)
 80097b6:	f240 2145 	movw	r1, #581	@ 0x245
 80097ba:	e7e3      	b.n	8009784 <__mdiff+0x28>
 80097bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80097c0:	6926      	ldr	r6, [r4, #16]
 80097c2:	60c5      	str	r5, [r0, #12]
 80097c4:	f109 0310 	add.w	r3, r9, #16
 80097c8:	f109 0514 	add.w	r5, r9, #20
 80097cc:	f104 0e14 	add.w	lr, r4, #20
 80097d0:	f100 0b14 	add.w	fp, r0, #20
 80097d4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80097d8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80097dc:	9301      	str	r3, [sp, #4]
 80097de:	46d9      	mov	r9, fp
 80097e0:	f04f 0c00 	mov.w	ip, #0
 80097e4:	9b01      	ldr	r3, [sp, #4]
 80097e6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80097ea:	f853 af04 	ldr.w	sl, [r3, #4]!
 80097ee:	9301      	str	r3, [sp, #4]
 80097f0:	fa1f f38a 	uxth.w	r3, sl
 80097f4:	4619      	mov	r1, r3
 80097f6:	b283      	uxth	r3, r0
 80097f8:	1acb      	subs	r3, r1, r3
 80097fa:	0c00      	lsrs	r0, r0, #16
 80097fc:	4463      	add	r3, ip
 80097fe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009802:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009806:	b29b      	uxth	r3, r3
 8009808:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800980c:	4576      	cmp	r6, lr
 800980e:	f849 3b04 	str.w	r3, [r9], #4
 8009812:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009816:	d8e5      	bhi.n	80097e4 <__mdiff+0x88>
 8009818:	1b33      	subs	r3, r6, r4
 800981a:	3b15      	subs	r3, #21
 800981c:	f023 0303 	bic.w	r3, r3, #3
 8009820:	3415      	adds	r4, #21
 8009822:	3304      	adds	r3, #4
 8009824:	42a6      	cmp	r6, r4
 8009826:	bf38      	it	cc
 8009828:	2304      	movcc	r3, #4
 800982a:	441d      	add	r5, r3
 800982c:	445b      	add	r3, fp
 800982e:	461e      	mov	r6, r3
 8009830:	462c      	mov	r4, r5
 8009832:	4544      	cmp	r4, r8
 8009834:	d30e      	bcc.n	8009854 <__mdiff+0xf8>
 8009836:	f108 0103 	add.w	r1, r8, #3
 800983a:	1b49      	subs	r1, r1, r5
 800983c:	f021 0103 	bic.w	r1, r1, #3
 8009840:	3d03      	subs	r5, #3
 8009842:	45a8      	cmp	r8, r5
 8009844:	bf38      	it	cc
 8009846:	2100      	movcc	r1, #0
 8009848:	440b      	add	r3, r1
 800984a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800984e:	b191      	cbz	r1, 8009876 <__mdiff+0x11a>
 8009850:	6117      	str	r7, [r2, #16]
 8009852:	e79d      	b.n	8009790 <__mdiff+0x34>
 8009854:	f854 1b04 	ldr.w	r1, [r4], #4
 8009858:	46e6      	mov	lr, ip
 800985a:	0c08      	lsrs	r0, r1, #16
 800985c:	fa1c fc81 	uxtah	ip, ip, r1
 8009860:	4471      	add	r1, lr
 8009862:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009866:	b289      	uxth	r1, r1
 8009868:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800986c:	f846 1b04 	str.w	r1, [r6], #4
 8009870:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009874:	e7dd      	b.n	8009832 <__mdiff+0xd6>
 8009876:	3f01      	subs	r7, #1
 8009878:	e7e7      	b.n	800984a <__mdiff+0xee>
 800987a:	bf00      	nop
 800987c:	0801e0d4 	.word	0x0801e0d4
 8009880:	0801e0e5 	.word	0x0801e0e5

08009884 <__d2b>:
 8009884:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009888:	460f      	mov	r7, r1
 800988a:	2101      	movs	r1, #1
 800988c:	ec59 8b10 	vmov	r8, r9, d0
 8009890:	4616      	mov	r6, r2
 8009892:	f7ff fccd 	bl	8009230 <_Balloc>
 8009896:	4604      	mov	r4, r0
 8009898:	b930      	cbnz	r0, 80098a8 <__d2b+0x24>
 800989a:	4602      	mov	r2, r0
 800989c:	4b23      	ldr	r3, [pc, #140]	@ (800992c <__d2b+0xa8>)
 800989e:	4824      	ldr	r0, [pc, #144]	@ (8009930 <__d2b+0xac>)
 80098a0:	f240 310f 	movw	r1, #783	@ 0x30f
 80098a4:	f000 fae6 	bl	8009e74 <__assert_func>
 80098a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80098ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80098b0:	b10d      	cbz	r5, 80098b6 <__d2b+0x32>
 80098b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80098b6:	9301      	str	r3, [sp, #4]
 80098b8:	f1b8 0300 	subs.w	r3, r8, #0
 80098bc:	d023      	beq.n	8009906 <__d2b+0x82>
 80098be:	4668      	mov	r0, sp
 80098c0:	9300      	str	r3, [sp, #0]
 80098c2:	f7ff fd7c 	bl	80093be <__lo0bits>
 80098c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80098ca:	b1d0      	cbz	r0, 8009902 <__d2b+0x7e>
 80098cc:	f1c0 0320 	rsb	r3, r0, #32
 80098d0:	fa02 f303 	lsl.w	r3, r2, r3
 80098d4:	430b      	orrs	r3, r1
 80098d6:	40c2      	lsrs	r2, r0
 80098d8:	6163      	str	r3, [r4, #20]
 80098da:	9201      	str	r2, [sp, #4]
 80098dc:	9b01      	ldr	r3, [sp, #4]
 80098de:	61a3      	str	r3, [r4, #24]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	bf0c      	ite	eq
 80098e4:	2201      	moveq	r2, #1
 80098e6:	2202      	movne	r2, #2
 80098e8:	6122      	str	r2, [r4, #16]
 80098ea:	b1a5      	cbz	r5, 8009916 <__d2b+0x92>
 80098ec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80098f0:	4405      	add	r5, r0
 80098f2:	603d      	str	r5, [r7, #0]
 80098f4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80098f8:	6030      	str	r0, [r6, #0]
 80098fa:	4620      	mov	r0, r4
 80098fc:	b003      	add	sp, #12
 80098fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009902:	6161      	str	r1, [r4, #20]
 8009904:	e7ea      	b.n	80098dc <__d2b+0x58>
 8009906:	a801      	add	r0, sp, #4
 8009908:	f7ff fd59 	bl	80093be <__lo0bits>
 800990c:	9b01      	ldr	r3, [sp, #4]
 800990e:	6163      	str	r3, [r4, #20]
 8009910:	3020      	adds	r0, #32
 8009912:	2201      	movs	r2, #1
 8009914:	e7e8      	b.n	80098e8 <__d2b+0x64>
 8009916:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800991a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800991e:	6038      	str	r0, [r7, #0]
 8009920:	6918      	ldr	r0, [r3, #16]
 8009922:	f7ff fd2d 	bl	8009380 <__hi0bits>
 8009926:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800992a:	e7e5      	b.n	80098f8 <__d2b+0x74>
 800992c:	0801e0d4 	.word	0x0801e0d4
 8009930:	0801e0e5 	.word	0x0801e0e5

08009934 <__sfputc_r>:
 8009934:	6893      	ldr	r3, [r2, #8]
 8009936:	3b01      	subs	r3, #1
 8009938:	2b00      	cmp	r3, #0
 800993a:	b410      	push	{r4}
 800993c:	6093      	str	r3, [r2, #8]
 800993e:	da08      	bge.n	8009952 <__sfputc_r+0x1e>
 8009940:	6994      	ldr	r4, [r2, #24]
 8009942:	42a3      	cmp	r3, r4
 8009944:	db01      	blt.n	800994a <__sfputc_r+0x16>
 8009946:	290a      	cmp	r1, #10
 8009948:	d103      	bne.n	8009952 <__sfputc_r+0x1e>
 800994a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800994e:	f000 b9df 	b.w	8009d10 <__swbuf_r>
 8009952:	6813      	ldr	r3, [r2, #0]
 8009954:	1c58      	adds	r0, r3, #1
 8009956:	6010      	str	r0, [r2, #0]
 8009958:	7019      	strb	r1, [r3, #0]
 800995a:	4608      	mov	r0, r1
 800995c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009960:	4770      	bx	lr

08009962 <__sfputs_r>:
 8009962:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009964:	4606      	mov	r6, r0
 8009966:	460f      	mov	r7, r1
 8009968:	4614      	mov	r4, r2
 800996a:	18d5      	adds	r5, r2, r3
 800996c:	42ac      	cmp	r4, r5
 800996e:	d101      	bne.n	8009974 <__sfputs_r+0x12>
 8009970:	2000      	movs	r0, #0
 8009972:	e007      	b.n	8009984 <__sfputs_r+0x22>
 8009974:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009978:	463a      	mov	r2, r7
 800997a:	4630      	mov	r0, r6
 800997c:	f7ff ffda 	bl	8009934 <__sfputc_r>
 8009980:	1c43      	adds	r3, r0, #1
 8009982:	d1f3      	bne.n	800996c <__sfputs_r+0xa>
 8009984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009988 <_vfiprintf_r>:
 8009988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800998c:	460d      	mov	r5, r1
 800998e:	b09d      	sub	sp, #116	@ 0x74
 8009990:	4614      	mov	r4, r2
 8009992:	4698      	mov	r8, r3
 8009994:	4606      	mov	r6, r0
 8009996:	b118      	cbz	r0, 80099a0 <_vfiprintf_r+0x18>
 8009998:	6a03      	ldr	r3, [r0, #32]
 800999a:	b90b      	cbnz	r3, 80099a0 <_vfiprintf_r+0x18>
 800999c:	f7fe fbf0 	bl	8008180 <__sinit>
 80099a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80099a2:	07d9      	lsls	r1, r3, #31
 80099a4:	d405      	bmi.n	80099b2 <_vfiprintf_r+0x2a>
 80099a6:	89ab      	ldrh	r3, [r5, #12]
 80099a8:	059a      	lsls	r2, r3, #22
 80099aa:	d402      	bmi.n	80099b2 <_vfiprintf_r+0x2a>
 80099ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80099ae:	f7fe fcf0 	bl	8008392 <__retarget_lock_acquire_recursive>
 80099b2:	89ab      	ldrh	r3, [r5, #12]
 80099b4:	071b      	lsls	r3, r3, #28
 80099b6:	d501      	bpl.n	80099bc <_vfiprintf_r+0x34>
 80099b8:	692b      	ldr	r3, [r5, #16]
 80099ba:	b99b      	cbnz	r3, 80099e4 <_vfiprintf_r+0x5c>
 80099bc:	4629      	mov	r1, r5
 80099be:	4630      	mov	r0, r6
 80099c0:	f000 f9e4 	bl	8009d8c <__swsetup_r>
 80099c4:	b170      	cbz	r0, 80099e4 <_vfiprintf_r+0x5c>
 80099c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80099c8:	07dc      	lsls	r4, r3, #31
 80099ca:	d504      	bpl.n	80099d6 <_vfiprintf_r+0x4e>
 80099cc:	f04f 30ff 	mov.w	r0, #4294967295
 80099d0:	b01d      	add	sp, #116	@ 0x74
 80099d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099d6:	89ab      	ldrh	r3, [r5, #12]
 80099d8:	0598      	lsls	r0, r3, #22
 80099da:	d4f7      	bmi.n	80099cc <_vfiprintf_r+0x44>
 80099dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80099de:	f7fe fcd9 	bl	8008394 <__retarget_lock_release_recursive>
 80099e2:	e7f3      	b.n	80099cc <_vfiprintf_r+0x44>
 80099e4:	2300      	movs	r3, #0
 80099e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80099e8:	2320      	movs	r3, #32
 80099ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80099ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80099f2:	2330      	movs	r3, #48	@ 0x30
 80099f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009ba4 <_vfiprintf_r+0x21c>
 80099f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80099fc:	f04f 0901 	mov.w	r9, #1
 8009a00:	4623      	mov	r3, r4
 8009a02:	469a      	mov	sl, r3
 8009a04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a08:	b10a      	cbz	r2, 8009a0e <_vfiprintf_r+0x86>
 8009a0a:	2a25      	cmp	r2, #37	@ 0x25
 8009a0c:	d1f9      	bne.n	8009a02 <_vfiprintf_r+0x7a>
 8009a0e:	ebba 0b04 	subs.w	fp, sl, r4
 8009a12:	d00b      	beq.n	8009a2c <_vfiprintf_r+0xa4>
 8009a14:	465b      	mov	r3, fp
 8009a16:	4622      	mov	r2, r4
 8009a18:	4629      	mov	r1, r5
 8009a1a:	4630      	mov	r0, r6
 8009a1c:	f7ff ffa1 	bl	8009962 <__sfputs_r>
 8009a20:	3001      	adds	r0, #1
 8009a22:	f000 80a7 	beq.w	8009b74 <_vfiprintf_r+0x1ec>
 8009a26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a28:	445a      	add	r2, fp
 8009a2a:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a2c:	f89a 3000 	ldrb.w	r3, [sl]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	f000 809f 	beq.w	8009b74 <_vfiprintf_r+0x1ec>
 8009a36:	2300      	movs	r3, #0
 8009a38:	f04f 32ff 	mov.w	r2, #4294967295
 8009a3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a40:	f10a 0a01 	add.w	sl, sl, #1
 8009a44:	9304      	str	r3, [sp, #16]
 8009a46:	9307      	str	r3, [sp, #28]
 8009a48:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009a4c:	931a      	str	r3, [sp, #104]	@ 0x68
 8009a4e:	4654      	mov	r4, sl
 8009a50:	2205      	movs	r2, #5
 8009a52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a56:	4853      	ldr	r0, [pc, #332]	@ (8009ba4 <_vfiprintf_r+0x21c>)
 8009a58:	f7f6 fc3a 	bl	80002d0 <memchr>
 8009a5c:	9a04      	ldr	r2, [sp, #16]
 8009a5e:	b9d8      	cbnz	r0, 8009a98 <_vfiprintf_r+0x110>
 8009a60:	06d1      	lsls	r1, r2, #27
 8009a62:	bf44      	itt	mi
 8009a64:	2320      	movmi	r3, #32
 8009a66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a6a:	0713      	lsls	r3, r2, #28
 8009a6c:	bf44      	itt	mi
 8009a6e:	232b      	movmi	r3, #43	@ 0x2b
 8009a70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a74:	f89a 3000 	ldrb.w	r3, [sl]
 8009a78:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a7a:	d015      	beq.n	8009aa8 <_vfiprintf_r+0x120>
 8009a7c:	9a07      	ldr	r2, [sp, #28]
 8009a7e:	4654      	mov	r4, sl
 8009a80:	2000      	movs	r0, #0
 8009a82:	f04f 0c0a 	mov.w	ip, #10
 8009a86:	4621      	mov	r1, r4
 8009a88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a8c:	3b30      	subs	r3, #48	@ 0x30
 8009a8e:	2b09      	cmp	r3, #9
 8009a90:	d94b      	bls.n	8009b2a <_vfiprintf_r+0x1a2>
 8009a92:	b1b0      	cbz	r0, 8009ac2 <_vfiprintf_r+0x13a>
 8009a94:	9207      	str	r2, [sp, #28]
 8009a96:	e014      	b.n	8009ac2 <_vfiprintf_r+0x13a>
 8009a98:	eba0 0308 	sub.w	r3, r0, r8
 8009a9c:	fa09 f303 	lsl.w	r3, r9, r3
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	9304      	str	r3, [sp, #16]
 8009aa4:	46a2      	mov	sl, r4
 8009aa6:	e7d2      	b.n	8009a4e <_vfiprintf_r+0xc6>
 8009aa8:	9b03      	ldr	r3, [sp, #12]
 8009aaa:	1d19      	adds	r1, r3, #4
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	9103      	str	r1, [sp, #12]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	bfbb      	ittet	lt
 8009ab4:	425b      	neglt	r3, r3
 8009ab6:	f042 0202 	orrlt.w	r2, r2, #2
 8009aba:	9307      	strge	r3, [sp, #28]
 8009abc:	9307      	strlt	r3, [sp, #28]
 8009abe:	bfb8      	it	lt
 8009ac0:	9204      	strlt	r2, [sp, #16]
 8009ac2:	7823      	ldrb	r3, [r4, #0]
 8009ac4:	2b2e      	cmp	r3, #46	@ 0x2e
 8009ac6:	d10a      	bne.n	8009ade <_vfiprintf_r+0x156>
 8009ac8:	7863      	ldrb	r3, [r4, #1]
 8009aca:	2b2a      	cmp	r3, #42	@ 0x2a
 8009acc:	d132      	bne.n	8009b34 <_vfiprintf_r+0x1ac>
 8009ace:	9b03      	ldr	r3, [sp, #12]
 8009ad0:	1d1a      	adds	r2, r3, #4
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	9203      	str	r2, [sp, #12]
 8009ad6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009ada:	3402      	adds	r4, #2
 8009adc:	9305      	str	r3, [sp, #20]
 8009ade:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009bb4 <_vfiprintf_r+0x22c>
 8009ae2:	7821      	ldrb	r1, [r4, #0]
 8009ae4:	2203      	movs	r2, #3
 8009ae6:	4650      	mov	r0, sl
 8009ae8:	f7f6 fbf2 	bl	80002d0 <memchr>
 8009aec:	b138      	cbz	r0, 8009afe <_vfiprintf_r+0x176>
 8009aee:	9b04      	ldr	r3, [sp, #16]
 8009af0:	eba0 000a 	sub.w	r0, r0, sl
 8009af4:	2240      	movs	r2, #64	@ 0x40
 8009af6:	4082      	lsls	r2, r0
 8009af8:	4313      	orrs	r3, r2
 8009afa:	3401      	adds	r4, #1
 8009afc:	9304      	str	r3, [sp, #16]
 8009afe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b02:	4829      	ldr	r0, [pc, #164]	@ (8009ba8 <_vfiprintf_r+0x220>)
 8009b04:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009b08:	2206      	movs	r2, #6
 8009b0a:	f7f6 fbe1 	bl	80002d0 <memchr>
 8009b0e:	2800      	cmp	r0, #0
 8009b10:	d03f      	beq.n	8009b92 <_vfiprintf_r+0x20a>
 8009b12:	4b26      	ldr	r3, [pc, #152]	@ (8009bac <_vfiprintf_r+0x224>)
 8009b14:	bb1b      	cbnz	r3, 8009b5e <_vfiprintf_r+0x1d6>
 8009b16:	9b03      	ldr	r3, [sp, #12]
 8009b18:	3307      	adds	r3, #7
 8009b1a:	f023 0307 	bic.w	r3, r3, #7
 8009b1e:	3308      	adds	r3, #8
 8009b20:	9303      	str	r3, [sp, #12]
 8009b22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b24:	443b      	add	r3, r7
 8009b26:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b28:	e76a      	b.n	8009a00 <_vfiprintf_r+0x78>
 8009b2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b2e:	460c      	mov	r4, r1
 8009b30:	2001      	movs	r0, #1
 8009b32:	e7a8      	b.n	8009a86 <_vfiprintf_r+0xfe>
 8009b34:	2300      	movs	r3, #0
 8009b36:	3401      	adds	r4, #1
 8009b38:	9305      	str	r3, [sp, #20]
 8009b3a:	4619      	mov	r1, r3
 8009b3c:	f04f 0c0a 	mov.w	ip, #10
 8009b40:	4620      	mov	r0, r4
 8009b42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b46:	3a30      	subs	r2, #48	@ 0x30
 8009b48:	2a09      	cmp	r2, #9
 8009b4a:	d903      	bls.n	8009b54 <_vfiprintf_r+0x1cc>
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d0c6      	beq.n	8009ade <_vfiprintf_r+0x156>
 8009b50:	9105      	str	r1, [sp, #20]
 8009b52:	e7c4      	b.n	8009ade <_vfiprintf_r+0x156>
 8009b54:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b58:	4604      	mov	r4, r0
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	e7f0      	b.n	8009b40 <_vfiprintf_r+0x1b8>
 8009b5e:	ab03      	add	r3, sp, #12
 8009b60:	9300      	str	r3, [sp, #0]
 8009b62:	462a      	mov	r2, r5
 8009b64:	4b12      	ldr	r3, [pc, #72]	@ (8009bb0 <_vfiprintf_r+0x228>)
 8009b66:	a904      	add	r1, sp, #16
 8009b68:	4630      	mov	r0, r6
 8009b6a:	f7fd fec5 	bl	80078f8 <_printf_float>
 8009b6e:	4607      	mov	r7, r0
 8009b70:	1c78      	adds	r0, r7, #1
 8009b72:	d1d6      	bne.n	8009b22 <_vfiprintf_r+0x19a>
 8009b74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b76:	07d9      	lsls	r1, r3, #31
 8009b78:	d405      	bmi.n	8009b86 <_vfiprintf_r+0x1fe>
 8009b7a:	89ab      	ldrh	r3, [r5, #12]
 8009b7c:	059a      	lsls	r2, r3, #22
 8009b7e:	d402      	bmi.n	8009b86 <_vfiprintf_r+0x1fe>
 8009b80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b82:	f7fe fc07 	bl	8008394 <__retarget_lock_release_recursive>
 8009b86:	89ab      	ldrh	r3, [r5, #12]
 8009b88:	065b      	lsls	r3, r3, #25
 8009b8a:	f53f af1f 	bmi.w	80099cc <_vfiprintf_r+0x44>
 8009b8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b90:	e71e      	b.n	80099d0 <_vfiprintf_r+0x48>
 8009b92:	ab03      	add	r3, sp, #12
 8009b94:	9300      	str	r3, [sp, #0]
 8009b96:	462a      	mov	r2, r5
 8009b98:	4b05      	ldr	r3, [pc, #20]	@ (8009bb0 <_vfiprintf_r+0x228>)
 8009b9a:	a904      	add	r1, sp, #16
 8009b9c:	4630      	mov	r0, r6
 8009b9e:	f7fe f943 	bl	8007e28 <_printf_i>
 8009ba2:	e7e4      	b.n	8009b6e <_vfiprintf_r+0x1e6>
 8009ba4:	0801e240 	.word	0x0801e240
 8009ba8:	0801e24a 	.word	0x0801e24a
 8009bac:	080078f9 	.word	0x080078f9
 8009bb0:	08009963 	.word	0x08009963
 8009bb4:	0801e246 	.word	0x0801e246

08009bb8 <__sflush_r>:
 8009bb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bc0:	0716      	lsls	r6, r2, #28
 8009bc2:	4605      	mov	r5, r0
 8009bc4:	460c      	mov	r4, r1
 8009bc6:	d454      	bmi.n	8009c72 <__sflush_r+0xba>
 8009bc8:	684b      	ldr	r3, [r1, #4]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	dc02      	bgt.n	8009bd4 <__sflush_r+0x1c>
 8009bce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	dd48      	ble.n	8009c66 <__sflush_r+0xae>
 8009bd4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009bd6:	2e00      	cmp	r6, #0
 8009bd8:	d045      	beq.n	8009c66 <__sflush_r+0xae>
 8009bda:	2300      	movs	r3, #0
 8009bdc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009be0:	682f      	ldr	r7, [r5, #0]
 8009be2:	6a21      	ldr	r1, [r4, #32]
 8009be4:	602b      	str	r3, [r5, #0]
 8009be6:	d030      	beq.n	8009c4a <__sflush_r+0x92>
 8009be8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009bea:	89a3      	ldrh	r3, [r4, #12]
 8009bec:	0759      	lsls	r1, r3, #29
 8009bee:	d505      	bpl.n	8009bfc <__sflush_r+0x44>
 8009bf0:	6863      	ldr	r3, [r4, #4]
 8009bf2:	1ad2      	subs	r2, r2, r3
 8009bf4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009bf6:	b10b      	cbz	r3, 8009bfc <__sflush_r+0x44>
 8009bf8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009bfa:	1ad2      	subs	r2, r2, r3
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009c00:	6a21      	ldr	r1, [r4, #32]
 8009c02:	4628      	mov	r0, r5
 8009c04:	47b0      	blx	r6
 8009c06:	1c43      	adds	r3, r0, #1
 8009c08:	89a3      	ldrh	r3, [r4, #12]
 8009c0a:	d106      	bne.n	8009c1a <__sflush_r+0x62>
 8009c0c:	6829      	ldr	r1, [r5, #0]
 8009c0e:	291d      	cmp	r1, #29
 8009c10:	d82b      	bhi.n	8009c6a <__sflush_r+0xb2>
 8009c12:	4a2a      	ldr	r2, [pc, #168]	@ (8009cbc <__sflush_r+0x104>)
 8009c14:	410a      	asrs	r2, r1
 8009c16:	07d6      	lsls	r6, r2, #31
 8009c18:	d427      	bmi.n	8009c6a <__sflush_r+0xb2>
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	6062      	str	r2, [r4, #4]
 8009c1e:	04d9      	lsls	r1, r3, #19
 8009c20:	6922      	ldr	r2, [r4, #16]
 8009c22:	6022      	str	r2, [r4, #0]
 8009c24:	d504      	bpl.n	8009c30 <__sflush_r+0x78>
 8009c26:	1c42      	adds	r2, r0, #1
 8009c28:	d101      	bne.n	8009c2e <__sflush_r+0x76>
 8009c2a:	682b      	ldr	r3, [r5, #0]
 8009c2c:	b903      	cbnz	r3, 8009c30 <__sflush_r+0x78>
 8009c2e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009c30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c32:	602f      	str	r7, [r5, #0]
 8009c34:	b1b9      	cbz	r1, 8009c66 <__sflush_r+0xae>
 8009c36:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009c3a:	4299      	cmp	r1, r3
 8009c3c:	d002      	beq.n	8009c44 <__sflush_r+0x8c>
 8009c3e:	4628      	mov	r0, r5
 8009c40:	f7ff f9f6 	bl	8009030 <_free_r>
 8009c44:	2300      	movs	r3, #0
 8009c46:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c48:	e00d      	b.n	8009c66 <__sflush_r+0xae>
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	4628      	mov	r0, r5
 8009c4e:	47b0      	blx	r6
 8009c50:	4602      	mov	r2, r0
 8009c52:	1c50      	adds	r0, r2, #1
 8009c54:	d1c9      	bne.n	8009bea <__sflush_r+0x32>
 8009c56:	682b      	ldr	r3, [r5, #0]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d0c6      	beq.n	8009bea <__sflush_r+0x32>
 8009c5c:	2b1d      	cmp	r3, #29
 8009c5e:	d001      	beq.n	8009c64 <__sflush_r+0xac>
 8009c60:	2b16      	cmp	r3, #22
 8009c62:	d11e      	bne.n	8009ca2 <__sflush_r+0xea>
 8009c64:	602f      	str	r7, [r5, #0]
 8009c66:	2000      	movs	r0, #0
 8009c68:	e022      	b.n	8009cb0 <__sflush_r+0xf8>
 8009c6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c6e:	b21b      	sxth	r3, r3
 8009c70:	e01b      	b.n	8009caa <__sflush_r+0xf2>
 8009c72:	690f      	ldr	r7, [r1, #16]
 8009c74:	2f00      	cmp	r7, #0
 8009c76:	d0f6      	beq.n	8009c66 <__sflush_r+0xae>
 8009c78:	0793      	lsls	r3, r2, #30
 8009c7a:	680e      	ldr	r6, [r1, #0]
 8009c7c:	bf08      	it	eq
 8009c7e:	694b      	ldreq	r3, [r1, #20]
 8009c80:	600f      	str	r7, [r1, #0]
 8009c82:	bf18      	it	ne
 8009c84:	2300      	movne	r3, #0
 8009c86:	eba6 0807 	sub.w	r8, r6, r7
 8009c8a:	608b      	str	r3, [r1, #8]
 8009c8c:	f1b8 0f00 	cmp.w	r8, #0
 8009c90:	dde9      	ble.n	8009c66 <__sflush_r+0xae>
 8009c92:	6a21      	ldr	r1, [r4, #32]
 8009c94:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009c96:	4643      	mov	r3, r8
 8009c98:	463a      	mov	r2, r7
 8009c9a:	4628      	mov	r0, r5
 8009c9c:	47b0      	blx	r6
 8009c9e:	2800      	cmp	r0, #0
 8009ca0:	dc08      	bgt.n	8009cb4 <__sflush_r+0xfc>
 8009ca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ca6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009caa:	81a3      	strh	r3, [r4, #12]
 8009cac:	f04f 30ff 	mov.w	r0, #4294967295
 8009cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cb4:	4407      	add	r7, r0
 8009cb6:	eba8 0800 	sub.w	r8, r8, r0
 8009cba:	e7e7      	b.n	8009c8c <__sflush_r+0xd4>
 8009cbc:	dfbffffe 	.word	0xdfbffffe

08009cc0 <_fflush_r>:
 8009cc0:	b538      	push	{r3, r4, r5, lr}
 8009cc2:	690b      	ldr	r3, [r1, #16]
 8009cc4:	4605      	mov	r5, r0
 8009cc6:	460c      	mov	r4, r1
 8009cc8:	b913      	cbnz	r3, 8009cd0 <_fflush_r+0x10>
 8009cca:	2500      	movs	r5, #0
 8009ccc:	4628      	mov	r0, r5
 8009cce:	bd38      	pop	{r3, r4, r5, pc}
 8009cd0:	b118      	cbz	r0, 8009cda <_fflush_r+0x1a>
 8009cd2:	6a03      	ldr	r3, [r0, #32]
 8009cd4:	b90b      	cbnz	r3, 8009cda <_fflush_r+0x1a>
 8009cd6:	f7fe fa53 	bl	8008180 <__sinit>
 8009cda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d0f3      	beq.n	8009cca <_fflush_r+0xa>
 8009ce2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009ce4:	07d0      	lsls	r0, r2, #31
 8009ce6:	d404      	bmi.n	8009cf2 <_fflush_r+0x32>
 8009ce8:	0599      	lsls	r1, r3, #22
 8009cea:	d402      	bmi.n	8009cf2 <_fflush_r+0x32>
 8009cec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009cee:	f7fe fb50 	bl	8008392 <__retarget_lock_acquire_recursive>
 8009cf2:	4628      	mov	r0, r5
 8009cf4:	4621      	mov	r1, r4
 8009cf6:	f7ff ff5f 	bl	8009bb8 <__sflush_r>
 8009cfa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009cfc:	07da      	lsls	r2, r3, #31
 8009cfe:	4605      	mov	r5, r0
 8009d00:	d4e4      	bmi.n	8009ccc <_fflush_r+0xc>
 8009d02:	89a3      	ldrh	r3, [r4, #12]
 8009d04:	059b      	lsls	r3, r3, #22
 8009d06:	d4e1      	bmi.n	8009ccc <_fflush_r+0xc>
 8009d08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d0a:	f7fe fb43 	bl	8008394 <__retarget_lock_release_recursive>
 8009d0e:	e7dd      	b.n	8009ccc <_fflush_r+0xc>

08009d10 <__swbuf_r>:
 8009d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d12:	460e      	mov	r6, r1
 8009d14:	4614      	mov	r4, r2
 8009d16:	4605      	mov	r5, r0
 8009d18:	b118      	cbz	r0, 8009d22 <__swbuf_r+0x12>
 8009d1a:	6a03      	ldr	r3, [r0, #32]
 8009d1c:	b90b      	cbnz	r3, 8009d22 <__swbuf_r+0x12>
 8009d1e:	f7fe fa2f 	bl	8008180 <__sinit>
 8009d22:	69a3      	ldr	r3, [r4, #24]
 8009d24:	60a3      	str	r3, [r4, #8]
 8009d26:	89a3      	ldrh	r3, [r4, #12]
 8009d28:	071a      	lsls	r2, r3, #28
 8009d2a:	d501      	bpl.n	8009d30 <__swbuf_r+0x20>
 8009d2c:	6923      	ldr	r3, [r4, #16]
 8009d2e:	b943      	cbnz	r3, 8009d42 <__swbuf_r+0x32>
 8009d30:	4621      	mov	r1, r4
 8009d32:	4628      	mov	r0, r5
 8009d34:	f000 f82a 	bl	8009d8c <__swsetup_r>
 8009d38:	b118      	cbz	r0, 8009d42 <__swbuf_r+0x32>
 8009d3a:	f04f 37ff 	mov.w	r7, #4294967295
 8009d3e:	4638      	mov	r0, r7
 8009d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d42:	6823      	ldr	r3, [r4, #0]
 8009d44:	6922      	ldr	r2, [r4, #16]
 8009d46:	1a98      	subs	r0, r3, r2
 8009d48:	6963      	ldr	r3, [r4, #20]
 8009d4a:	b2f6      	uxtb	r6, r6
 8009d4c:	4283      	cmp	r3, r0
 8009d4e:	4637      	mov	r7, r6
 8009d50:	dc05      	bgt.n	8009d5e <__swbuf_r+0x4e>
 8009d52:	4621      	mov	r1, r4
 8009d54:	4628      	mov	r0, r5
 8009d56:	f7ff ffb3 	bl	8009cc0 <_fflush_r>
 8009d5a:	2800      	cmp	r0, #0
 8009d5c:	d1ed      	bne.n	8009d3a <__swbuf_r+0x2a>
 8009d5e:	68a3      	ldr	r3, [r4, #8]
 8009d60:	3b01      	subs	r3, #1
 8009d62:	60a3      	str	r3, [r4, #8]
 8009d64:	6823      	ldr	r3, [r4, #0]
 8009d66:	1c5a      	adds	r2, r3, #1
 8009d68:	6022      	str	r2, [r4, #0]
 8009d6a:	701e      	strb	r6, [r3, #0]
 8009d6c:	6962      	ldr	r2, [r4, #20]
 8009d6e:	1c43      	adds	r3, r0, #1
 8009d70:	429a      	cmp	r2, r3
 8009d72:	d004      	beq.n	8009d7e <__swbuf_r+0x6e>
 8009d74:	89a3      	ldrh	r3, [r4, #12]
 8009d76:	07db      	lsls	r3, r3, #31
 8009d78:	d5e1      	bpl.n	8009d3e <__swbuf_r+0x2e>
 8009d7a:	2e0a      	cmp	r6, #10
 8009d7c:	d1df      	bne.n	8009d3e <__swbuf_r+0x2e>
 8009d7e:	4621      	mov	r1, r4
 8009d80:	4628      	mov	r0, r5
 8009d82:	f7ff ff9d 	bl	8009cc0 <_fflush_r>
 8009d86:	2800      	cmp	r0, #0
 8009d88:	d0d9      	beq.n	8009d3e <__swbuf_r+0x2e>
 8009d8a:	e7d6      	b.n	8009d3a <__swbuf_r+0x2a>

08009d8c <__swsetup_r>:
 8009d8c:	b538      	push	{r3, r4, r5, lr}
 8009d8e:	4b29      	ldr	r3, [pc, #164]	@ (8009e34 <__swsetup_r+0xa8>)
 8009d90:	4605      	mov	r5, r0
 8009d92:	6818      	ldr	r0, [r3, #0]
 8009d94:	460c      	mov	r4, r1
 8009d96:	b118      	cbz	r0, 8009da0 <__swsetup_r+0x14>
 8009d98:	6a03      	ldr	r3, [r0, #32]
 8009d9a:	b90b      	cbnz	r3, 8009da0 <__swsetup_r+0x14>
 8009d9c:	f7fe f9f0 	bl	8008180 <__sinit>
 8009da0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009da4:	0719      	lsls	r1, r3, #28
 8009da6:	d422      	bmi.n	8009dee <__swsetup_r+0x62>
 8009da8:	06da      	lsls	r2, r3, #27
 8009daa:	d407      	bmi.n	8009dbc <__swsetup_r+0x30>
 8009dac:	2209      	movs	r2, #9
 8009dae:	602a      	str	r2, [r5, #0]
 8009db0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009db4:	81a3      	strh	r3, [r4, #12]
 8009db6:	f04f 30ff 	mov.w	r0, #4294967295
 8009dba:	e033      	b.n	8009e24 <__swsetup_r+0x98>
 8009dbc:	0758      	lsls	r0, r3, #29
 8009dbe:	d512      	bpl.n	8009de6 <__swsetup_r+0x5a>
 8009dc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009dc2:	b141      	cbz	r1, 8009dd6 <__swsetup_r+0x4a>
 8009dc4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009dc8:	4299      	cmp	r1, r3
 8009dca:	d002      	beq.n	8009dd2 <__swsetup_r+0x46>
 8009dcc:	4628      	mov	r0, r5
 8009dce:	f7ff f92f 	bl	8009030 <_free_r>
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	6363      	str	r3, [r4, #52]	@ 0x34
 8009dd6:	89a3      	ldrh	r3, [r4, #12]
 8009dd8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009ddc:	81a3      	strh	r3, [r4, #12]
 8009dde:	2300      	movs	r3, #0
 8009de0:	6063      	str	r3, [r4, #4]
 8009de2:	6923      	ldr	r3, [r4, #16]
 8009de4:	6023      	str	r3, [r4, #0]
 8009de6:	89a3      	ldrh	r3, [r4, #12]
 8009de8:	f043 0308 	orr.w	r3, r3, #8
 8009dec:	81a3      	strh	r3, [r4, #12]
 8009dee:	6923      	ldr	r3, [r4, #16]
 8009df0:	b94b      	cbnz	r3, 8009e06 <__swsetup_r+0x7a>
 8009df2:	89a3      	ldrh	r3, [r4, #12]
 8009df4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009df8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009dfc:	d003      	beq.n	8009e06 <__swsetup_r+0x7a>
 8009dfe:	4621      	mov	r1, r4
 8009e00:	4628      	mov	r0, r5
 8009e02:	f000 f8c1 	bl	8009f88 <__smakebuf_r>
 8009e06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e0a:	f013 0201 	ands.w	r2, r3, #1
 8009e0e:	d00a      	beq.n	8009e26 <__swsetup_r+0x9a>
 8009e10:	2200      	movs	r2, #0
 8009e12:	60a2      	str	r2, [r4, #8]
 8009e14:	6962      	ldr	r2, [r4, #20]
 8009e16:	4252      	negs	r2, r2
 8009e18:	61a2      	str	r2, [r4, #24]
 8009e1a:	6922      	ldr	r2, [r4, #16]
 8009e1c:	b942      	cbnz	r2, 8009e30 <__swsetup_r+0xa4>
 8009e1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009e22:	d1c5      	bne.n	8009db0 <__swsetup_r+0x24>
 8009e24:	bd38      	pop	{r3, r4, r5, pc}
 8009e26:	0799      	lsls	r1, r3, #30
 8009e28:	bf58      	it	pl
 8009e2a:	6962      	ldrpl	r2, [r4, #20]
 8009e2c:	60a2      	str	r2, [r4, #8]
 8009e2e:	e7f4      	b.n	8009e1a <__swsetup_r+0x8e>
 8009e30:	2000      	movs	r0, #0
 8009e32:	e7f7      	b.n	8009e24 <__swsetup_r+0x98>
 8009e34:	20000018 	.word	0x20000018

08009e38 <_sbrk_r>:
 8009e38:	b538      	push	{r3, r4, r5, lr}
 8009e3a:	4d06      	ldr	r5, [pc, #24]	@ (8009e54 <_sbrk_r+0x1c>)
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	4604      	mov	r4, r0
 8009e40:	4608      	mov	r0, r1
 8009e42:	602b      	str	r3, [r5, #0]
 8009e44:	f7f8 fe96 	bl	8002b74 <_sbrk>
 8009e48:	1c43      	adds	r3, r0, #1
 8009e4a:	d102      	bne.n	8009e52 <_sbrk_r+0x1a>
 8009e4c:	682b      	ldr	r3, [r5, #0]
 8009e4e:	b103      	cbz	r3, 8009e52 <_sbrk_r+0x1a>
 8009e50:	6023      	str	r3, [r4, #0]
 8009e52:	bd38      	pop	{r3, r4, r5, pc}
 8009e54:	200022cc 	.word	0x200022cc

08009e58 <memcpy>:
 8009e58:	440a      	add	r2, r1
 8009e5a:	4291      	cmp	r1, r2
 8009e5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e60:	d100      	bne.n	8009e64 <memcpy+0xc>
 8009e62:	4770      	bx	lr
 8009e64:	b510      	push	{r4, lr}
 8009e66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e6e:	4291      	cmp	r1, r2
 8009e70:	d1f9      	bne.n	8009e66 <memcpy+0xe>
 8009e72:	bd10      	pop	{r4, pc}

08009e74 <__assert_func>:
 8009e74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e76:	4614      	mov	r4, r2
 8009e78:	461a      	mov	r2, r3
 8009e7a:	4b09      	ldr	r3, [pc, #36]	@ (8009ea0 <__assert_func+0x2c>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	4605      	mov	r5, r0
 8009e80:	68d8      	ldr	r0, [r3, #12]
 8009e82:	b954      	cbnz	r4, 8009e9a <__assert_func+0x26>
 8009e84:	4b07      	ldr	r3, [pc, #28]	@ (8009ea4 <__assert_func+0x30>)
 8009e86:	461c      	mov	r4, r3
 8009e88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e8c:	9100      	str	r1, [sp, #0]
 8009e8e:	462b      	mov	r3, r5
 8009e90:	4905      	ldr	r1, [pc, #20]	@ (8009ea8 <__assert_func+0x34>)
 8009e92:	f000 f841 	bl	8009f18 <fiprintf>
 8009e96:	f000 f8d5 	bl	800a044 <abort>
 8009e9a:	4b04      	ldr	r3, [pc, #16]	@ (8009eac <__assert_func+0x38>)
 8009e9c:	e7f4      	b.n	8009e88 <__assert_func+0x14>
 8009e9e:	bf00      	nop
 8009ea0:	20000018 	.word	0x20000018
 8009ea4:	0801e296 	.word	0x0801e296
 8009ea8:	0801e268 	.word	0x0801e268
 8009eac:	0801e25b 	.word	0x0801e25b

08009eb0 <_calloc_r>:
 8009eb0:	b570      	push	{r4, r5, r6, lr}
 8009eb2:	fba1 5402 	umull	r5, r4, r1, r2
 8009eb6:	b93c      	cbnz	r4, 8009ec8 <_calloc_r+0x18>
 8009eb8:	4629      	mov	r1, r5
 8009eba:	f7ff f92d 	bl	8009118 <_malloc_r>
 8009ebe:	4606      	mov	r6, r0
 8009ec0:	b928      	cbnz	r0, 8009ece <_calloc_r+0x1e>
 8009ec2:	2600      	movs	r6, #0
 8009ec4:	4630      	mov	r0, r6
 8009ec6:	bd70      	pop	{r4, r5, r6, pc}
 8009ec8:	220c      	movs	r2, #12
 8009eca:	6002      	str	r2, [r0, #0]
 8009ecc:	e7f9      	b.n	8009ec2 <_calloc_r+0x12>
 8009ece:	462a      	mov	r2, r5
 8009ed0:	4621      	mov	r1, r4
 8009ed2:	f7fe f9e0 	bl	8008296 <memset>
 8009ed6:	e7f5      	b.n	8009ec4 <_calloc_r+0x14>

08009ed8 <__ascii_mbtowc>:
 8009ed8:	b082      	sub	sp, #8
 8009eda:	b901      	cbnz	r1, 8009ede <__ascii_mbtowc+0x6>
 8009edc:	a901      	add	r1, sp, #4
 8009ede:	b142      	cbz	r2, 8009ef2 <__ascii_mbtowc+0x1a>
 8009ee0:	b14b      	cbz	r3, 8009ef6 <__ascii_mbtowc+0x1e>
 8009ee2:	7813      	ldrb	r3, [r2, #0]
 8009ee4:	600b      	str	r3, [r1, #0]
 8009ee6:	7812      	ldrb	r2, [r2, #0]
 8009ee8:	1e10      	subs	r0, r2, #0
 8009eea:	bf18      	it	ne
 8009eec:	2001      	movne	r0, #1
 8009eee:	b002      	add	sp, #8
 8009ef0:	4770      	bx	lr
 8009ef2:	4610      	mov	r0, r2
 8009ef4:	e7fb      	b.n	8009eee <__ascii_mbtowc+0x16>
 8009ef6:	f06f 0001 	mvn.w	r0, #1
 8009efa:	e7f8      	b.n	8009eee <__ascii_mbtowc+0x16>

08009efc <__ascii_wctomb>:
 8009efc:	4603      	mov	r3, r0
 8009efe:	4608      	mov	r0, r1
 8009f00:	b141      	cbz	r1, 8009f14 <__ascii_wctomb+0x18>
 8009f02:	2aff      	cmp	r2, #255	@ 0xff
 8009f04:	d904      	bls.n	8009f10 <__ascii_wctomb+0x14>
 8009f06:	228a      	movs	r2, #138	@ 0x8a
 8009f08:	601a      	str	r2, [r3, #0]
 8009f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f0e:	4770      	bx	lr
 8009f10:	700a      	strb	r2, [r1, #0]
 8009f12:	2001      	movs	r0, #1
 8009f14:	4770      	bx	lr
	...

08009f18 <fiprintf>:
 8009f18:	b40e      	push	{r1, r2, r3}
 8009f1a:	b503      	push	{r0, r1, lr}
 8009f1c:	4601      	mov	r1, r0
 8009f1e:	ab03      	add	r3, sp, #12
 8009f20:	4805      	ldr	r0, [pc, #20]	@ (8009f38 <fiprintf+0x20>)
 8009f22:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f26:	6800      	ldr	r0, [r0, #0]
 8009f28:	9301      	str	r3, [sp, #4]
 8009f2a:	f7ff fd2d 	bl	8009988 <_vfiprintf_r>
 8009f2e:	b002      	add	sp, #8
 8009f30:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f34:	b003      	add	sp, #12
 8009f36:	4770      	bx	lr
 8009f38:	20000018 	.word	0x20000018

08009f3c <__swhatbuf_r>:
 8009f3c:	b570      	push	{r4, r5, r6, lr}
 8009f3e:	460c      	mov	r4, r1
 8009f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f44:	2900      	cmp	r1, #0
 8009f46:	b096      	sub	sp, #88	@ 0x58
 8009f48:	4615      	mov	r5, r2
 8009f4a:	461e      	mov	r6, r3
 8009f4c:	da0d      	bge.n	8009f6a <__swhatbuf_r+0x2e>
 8009f4e:	89a3      	ldrh	r3, [r4, #12]
 8009f50:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009f54:	f04f 0100 	mov.w	r1, #0
 8009f58:	bf14      	ite	ne
 8009f5a:	2340      	movne	r3, #64	@ 0x40
 8009f5c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009f60:	2000      	movs	r0, #0
 8009f62:	6031      	str	r1, [r6, #0]
 8009f64:	602b      	str	r3, [r5, #0]
 8009f66:	b016      	add	sp, #88	@ 0x58
 8009f68:	bd70      	pop	{r4, r5, r6, pc}
 8009f6a:	466a      	mov	r2, sp
 8009f6c:	f000 f848 	bl	800a000 <_fstat_r>
 8009f70:	2800      	cmp	r0, #0
 8009f72:	dbec      	blt.n	8009f4e <__swhatbuf_r+0x12>
 8009f74:	9901      	ldr	r1, [sp, #4]
 8009f76:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009f7a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009f7e:	4259      	negs	r1, r3
 8009f80:	4159      	adcs	r1, r3
 8009f82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f86:	e7eb      	b.n	8009f60 <__swhatbuf_r+0x24>

08009f88 <__smakebuf_r>:
 8009f88:	898b      	ldrh	r3, [r1, #12]
 8009f8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f8c:	079d      	lsls	r5, r3, #30
 8009f8e:	4606      	mov	r6, r0
 8009f90:	460c      	mov	r4, r1
 8009f92:	d507      	bpl.n	8009fa4 <__smakebuf_r+0x1c>
 8009f94:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009f98:	6023      	str	r3, [r4, #0]
 8009f9a:	6123      	str	r3, [r4, #16]
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	6163      	str	r3, [r4, #20]
 8009fa0:	b003      	add	sp, #12
 8009fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fa4:	ab01      	add	r3, sp, #4
 8009fa6:	466a      	mov	r2, sp
 8009fa8:	f7ff ffc8 	bl	8009f3c <__swhatbuf_r>
 8009fac:	9f00      	ldr	r7, [sp, #0]
 8009fae:	4605      	mov	r5, r0
 8009fb0:	4639      	mov	r1, r7
 8009fb2:	4630      	mov	r0, r6
 8009fb4:	f7ff f8b0 	bl	8009118 <_malloc_r>
 8009fb8:	b948      	cbnz	r0, 8009fce <__smakebuf_r+0x46>
 8009fba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fbe:	059a      	lsls	r2, r3, #22
 8009fc0:	d4ee      	bmi.n	8009fa0 <__smakebuf_r+0x18>
 8009fc2:	f023 0303 	bic.w	r3, r3, #3
 8009fc6:	f043 0302 	orr.w	r3, r3, #2
 8009fca:	81a3      	strh	r3, [r4, #12]
 8009fcc:	e7e2      	b.n	8009f94 <__smakebuf_r+0xc>
 8009fce:	89a3      	ldrh	r3, [r4, #12]
 8009fd0:	6020      	str	r0, [r4, #0]
 8009fd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fd6:	81a3      	strh	r3, [r4, #12]
 8009fd8:	9b01      	ldr	r3, [sp, #4]
 8009fda:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009fde:	b15b      	cbz	r3, 8009ff8 <__smakebuf_r+0x70>
 8009fe0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fe4:	4630      	mov	r0, r6
 8009fe6:	f000 f81d 	bl	800a024 <_isatty_r>
 8009fea:	b128      	cbz	r0, 8009ff8 <__smakebuf_r+0x70>
 8009fec:	89a3      	ldrh	r3, [r4, #12]
 8009fee:	f023 0303 	bic.w	r3, r3, #3
 8009ff2:	f043 0301 	orr.w	r3, r3, #1
 8009ff6:	81a3      	strh	r3, [r4, #12]
 8009ff8:	89a3      	ldrh	r3, [r4, #12]
 8009ffa:	431d      	orrs	r5, r3
 8009ffc:	81a5      	strh	r5, [r4, #12]
 8009ffe:	e7cf      	b.n	8009fa0 <__smakebuf_r+0x18>

0800a000 <_fstat_r>:
 800a000:	b538      	push	{r3, r4, r5, lr}
 800a002:	4d07      	ldr	r5, [pc, #28]	@ (800a020 <_fstat_r+0x20>)
 800a004:	2300      	movs	r3, #0
 800a006:	4604      	mov	r4, r0
 800a008:	4608      	mov	r0, r1
 800a00a:	4611      	mov	r1, r2
 800a00c:	602b      	str	r3, [r5, #0]
 800a00e:	f7f8 fd89 	bl	8002b24 <_fstat>
 800a012:	1c43      	adds	r3, r0, #1
 800a014:	d102      	bne.n	800a01c <_fstat_r+0x1c>
 800a016:	682b      	ldr	r3, [r5, #0]
 800a018:	b103      	cbz	r3, 800a01c <_fstat_r+0x1c>
 800a01a:	6023      	str	r3, [r4, #0]
 800a01c:	bd38      	pop	{r3, r4, r5, pc}
 800a01e:	bf00      	nop
 800a020:	200022cc 	.word	0x200022cc

0800a024 <_isatty_r>:
 800a024:	b538      	push	{r3, r4, r5, lr}
 800a026:	4d06      	ldr	r5, [pc, #24]	@ (800a040 <_isatty_r+0x1c>)
 800a028:	2300      	movs	r3, #0
 800a02a:	4604      	mov	r4, r0
 800a02c:	4608      	mov	r0, r1
 800a02e:	602b      	str	r3, [r5, #0]
 800a030:	f7f8 fd88 	bl	8002b44 <_isatty>
 800a034:	1c43      	adds	r3, r0, #1
 800a036:	d102      	bne.n	800a03e <_isatty_r+0x1a>
 800a038:	682b      	ldr	r3, [r5, #0]
 800a03a:	b103      	cbz	r3, 800a03e <_isatty_r+0x1a>
 800a03c:	6023      	str	r3, [r4, #0]
 800a03e:	bd38      	pop	{r3, r4, r5, pc}
 800a040:	200022cc 	.word	0x200022cc

0800a044 <abort>:
 800a044:	b508      	push	{r3, lr}
 800a046:	2006      	movs	r0, #6
 800a048:	f000 f82c 	bl	800a0a4 <raise>
 800a04c:	2001      	movs	r0, #1
 800a04e:	f7f8 fd35 	bl	8002abc <_exit>

0800a052 <_raise_r>:
 800a052:	291f      	cmp	r1, #31
 800a054:	b538      	push	{r3, r4, r5, lr}
 800a056:	4605      	mov	r5, r0
 800a058:	460c      	mov	r4, r1
 800a05a:	d904      	bls.n	800a066 <_raise_r+0x14>
 800a05c:	2316      	movs	r3, #22
 800a05e:	6003      	str	r3, [r0, #0]
 800a060:	f04f 30ff 	mov.w	r0, #4294967295
 800a064:	bd38      	pop	{r3, r4, r5, pc}
 800a066:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a068:	b112      	cbz	r2, 800a070 <_raise_r+0x1e>
 800a06a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a06e:	b94b      	cbnz	r3, 800a084 <_raise_r+0x32>
 800a070:	4628      	mov	r0, r5
 800a072:	f000 f831 	bl	800a0d8 <_getpid_r>
 800a076:	4622      	mov	r2, r4
 800a078:	4601      	mov	r1, r0
 800a07a:	4628      	mov	r0, r5
 800a07c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a080:	f000 b818 	b.w	800a0b4 <_kill_r>
 800a084:	2b01      	cmp	r3, #1
 800a086:	d00a      	beq.n	800a09e <_raise_r+0x4c>
 800a088:	1c59      	adds	r1, r3, #1
 800a08a:	d103      	bne.n	800a094 <_raise_r+0x42>
 800a08c:	2316      	movs	r3, #22
 800a08e:	6003      	str	r3, [r0, #0]
 800a090:	2001      	movs	r0, #1
 800a092:	e7e7      	b.n	800a064 <_raise_r+0x12>
 800a094:	2100      	movs	r1, #0
 800a096:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a09a:	4620      	mov	r0, r4
 800a09c:	4798      	blx	r3
 800a09e:	2000      	movs	r0, #0
 800a0a0:	e7e0      	b.n	800a064 <_raise_r+0x12>
	...

0800a0a4 <raise>:
 800a0a4:	4b02      	ldr	r3, [pc, #8]	@ (800a0b0 <raise+0xc>)
 800a0a6:	4601      	mov	r1, r0
 800a0a8:	6818      	ldr	r0, [r3, #0]
 800a0aa:	f7ff bfd2 	b.w	800a052 <_raise_r>
 800a0ae:	bf00      	nop
 800a0b0:	20000018 	.word	0x20000018

0800a0b4 <_kill_r>:
 800a0b4:	b538      	push	{r3, r4, r5, lr}
 800a0b6:	4d07      	ldr	r5, [pc, #28]	@ (800a0d4 <_kill_r+0x20>)
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	4604      	mov	r4, r0
 800a0bc:	4608      	mov	r0, r1
 800a0be:	4611      	mov	r1, r2
 800a0c0:	602b      	str	r3, [r5, #0]
 800a0c2:	f7f8 fceb 	bl	8002a9c <_kill>
 800a0c6:	1c43      	adds	r3, r0, #1
 800a0c8:	d102      	bne.n	800a0d0 <_kill_r+0x1c>
 800a0ca:	682b      	ldr	r3, [r5, #0]
 800a0cc:	b103      	cbz	r3, 800a0d0 <_kill_r+0x1c>
 800a0ce:	6023      	str	r3, [r4, #0]
 800a0d0:	bd38      	pop	{r3, r4, r5, pc}
 800a0d2:	bf00      	nop
 800a0d4:	200022cc 	.word	0x200022cc

0800a0d8 <_getpid_r>:
 800a0d8:	f7f8 bcd8 	b.w	8002a8c <_getpid>
 800a0dc:	0000      	movs	r0, r0
	...

0800a0e0 <log>:
 800a0e0:	b538      	push	{r3, r4, r5, lr}
 800a0e2:	ed2d 8b02 	vpush	{d8}
 800a0e6:	ec55 4b10 	vmov	r4, r5, d0
 800a0ea:	f000 f8a1 	bl	800a230 <__ieee754_log>
 800a0ee:	4622      	mov	r2, r4
 800a0f0:	462b      	mov	r3, r5
 800a0f2:	4620      	mov	r0, r4
 800a0f4:	4629      	mov	r1, r5
 800a0f6:	eeb0 8a40 	vmov.f32	s16, s0
 800a0fa:	eef0 8a60 	vmov.f32	s17, s1
 800a0fe:	f7f6 fd95 	bl	8000c2c <__aeabi_dcmpun>
 800a102:	b998      	cbnz	r0, 800a12c <log+0x4c>
 800a104:	2200      	movs	r2, #0
 800a106:	2300      	movs	r3, #0
 800a108:	4620      	mov	r0, r4
 800a10a:	4629      	mov	r1, r5
 800a10c:	f7f6 fd84 	bl	8000c18 <__aeabi_dcmpgt>
 800a110:	b960      	cbnz	r0, 800a12c <log+0x4c>
 800a112:	2200      	movs	r2, #0
 800a114:	2300      	movs	r3, #0
 800a116:	4620      	mov	r0, r4
 800a118:	4629      	mov	r1, r5
 800a11a:	f7f6 fd55 	bl	8000bc8 <__aeabi_dcmpeq>
 800a11e:	b160      	cbz	r0, 800a13a <log+0x5a>
 800a120:	f7fe f90c 	bl	800833c <__errno>
 800a124:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800a150 <log+0x70>
 800a128:	2322      	movs	r3, #34	@ 0x22
 800a12a:	6003      	str	r3, [r0, #0]
 800a12c:	eeb0 0a48 	vmov.f32	s0, s16
 800a130:	eef0 0a68 	vmov.f32	s1, s17
 800a134:	ecbd 8b02 	vpop	{d8}
 800a138:	bd38      	pop	{r3, r4, r5, pc}
 800a13a:	f7fe f8ff 	bl	800833c <__errno>
 800a13e:	ecbd 8b02 	vpop	{d8}
 800a142:	2321      	movs	r3, #33	@ 0x21
 800a144:	6003      	str	r3, [r0, #0]
 800a146:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a14a:	4803      	ldr	r0, [pc, #12]	@ (800a158 <log+0x78>)
 800a14c:	f000 b85c 	b.w	800a208 <nan>
 800a150:	00000000 	.word	0x00000000
 800a154:	fff00000 	.word	0xfff00000
 800a158:	0801e296 	.word	0x0801e296

0800a15c <asinf>:
 800a15c:	b508      	push	{r3, lr}
 800a15e:	ed2d 8b02 	vpush	{d8}
 800a162:	eeb0 8a40 	vmov.f32	s16, s0
 800a166:	f000 fa19 	bl	800a59c <__ieee754_asinf>
 800a16a:	eeb4 8a48 	vcmp.f32	s16, s16
 800a16e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a172:	eef0 8a40 	vmov.f32	s17, s0
 800a176:	d615      	bvs.n	800a1a4 <asinf+0x48>
 800a178:	eeb0 0a48 	vmov.f32	s0, s16
 800a17c:	f000 f83a 	bl	800a1f4 <fabsf>
 800a180:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800a184:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800a188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a18c:	dd0a      	ble.n	800a1a4 <asinf+0x48>
 800a18e:	f7fe f8d5 	bl	800833c <__errno>
 800a192:	ecbd 8b02 	vpop	{d8}
 800a196:	2321      	movs	r3, #33	@ 0x21
 800a198:	6003      	str	r3, [r0, #0]
 800a19a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a19e:	4804      	ldr	r0, [pc, #16]	@ (800a1b0 <asinf+0x54>)
 800a1a0:	f000 b83a 	b.w	800a218 <nanf>
 800a1a4:	eeb0 0a68 	vmov.f32	s0, s17
 800a1a8:	ecbd 8b02 	vpop	{d8}
 800a1ac:	bd08      	pop	{r3, pc}
 800a1ae:	bf00      	nop
 800a1b0:	0801e296 	.word	0x0801e296

0800a1b4 <atan2f>:
 800a1b4:	f000 bad8 	b.w	800a768 <__ieee754_atan2f>

0800a1b8 <sqrtf>:
 800a1b8:	b508      	push	{r3, lr}
 800a1ba:	ed2d 8b02 	vpush	{d8}
 800a1be:	eeb0 8a40 	vmov.f32	s16, s0
 800a1c2:	f000 f82f 	bl	800a224 <__ieee754_sqrtf>
 800a1c6:	eeb4 8a48 	vcmp.f32	s16, s16
 800a1ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1ce:	d60c      	bvs.n	800a1ea <sqrtf+0x32>
 800a1d0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800a1f0 <sqrtf+0x38>
 800a1d4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a1d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1dc:	d505      	bpl.n	800a1ea <sqrtf+0x32>
 800a1de:	f7fe f8ad 	bl	800833c <__errno>
 800a1e2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a1e6:	2321      	movs	r3, #33	@ 0x21
 800a1e8:	6003      	str	r3, [r0, #0]
 800a1ea:	ecbd 8b02 	vpop	{d8}
 800a1ee:	bd08      	pop	{r3, pc}
 800a1f0:	00000000 	.word	0x00000000

0800a1f4 <fabsf>:
 800a1f4:	ee10 3a10 	vmov	r3, s0
 800a1f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a1fc:	ee00 3a10 	vmov	s0, r3
 800a200:	4770      	bx	lr
 800a202:	0000      	movs	r0, r0
 800a204:	0000      	movs	r0, r0
	...

0800a208 <nan>:
 800a208:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a210 <nan+0x8>
 800a20c:	4770      	bx	lr
 800a20e:	bf00      	nop
 800a210:	00000000 	.word	0x00000000
 800a214:	7ff80000 	.word	0x7ff80000

0800a218 <nanf>:
 800a218:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a220 <nanf+0x8>
 800a21c:	4770      	bx	lr
 800a21e:	bf00      	nop
 800a220:	7fc00000 	.word	0x7fc00000

0800a224 <__ieee754_sqrtf>:
 800a224:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a228:	4770      	bx	lr
 800a22a:	0000      	movs	r0, r0
 800a22c:	0000      	movs	r0, r0
	...

0800a230 <__ieee754_log>:
 800a230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a234:	ec51 0b10 	vmov	r0, r1, d0
 800a238:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800a23c:	b087      	sub	sp, #28
 800a23e:	460d      	mov	r5, r1
 800a240:	da26      	bge.n	800a290 <__ieee754_log+0x60>
 800a242:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a246:	4303      	orrs	r3, r0
 800a248:	4602      	mov	r2, r0
 800a24a:	d10a      	bne.n	800a262 <__ieee754_log+0x32>
 800a24c:	49ce      	ldr	r1, [pc, #824]	@ (800a588 <__ieee754_log+0x358>)
 800a24e:	2200      	movs	r2, #0
 800a250:	2300      	movs	r3, #0
 800a252:	2000      	movs	r0, #0
 800a254:	f7f6 fb7a 	bl	800094c <__aeabi_ddiv>
 800a258:	ec41 0b10 	vmov	d0, r0, r1
 800a25c:	b007      	add	sp, #28
 800a25e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a262:	2900      	cmp	r1, #0
 800a264:	da05      	bge.n	800a272 <__ieee754_log+0x42>
 800a266:	460b      	mov	r3, r1
 800a268:	f7f6 f88e 	bl	8000388 <__aeabi_dsub>
 800a26c:	2200      	movs	r2, #0
 800a26e:	2300      	movs	r3, #0
 800a270:	e7f0      	b.n	800a254 <__ieee754_log+0x24>
 800a272:	4bc6      	ldr	r3, [pc, #792]	@ (800a58c <__ieee754_log+0x35c>)
 800a274:	2200      	movs	r2, #0
 800a276:	f7f6 fa3f 	bl	80006f8 <__aeabi_dmul>
 800a27a:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800a27e:	460d      	mov	r5, r1
 800a280:	4ac3      	ldr	r2, [pc, #780]	@ (800a590 <__ieee754_log+0x360>)
 800a282:	4295      	cmp	r5, r2
 800a284:	dd06      	ble.n	800a294 <__ieee754_log+0x64>
 800a286:	4602      	mov	r2, r0
 800a288:	460b      	mov	r3, r1
 800a28a:	f7f6 f87f 	bl	800038c <__adddf3>
 800a28e:	e7e3      	b.n	800a258 <__ieee754_log+0x28>
 800a290:	2300      	movs	r3, #0
 800a292:	e7f5      	b.n	800a280 <__ieee754_log+0x50>
 800a294:	152c      	asrs	r4, r5, #20
 800a296:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800a29a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800a29e:	441c      	add	r4, r3
 800a2a0:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800a2a4:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 800a2a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a2ac:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 800a2b0:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 800a2b4:	ea42 0105 	orr.w	r1, r2, r5
 800a2b8:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800a2bc:	2200      	movs	r2, #0
 800a2be:	4bb5      	ldr	r3, [pc, #724]	@ (800a594 <__ieee754_log+0x364>)
 800a2c0:	f7f6 f862 	bl	8000388 <__aeabi_dsub>
 800a2c4:	1cab      	adds	r3, r5, #2
 800a2c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a2ca:	2b02      	cmp	r3, #2
 800a2cc:	4682      	mov	sl, r0
 800a2ce:	468b      	mov	fp, r1
 800a2d0:	f04f 0200 	mov.w	r2, #0
 800a2d4:	dc53      	bgt.n	800a37e <__ieee754_log+0x14e>
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	f7f6 fc76 	bl	8000bc8 <__aeabi_dcmpeq>
 800a2dc:	b1d0      	cbz	r0, 800a314 <__ieee754_log+0xe4>
 800a2de:	2c00      	cmp	r4, #0
 800a2e0:	f000 8120 	beq.w	800a524 <__ieee754_log+0x2f4>
 800a2e4:	4620      	mov	r0, r4
 800a2e6:	f7f6 f99d 	bl	8000624 <__aeabi_i2d>
 800a2ea:	a391      	add	r3, pc, #580	@ (adr r3, 800a530 <__ieee754_log+0x300>)
 800a2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f0:	4606      	mov	r6, r0
 800a2f2:	460f      	mov	r7, r1
 800a2f4:	f7f6 fa00 	bl	80006f8 <__aeabi_dmul>
 800a2f8:	a38f      	add	r3, pc, #572	@ (adr r3, 800a538 <__ieee754_log+0x308>)
 800a2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2fe:	4604      	mov	r4, r0
 800a300:	460d      	mov	r5, r1
 800a302:	4630      	mov	r0, r6
 800a304:	4639      	mov	r1, r7
 800a306:	f7f6 f9f7 	bl	80006f8 <__aeabi_dmul>
 800a30a:	4602      	mov	r2, r0
 800a30c:	460b      	mov	r3, r1
 800a30e:	4620      	mov	r0, r4
 800a310:	4629      	mov	r1, r5
 800a312:	e7ba      	b.n	800a28a <__ieee754_log+0x5a>
 800a314:	a38a      	add	r3, pc, #552	@ (adr r3, 800a540 <__ieee754_log+0x310>)
 800a316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31a:	4650      	mov	r0, sl
 800a31c:	4659      	mov	r1, fp
 800a31e:	f7f6 f9eb 	bl	80006f8 <__aeabi_dmul>
 800a322:	4602      	mov	r2, r0
 800a324:	460b      	mov	r3, r1
 800a326:	2000      	movs	r0, #0
 800a328:	499b      	ldr	r1, [pc, #620]	@ (800a598 <__ieee754_log+0x368>)
 800a32a:	f7f6 f82d 	bl	8000388 <__aeabi_dsub>
 800a32e:	4652      	mov	r2, sl
 800a330:	4606      	mov	r6, r0
 800a332:	460f      	mov	r7, r1
 800a334:	465b      	mov	r3, fp
 800a336:	4650      	mov	r0, sl
 800a338:	4659      	mov	r1, fp
 800a33a:	f7f6 f9dd 	bl	80006f8 <__aeabi_dmul>
 800a33e:	4602      	mov	r2, r0
 800a340:	460b      	mov	r3, r1
 800a342:	4630      	mov	r0, r6
 800a344:	4639      	mov	r1, r7
 800a346:	f7f6 f9d7 	bl	80006f8 <__aeabi_dmul>
 800a34a:	4606      	mov	r6, r0
 800a34c:	460f      	mov	r7, r1
 800a34e:	b914      	cbnz	r4, 800a356 <__ieee754_log+0x126>
 800a350:	4632      	mov	r2, r6
 800a352:	463b      	mov	r3, r7
 800a354:	e0a0      	b.n	800a498 <__ieee754_log+0x268>
 800a356:	4620      	mov	r0, r4
 800a358:	f7f6 f964 	bl	8000624 <__aeabi_i2d>
 800a35c:	a374      	add	r3, pc, #464	@ (adr r3, 800a530 <__ieee754_log+0x300>)
 800a35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a362:	4680      	mov	r8, r0
 800a364:	4689      	mov	r9, r1
 800a366:	f7f6 f9c7 	bl	80006f8 <__aeabi_dmul>
 800a36a:	a373      	add	r3, pc, #460	@ (adr r3, 800a538 <__ieee754_log+0x308>)
 800a36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a370:	4604      	mov	r4, r0
 800a372:	460d      	mov	r5, r1
 800a374:	4640      	mov	r0, r8
 800a376:	4649      	mov	r1, r9
 800a378:	f7f6 f9be 	bl	80006f8 <__aeabi_dmul>
 800a37c:	e0a5      	b.n	800a4ca <__ieee754_log+0x29a>
 800a37e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a382:	f7f6 f803 	bl	800038c <__adddf3>
 800a386:	4602      	mov	r2, r0
 800a388:	460b      	mov	r3, r1
 800a38a:	4650      	mov	r0, sl
 800a38c:	4659      	mov	r1, fp
 800a38e:	f7f6 fadd 	bl	800094c <__aeabi_ddiv>
 800a392:	e9cd 0100 	strd	r0, r1, [sp]
 800a396:	4620      	mov	r0, r4
 800a398:	f7f6 f944 	bl	8000624 <__aeabi_i2d>
 800a39c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a3a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3a4:	4610      	mov	r0, r2
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	f7f6 f9a6 	bl	80006f8 <__aeabi_dmul>
 800a3ac:	4602      	mov	r2, r0
 800a3ae:	460b      	mov	r3, r1
 800a3b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a3b4:	f7f6 f9a0 	bl	80006f8 <__aeabi_dmul>
 800a3b8:	a363      	add	r3, pc, #396	@ (adr r3, 800a548 <__ieee754_log+0x318>)
 800a3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3be:	4680      	mov	r8, r0
 800a3c0:	4689      	mov	r9, r1
 800a3c2:	f7f6 f999 	bl	80006f8 <__aeabi_dmul>
 800a3c6:	a362      	add	r3, pc, #392	@ (adr r3, 800a550 <__ieee754_log+0x320>)
 800a3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3cc:	f7f5 ffde 	bl	800038c <__adddf3>
 800a3d0:	4642      	mov	r2, r8
 800a3d2:	464b      	mov	r3, r9
 800a3d4:	f7f6 f990 	bl	80006f8 <__aeabi_dmul>
 800a3d8:	a35f      	add	r3, pc, #380	@ (adr r3, 800a558 <__ieee754_log+0x328>)
 800a3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3de:	f7f5 ffd5 	bl	800038c <__adddf3>
 800a3e2:	4642      	mov	r2, r8
 800a3e4:	464b      	mov	r3, r9
 800a3e6:	f7f6 f987 	bl	80006f8 <__aeabi_dmul>
 800a3ea:	a35d      	add	r3, pc, #372	@ (adr r3, 800a560 <__ieee754_log+0x330>)
 800a3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f0:	f7f5 ffcc 	bl	800038c <__adddf3>
 800a3f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3f8:	f7f6 f97e 	bl	80006f8 <__aeabi_dmul>
 800a3fc:	a35a      	add	r3, pc, #360	@ (adr r3, 800a568 <__ieee754_log+0x338>)
 800a3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a402:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a406:	4640      	mov	r0, r8
 800a408:	4649      	mov	r1, r9
 800a40a:	f7f6 f975 	bl	80006f8 <__aeabi_dmul>
 800a40e:	a358      	add	r3, pc, #352	@ (adr r3, 800a570 <__ieee754_log+0x340>)
 800a410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a414:	f7f5 ffba 	bl	800038c <__adddf3>
 800a418:	4642      	mov	r2, r8
 800a41a:	464b      	mov	r3, r9
 800a41c:	f7f6 f96c 	bl	80006f8 <__aeabi_dmul>
 800a420:	a355      	add	r3, pc, #340	@ (adr r3, 800a578 <__ieee754_log+0x348>)
 800a422:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a426:	f7f5 ffb1 	bl	800038c <__adddf3>
 800a42a:	4642      	mov	r2, r8
 800a42c:	464b      	mov	r3, r9
 800a42e:	f7f6 f963 	bl	80006f8 <__aeabi_dmul>
 800a432:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800a436:	4602      	mov	r2, r0
 800a438:	460b      	mov	r3, r1
 800a43a:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800a43e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a442:	f7f5 ffa3 	bl	800038c <__adddf3>
 800a446:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800a44a:	3551      	adds	r5, #81	@ 0x51
 800a44c:	4335      	orrs	r5, r6
 800a44e:	2d00      	cmp	r5, #0
 800a450:	4680      	mov	r8, r0
 800a452:	4689      	mov	r9, r1
 800a454:	dd48      	ble.n	800a4e8 <__ieee754_log+0x2b8>
 800a456:	4b50      	ldr	r3, [pc, #320]	@ (800a598 <__ieee754_log+0x368>)
 800a458:	2200      	movs	r2, #0
 800a45a:	4650      	mov	r0, sl
 800a45c:	4659      	mov	r1, fp
 800a45e:	f7f6 f94b 	bl	80006f8 <__aeabi_dmul>
 800a462:	4652      	mov	r2, sl
 800a464:	465b      	mov	r3, fp
 800a466:	f7f6 f947 	bl	80006f8 <__aeabi_dmul>
 800a46a:	4602      	mov	r2, r0
 800a46c:	460b      	mov	r3, r1
 800a46e:	4606      	mov	r6, r0
 800a470:	460f      	mov	r7, r1
 800a472:	4640      	mov	r0, r8
 800a474:	4649      	mov	r1, r9
 800a476:	f7f5 ff89 	bl	800038c <__adddf3>
 800a47a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a47e:	f7f6 f93b 	bl	80006f8 <__aeabi_dmul>
 800a482:	4680      	mov	r8, r0
 800a484:	4689      	mov	r9, r1
 800a486:	b964      	cbnz	r4, 800a4a2 <__ieee754_log+0x272>
 800a488:	4602      	mov	r2, r0
 800a48a:	460b      	mov	r3, r1
 800a48c:	4630      	mov	r0, r6
 800a48e:	4639      	mov	r1, r7
 800a490:	f7f5 ff7a 	bl	8000388 <__aeabi_dsub>
 800a494:	4602      	mov	r2, r0
 800a496:	460b      	mov	r3, r1
 800a498:	4650      	mov	r0, sl
 800a49a:	4659      	mov	r1, fp
 800a49c:	f7f5 ff74 	bl	8000388 <__aeabi_dsub>
 800a4a0:	e6da      	b.n	800a258 <__ieee754_log+0x28>
 800a4a2:	a323      	add	r3, pc, #140	@ (adr r3, 800a530 <__ieee754_log+0x300>)
 800a4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4ac:	f7f6 f924 	bl	80006f8 <__aeabi_dmul>
 800a4b0:	a321      	add	r3, pc, #132	@ (adr r3, 800a538 <__ieee754_log+0x308>)
 800a4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b6:	4604      	mov	r4, r0
 800a4b8:	460d      	mov	r5, r1
 800a4ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4be:	f7f6 f91b 	bl	80006f8 <__aeabi_dmul>
 800a4c2:	4642      	mov	r2, r8
 800a4c4:	464b      	mov	r3, r9
 800a4c6:	f7f5 ff61 	bl	800038c <__adddf3>
 800a4ca:	4602      	mov	r2, r0
 800a4cc:	460b      	mov	r3, r1
 800a4ce:	4630      	mov	r0, r6
 800a4d0:	4639      	mov	r1, r7
 800a4d2:	f7f5 ff59 	bl	8000388 <__aeabi_dsub>
 800a4d6:	4652      	mov	r2, sl
 800a4d8:	465b      	mov	r3, fp
 800a4da:	f7f5 ff55 	bl	8000388 <__aeabi_dsub>
 800a4de:	4602      	mov	r2, r0
 800a4e0:	460b      	mov	r3, r1
 800a4e2:	4620      	mov	r0, r4
 800a4e4:	4629      	mov	r1, r5
 800a4e6:	e7d9      	b.n	800a49c <__ieee754_log+0x26c>
 800a4e8:	4602      	mov	r2, r0
 800a4ea:	460b      	mov	r3, r1
 800a4ec:	4650      	mov	r0, sl
 800a4ee:	4659      	mov	r1, fp
 800a4f0:	f7f5 ff4a 	bl	8000388 <__aeabi_dsub>
 800a4f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4f8:	f7f6 f8fe 	bl	80006f8 <__aeabi_dmul>
 800a4fc:	4606      	mov	r6, r0
 800a4fe:	460f      	mov	r7, r1
 800a500:	2c00      	cmp	r4, #0
 800a502:	f43f af25 	beq.w	800a350 <__ieee754_log+0x120>
 800a506:	a30a      	add	r3, pc, #40	@ (adr r3, 800a530 <__ieee754_log+0x300>)
 800a508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a50c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a510:	f7f6 f8f2 	bl	80006f8 <__aeabi_dmul>
 800a514:	a308      	add	r3, pc, #32	@ (adr r3, 800a538 <__ieee754_log+0x308>)
 800a516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51a:	4604      	mov	r4, r0
 800a51c:	460d      	mov	r5, r1
 800a51e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a522:	e729      	b.n	800a378 <__ieee754_log+0x148>
 800a524:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800a580 <__ieee754_log+0x350>
 800a528:	e698      	b.n	800a25c <__ieee754_log+0x2c>
 800a52a:	bf00      	nop
 800a52c:	f3af 8000 	nop.w
 800a530:	fee00000 	.word	0xfee00000
 800a534:	3fe62e42 	.word	0x3fe62e42
 800a538:	35793c76 	.word	0x35793c76
 800a53c:	3dea39ef 	.word	0x3dea39ef
 800a540:	55555555 	.word	0x55555555
 800a544:	3fd55555 	.word	0x3fd55555
 800a548:	df3e5244 	.word	0xdf3e5244
 800a54c:	3fc2f112 	.word	0x3fc2f112
 800a550:	96cb03de 	.word	0x96cb03de
 800a554:	3fc74664 	.word	0x3fc74664
 800a558:	94229359 	.word	0x94229359
 800a55c:	3fd24924 	.word	0x3fd24924
 800a560:	55555593 	.word	0x55555593
 800a564:	3fe55555 	.word	0x3fe55555
 800a568:	d078c69f 	.word	0xd078c69f
 800a56c:	3fc39a09 	.word	0x3fc39a09
 800a570:	1d8e78af 	.word	0x1d8e78af
 800a574:	3fcc71c5 	.word	0x3fcc71c5
 800a578:	9997fa04 	.word	0x9997fa04
 800a57c:	3fd99999 	.word	0x3fd99999
	...
 800a588:	c3500000 	.word	0xc3500000
 800a58c:	43500000 	.word	0x43500000
 800a590:	7fefffff 	.word	0x7fefffff
 800a594:	3ff00000 	.word	0x3ff00000
 800a598:	3fe00000 	.word	0x3fe00000

0800a59c <__ieee754_asinf>:
 800a59c:	b538      	push	{r3, r4, r5, lr}
 800a59e:	ee10 5a10 	vmov	r5, s0
 800a5a2:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800a5a6:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 800a5aa:	ed2d 8b04 	vpush	{d8-d9}
 800a5ae:	d10c      	bne.n	800a5ca <__ieee754_asinf+0x2e>
 800a5b0:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 800a728 <__ieee754_asinf+0x18c>
 800a5b4:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 800a72c <__ieee754_asinf+0x190>
 800a5b8:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a5bc:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a5c0:	eeb0 0a67 	vmov.f32	s0, s15
 800a5c4:	ecbd 8b04 	vpop	{d8-d9}
 800a5c8:	bd38      	pop	{r3, r4, r5, pc}
 800a5ca:	d904      	bls.n	800a5d6 <__ieee754_asinf+0x3a>
 800a5cc:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a5d0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800a5d4:	e7f6      	b.n	800a5c4 <__ieee754_asinf+0x28>
 800a5d6:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800a5da:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800a5de:	d20b      	bcs.n	800a5f8 <__ieee754_asinf+0x5c>
 800a5e0:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 800a5e4:	d252      	bcs.n	800a68c <__ieee754_asinf+0xf0>
 800a5e6:	eddf 7a52 	vldr	s15, [pc, #328]	@ 800a730 <__ieee754_asinf+0x194>
 800a5ea:	ee70 7a27 	vadd.f32	s15, s0, s15
 800a5ee:	eef4 7ae8 	vcmpe.f32	s15, s17
 800a5f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5f6:	dce5      	bgt.n	800a5c4 <__ieee754_asinf+0x28>
 800a5f8:	f7ff fdfc 	bl	800a1f4 <fabsf>
 800a5fc:	ee38 8ac0 	vsub.f32	s16, s17, s0
 800a600:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800a604:	ee28 8a27 	vmul.f32	s16, s16, s15
 800a608:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 800a734 <__ieee754_asinf+0x198>
 800a60c:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 800a738 <__ieee754_asinf+0x19c>
 800a610:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 800a73c <__ieee754_asinf+0x1a0>
 800a614:	eea8 7a27 	vfma.f32	s14, s16, s15
 800a618:	eddf 7a49 	vldr	s15, [pc, #292]	@ 800a740 <__ieee754_asinf+0x1a4>
 800a61c:	eee7 7a08 	vfma.f32	s15, s14, s16
 800a620:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800a744 <__ieee754_asinf+0x1a8>
 800a624:	eea7 7a88 	vfma.f32	s14, s15, s16
 800a628:	eddf 7a47 	vldr	s15, [pc, #284]	@ 800a748 <__ieee754_asinf+0x1ac>
 800a62c:	eee7 7a08 	vfma.f32	s15, s14, s16
 800a630:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 800a74c <__ieee754_asinf+0x1b0>
 800a634:	eea7 9a88 	vfma.f32	s18, s15, s16
 800a638:	eddf 7a45 	vldr	s15, [pc, #276]	@ 800a750 <__ieee754_asinf+0x1b4>
 800a63c:	eee8 7a07 	vfma.f32	s15, s16, s14
 800a640:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 800a754 <__ieee754_asinf+0x1b8>
 800a644:	eea7 7a88 	vfma.f32	s14, s15, s16
 800a648:	eddf 7a43 	vldr	s15, [pc, #268]	@ 800a758 <__ieee754_asinf+0x1bc>
 800a64c:	eee7 7a08 	vfma.f32	s15, s14, s16
 800a650:	eeb0 0a48 	vmov.f32	s0, s16
 800a654:	eee7 8a88 	vfma.f32	s17, s15, s16
 800a658:	f7ff fde4 	bl	800a224 <__ieee754_sqrtf>
 800a65c:	4b3f      	ldr	r3, [pc, #252]	@ (800a75c <__ieee754_asinf+0x1c0>)
 800a65e:	ee29 9a08 	vmul.f32	s18, s18, s16
 800a662:	429c      	cmp	r4, r3
 800a664:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800a668:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800a66c:	d93d      	bls.n	800a6ea <__ieee754_asinf+0x14e>
 800a66e:	eea0 0a06 	vfma.f32	s0, s0, s12
 800a672:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 800a760 <__ieee754_asinf+0x1c4>
 800a676:	eee0 7a26 	vfma.f32	s15, s0, s13
 800a67a:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 800a72c <__ieee754_asinf+0x190>
 800a67e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a682:	2d00      	cmp	r5, #0
 800a684:	bfd8      	it	le
 800a686:	eeb1 0a40 	vnegle.f32	s0, s0
 800a68a:	e79b      	b.n	800a5c4 <__ieee754_asinf+0x28>
 800a68c:	ee60 7a00 	vmul.f32	s15, s0, s0
 800a690:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800a738 <__ieee754_asinf+0x19c>
 800a694:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 800a734 <__ieee754_asinf+0x198>
 800a698:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 800a74c <__ieee754_asinf+0x1b0>
 800a69c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800a6a0:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800a740 <__ieee754_asinf+0x1a4>
 800a6a4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a6a8:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800a744 <__ieee754_asinf+0x1a8>
 800a6ac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a6b0:	eddf 6a25 	vldr	s13, [pc, #148]	@ 800a748 <__ieee754_asinf+0x1ac>
 800a6b4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a6b8:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800a73c <__ieee754_asinf+0x1a0>
 800a6bc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a6c0:	eddf 6a23 	vldr	s13, [pc, #140]	@ 800a750 <__ieee754_asinf+0x1b4>
 800a6c4:	eee7 6a86 	vfma.f32	s13, s15, s12
 800a6c8:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800a754 <__ieee754_asinf+0x1b8>
 800a6cc:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800a6d0:	eddf 6a21 	vldr	s13, [pc, #132]	@ 800a758 <__ieee754_asinf+0x1bc>
 800a6d4:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a6d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a6dc:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800a6e0:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800a6e4:	eea0 0a27 	vfma.f32	s0, s0, s15
 800a6e8:	e76c      	b.n	800a5c4 <__ieee754_asinf+0x28>
 800a6ea:	ee10 3a10 	vmov	r3, s0
 800a6ee:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800a6f2:	f023 030f 	bic.w	r3, r3, #15
 800a6f6:	ee07 3a10 	vmov	s14, r3
 800a6fa:	eea7 8a47 	vfms.f32	s16, s14, s14
 800a6fe:	ee70 5a00 	vadd.f32	s11, s0, s0
 800a702:	ee30 0a07 	vadd.f32	s0, s0, s14
 800a706:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800a728 <__ieee754_asinf+0x18c>
 800a70a:	ee88 5a00 	vdiv.f32	s10, s16, s0
 800a70e:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 800a764 <__ieee754_asinf+0x1c8>
 800a712:	eee5 7a66 	vfms.f32	s15, s10, s13
 800a716:	eed5 7a86 	vfnms.f32	s15, s11, s12
 800a71a:	eeb0 6a40 	vmov.f32	s12, s0
 800a71e:	eea7 6a66 	vfms.f32	s12, s14, s13
 800a722:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800a726:	e7aa      	b.n	800a67e <__ieee754_asinf+0xe2>
 800a728:	b33bbd2e 	.word	0xb33bbd2e
 800a72c:	3fc90fdb 	.word	0x3fc90fdb
 800a730:	7149f2ca 	.word	0x7149f2ca
 800a734:	3a4f7f04 	.word	0x3a4f7f04
 800a738:	3811ef08 	.word	0x3811ef08
 800a73c:	3e2aaaab 	.word	0x3e2aaaab
 800a740:	bd241146 	.word	0xbd241146
 800a744:	3e4e0aa8 	.word	0x3e4e0aa8
 800a748:	bea6b090 	.word	0xbea6b090
 800a74c:	3d9dc62e 	.word	0x3d9dc62e
 800a750:	bf303361 	.word	0xbf303361
 800a754:	4001572d 	.word	0x4001572d
 800a758:	c019d139 	.word	0xc019d139
 800a75c:	3f799999 	.word	0x3f799999
 800a760:	333bbd2e 	.word	0x333bbd2e
 800a764:	3f490fdb 	.word	0x3f490fdb

0800a768 <__ieee754_atan2f>:
 800a768:	ee10 2a90 	vmov	r2, s1
 800a76c:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800a770:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800a774:	b510      	push	{r4, lr}
 800a776:	eef0 7a40 	vmov.f32	s15, s0
 800a77a:	d806      	bhi.n	800a78a <__ieee754_atan2f+0x22>
 800a77c:	ee10 0a10 	vmov	r0, s0
 800a780:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800a784:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a788:	d904      	bls.n	800a794 <__ieee754_atan2f+0x2c>
 800a78a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800a78e:	eeb0 0a67 	vmov.f32	s0, s15
 800a792:	bd10      	pop	{r4, pc}
 800a794:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800a798:	d103      	bne.n	800a7a2 <__ieee754_atan2f+0x3a>
 800a79a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a79e:	f000 b883 	b.w	800a8a8 <atanf>
 800a7a2:	1794      	asrs	r4, r2, #30
 800a7a4:	f004 0402 	and.w	r4, r4, #2
 800a7a8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800a7ac:	b943      	cbnz	r3, 800a7c0 <__ieee754_atan2f+0x58>
 800a7ae:	2c02      	cmp	r4, #2
 800a7b0:	d05e      	beq.n	800a870 <__ieee754_atan2f+0x108>
 800a7b2:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800a884 <__ieee754_atan2f+0x11c>
 800a7b6:	2c03      	cmp	r4, #3
 800a7b8:	bf08      	it	eq
 800a7ba:	eef0 7a47 	vmoveq.f32	s15, s14
 800a7be:	e7e6      	b.n	800a78e <__ieee754_atan2f+0x26>
 800a7c0:	b941      	cbnz	r1, 800a7d4 <__ieee754_atan2f+0x6c>
 800a7c2:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800a888 <__ieee754_atan2f+0x120>
 800a7c6:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800a88c <__ieee754_atan2f+0x124>
 800a7ca:	2800      	cmp	r0, #0
 800a7cc:	bfb8      	it	lt
 800a7ce:	eef0 7a47 	vmovlt.f32	s15, s14
 800a7d2:	e7dc      	b.n	800a78e <__ieee754_atan2f+0x26>
 800a7d4:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800a7d8:	d110      	bne.n	800a7fc <__ieee754_atan2f+0x94>
 800a7da:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a7de:	f104 34ff 	add.w	r4, r4, #4294967295
 800a7e2:	d107      	bne.n	800a7f4 <__ieee754_atan2f+0x8c>
 800a7e4:	2c02      	cmp	r4, #2
 800a7e6:	d846      	bhi.n	800a876 <__ieee754_atan2f+0x10e>
 800a7e8:	4b29      	ldr	r3, [pc, #164]	@ (800a890 <__ieee754_atan2f+0x128>)
 800a7ea:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a7ee:	edd3 7a00 	vldr	s15, [r3]
 800a7f2:	e7cc      	b.n	800a78e <__ieee754_atan2f+0x26>
 800a7f4:	2c02      	cmp	r4, #2
 800a7f6:	d841      	bhi.n	800a87c <__ieee754_atan2f+0x114>
 800a7f8:	4b26      	ldr	r3, [pc, #152]	@ (800a894 <__ieee754_atan2f+0x12c>)
 800a7fa:	e7f6      	b.n	800a7ea <__ieee754_atan2f+0x82>
 800a7fc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a800:	d0df      	beq.n	800a7c2 <__ieee754_atan2f+0x5a>
 800a802:	1a5b      	subs	r3, r3, r1
 800a804:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800a808:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800a80c:	da1a      	bge.n	800a844 <__ieee754_atan2f+0xdc>
 800a80e:	2a00      	cmp	r2, #0
 800a810:	da01      	bge.n	800a816 <__ieee754_atan2f+0xae>
 800a812:	313c      	adds	r1, #60	@ 0x3c
 800a814:	db19      	blt.n	800a84a <__ieee754_atan2f+0xe2>
 800a816:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800a81a:	f7ff fceb 	bl	800a1f4 <fabsf>
 800a81e:	f000 f843 	bl	800a8a8 <atanf>
 800a822:	eef0 7a40 	vmov.f32	s15, s0
 800a826:	2c01      	cmp	r4, #1
 800a828:	d012      	beq.n	800a850 <__ieee754_atan2f+0xe8>
 800a82a:	2c02      	cmp	r4, #2
 800a82c:	d017      	beq.n	800a85e <__ieee754_atan2f+0xf6>
 800a82e:	2c00      	cmp	r4, #0
 800a830:	d0ad      	beq.n	800a78e <__ieee754_atan2f+0x26>
 800a832:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800a898 <__ieee754_atan2f+0x130>
 800a836:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a83a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800a89c <__ieee754_atan2f+0x134>
 800a83e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a842:	e7a4      	b.n	800a78e <__ieee754_atan2f+0x26>
 800a844:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800a888 <__ieee754_atan2f+0x120>
 800a848:	e7ed      	b.n	800a826 <__ieee754_atan2f+0xbe>
 800a84a:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800a8a0 <__ieee754_atan2f+0x138>
 800a84e:	e7ea      	b.n	800a826 <__ieee754_atan2f+0xbe>
 800a850:	ee17 3a90 	vmov	r3, s15
 800a854:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800a858:	ee07 3a90 	vmov	s15, r3
 800a85c:	e797      	b.n	800a78e <__ieee754_atan2f+0x26>
 800a85e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800a898 <__ieee754_atan2f+0x130>
 800a862:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a866:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800a89c <__ieee754_atan2f+0x134>
 800a86a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a86e:	e78e      	b.n	800a78e <__ieee754_atan2f+0x26>
 800a870:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800a89c <__ieee754_atan2f+0x134>
 800a874:	e78b      	b.n	800a78e <__ieee754_atan2f+0x26>
 800a876:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800a8a4 <__ieee754_atan2f+0x13c>
 800a87a:	e788      	b.n	800a78e <__ieee754_atan2f+0x26>
 800a87c:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800a8a0 <__ieee754_atan2f+0x138>
 800a880:	e785      	b.n	800a78e <__ieee754_atan2f+0x26>
 800a882:	bf00      	nop
 800a884:	c0490fdb 	.word	0xc0490fdb
 800a888:	3fc90fdb 	.word	0x3fc90fdb
 800a88c:	bfc90fdb 	.word	0xbfc90fdb
 800a890:	0801e3a4 	.word	0x0801e3a4
 800a894:	0801e398 	.word	0x0801e398
 800a898:	33bbbd2e 	.word	0x33bbbd2e
 800a89c:	40490fdb 	.word	0x40490fdb
 800a8a0:	00000000 	.word	0x00000000
 800a8a4:	3f490fdb 	.word	0x3f490fdb

0800a8a8 <atanf>:
 800a8a8:	b538      	push	{r3, r4, r5, lr}
 800a8aa:	ee10 5a10 	vmov	r5, s0
 800a8ae:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800a8b2:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800a8b6:	eef0 7a40 	vmov.f32	s15, s0
 800a8ba:	d310      	bcc.n	800a8de <atanf+0x36>
 800a8bc:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800a8c0:	d904      	bls.n	800a8cc <atanf+0x24>
 800a8c2:	ee70 7a00 	vadd.f32	s15, s0, s0
 800a8c6:	eeb0 0a67 	vmov.f32	s0, s15
 800a8ca:	bd38      	pop	{r3, r4, r5, pc}
 800a8cc:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800aa04 <atanf+0x15c>
 800a8d0:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800aa08 <atanf+0x160>
 800a8d4:	2d00      	cmp	r5, #0
 800a8d6:	bfc8      	it	gt
 800a8d8:	eef0 7a47 	vmovgt.f32	s15, s14
 800a8dc:	e7f3      	b.n	800a8c6 <atanf+0x1e>
 800a8de:	4b4b      	ldr	r3, [pc, #300]	@ (800aa0c <atanf+0x164>)
 800a8e0:	429c      	cmp	r4, r3
 800a8e2:	d810      	bhi.n	800a906 <atanf+0x5e>
 800a8e4:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800a8e8:	d20a      	bcs.n	800a900 <atanf+0x58>
 800a8ea:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800aa10 <atanf+0x168>
 800a8ee:	ee30 7a07 	vadd.f32	s14, s0, s14
 800a8f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a8f6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800a8fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8fe:	dce2      	bgt.n	800a8c6 <atanf+0x1e>
 800a900:	f04f 33ff 	mov.w	r3, #4294967295
 800a904:	e013      	b.n	800a92e <atanf+0x86>
 800a906:	f7ff fc75 	bl	800a1f4 <fabsf>
 800a90a:	4b42      	ldr	r3, [pc, #264]	@ (800aa14 <atanf+0x16c>)
 800a90c:	429c      	cmp	r4, r3
 800a90e:	d84f      	bhi.n	800a9b0 <atanf+0x108>
 800a910:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800a914:	429c      	cmp	r4, r3
 800a916:	d841      	bhi.n	800a99c <atanf+0xf4>
 800a918:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800a91c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800a920:	eea0 7a27 	vfma.f32	s14, s0, s15
 800a924:	2300      	movs	r3, #0
 800a926:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a92a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a92e:	1c5a      	adds	r2, r3, #1
 800a930:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800a934:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800aa18 <atanf+0x170>
 800a938:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800aa1c <atanf+0x174>
 800a93c:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800aa20 <atanf+0x178>
 800a940:	ee66 6a06 	vmul.f32	s13, s12, s12
 800a944:	eee6 5a87 	vfma.f32	s11, s13, s14
 800a948:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800aa24 <atanf+0x17c>
 800a94c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a950:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800aa28 <atanf+0x180>
 800a954:	eee7 5a26 	vfma.f32	s11, s14, s13
 800a958:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800aa2c <atanf+0x184>
 800a95c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a960:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800aa30 <atanf+0x188>
 800a964:	eee7 5a26 	vfma.f32	s11, s14, s13
 800a968:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800aa34 <atanf+0x18c>
 800a96c:	eea6 5a87 	vfma.f32	s10, s13, s14
 800a970:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800aa38 <atanf+0x190>
 800a974:	eea5 7a26 	vfma.f32	s14, s10, s13
 800a978:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800aa3c <atanf+0x194>
 800a97c:	eea7 5a26 	vfma.f32	s10, s14, s13
 800a980:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800aa40 <atanf+0x198>
 800a984:	eea5 7a26 	vfma.f32	s14, s10, s13
 800a988:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a98c:	eea5 7a86 	vfma.f32	s14, s11, s12
 800a990:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a994:	d121      	bne.n	800a9da <atanf+0x132>
 800a996:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a99a:	e794      	b.n	800a8c6 <atanf+0x1e>
 800a99c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800a9a0:	ee30 7a67 	vsub.f32	s14, s0, s15
 800a9a4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a9ae:	e7be      	b.n	800a92e <atanf+0x86>
 800a9b0:	4b24      	ldr	r3, [pc, #144]	@ (800aa44 <atanf+0x19c>)
 800a9b2:	429c      	cmp	r4, r3
 800a9b4:	d80b      	bhi.n	800a9ce <atanf+0x126>
 800a9b6:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800a9ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a9be:	eea0 7a27 	vfma.f32	s14, s0, s15
 800a9c2:	2302      	movs	r3, #2
 800a9c4:	ee70 6a67 	vsub.f32	s13, s0, s15
 800a9c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9cc:	e7af      	b.n	800a92e <atanf+0x86>
 800a9ce:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800a9d2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a9d6:	2303      	movs	r3, #3
 800a9d8:	e7a9      	b.n	800a92e <atanf+0x86>
 800a9da:	4a1b      	ldr	r2, [pc, #108]	@ (800aa48 <atanf+0x1a0>)
 800a9dc:	491b      	ldr	r1, [pc, #108]	@ (800aa4c <atanf+0x1a4>)
 800a9de:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800a9e2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800a9e6:	edd3 6a00 	vldr	s13, [r3]
 800a9ea:	ee37 7a66 	vsub.f32	s14, s14, s13
 800a9ee:	2d00      	cmp	r5, #0
 800a9f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a9f4:	edd2 7a00 	vldr	s15, [r2]
 800a9f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a9fc:	bfb8      	it	lt
 800a9fe:	eef1 7a67 	vneglt.f32	s15, s15
 800aa02:	e760      	b.n	800a8c6 <atanf+0x1e>
 800aa04:	bfc90fdb 	.word	0xbfc90fdb
 800aa08:	3fc90fdb 	.word	0x3fc90fdb
 800aa0c:	3edfffff 	.word	0x3edfffff
 800aa10:	7149f2ca 	.word	0x7149f2ca
 800aa14:	3f97ffff 	.word	0x3f97ffff
 800aa18:	3c8569d7 	.word	0x3c8569d7
 800aa1c:	3d4bda59 	.word	0x3d4bda59
 800aa20:	bd6ef16b 	.word	0xbd6ef16b
 800aa24:	3d886b35 	.word	0x3d886b35
 800aa28:	3dba2e6e 	.word	0x3dba2e6e
 800aa2c:	3e124925 	.word	0x3e124925
 800aa30:	3eaaaaab 	.word	0x3eaaaaab
 800aa34:	bd15a221 	.word	0xbd15a221
 800aa38:	bd9d8795 	.word	0xbd9d8795
 800aa3c:	bde38e38 	.word	0xbde38e38
 800aa40:	be4ccccd 	.word	0xbe4ccccd
 800aa44:	401bffff 	.word	0x401bffff
 800aa48:	0801e3c0 	.word	0x0801e3c0
 800aa4c:	0801e3b0 	.word	0x0801e3b0

0800aa50 <_init>:
 800aa50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa52:	bf00      	nop
 800aa54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa56:	bc08      	pop	{r3}
 800aa58:	469e      	mov	lr, r3
 800aa5a:	4770      	bx	lr

0800aa5c <_fini>:
 800aa5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa5e:	bf00      	nop
 800aa60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa62:	bc08      	pop	{r3}
 800aa64:	469e      	mov	lr, r3
 800aa66:	4770      	bx	lr
